<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vermillion Phoinix by Alfred Sun]]></title>
  <link href="http://alfred-sun.github.io/atom.xml" rel="self"/>
  <link href="http://alfred-sun.github.io/"/>
  <updated>2017-03-12T21:46:35+08:00</updated>
  <id>http://alfred-sun.github.io/</id>
  <author>
    <name><![CDATA[Alfred Sun]]></name>
    
    <email><![CDATA[sym_dfbb@163.com]]></email>
    
  </author>
  <generator uri="http://jekyllrb.com/">Jekyll</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 守护进程的实现]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/06/18/daemon-implementation/"/>
    <updated>2015-06-18T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/06/18/daemon-implementation</id>
    <content type="html"><![CDATA[<blockquote>
<p><em><strong>Look at the past for inspiration, but focus on the future, because tomorrow is shaped by the choices we make today.</strong></em></p>
</blockquote>

<p>昨天突然地来了场面试，让我有点不知所措，好在好多好多天前复习了下，但是自感表现不是很好（<em>面试官的声音比较柔和，更是让我不知所措</em>）。询问了做过的项目后，看我简历上有写 Linux 进程相关的经历，就开始追问了，从 IPC 到 Redis 再到 Nginx 模块开发、网络编程，还问了下 Golang（老实讲，Go 初学，只照着官网文档看了一遍，几天后忘得差不多了），最后问了个问题，让我遗憾了好多天，就是本文的题目：<strong>如何实现守护进程？</strong></p>

<p>本来这个应该知道的，前面看过 Nginx 和 Redis 基础架构，都是以 <strong>Daemon</strong> 的方式运行的。但是当时没查词典 “Daemon” 是什么意思，然而又感觉这个名词好像在哪里见过，结果便懵了，只能说不知道“<strong>守护进程</strong>”这个东西……归根到底还是因为没有相关服务端开发经验惹的祸。这不禁让我记起当年老大问我“SQL绑定变量”的原因是什么，只记得当时脸红过关羽；哎，只知道这样用，却不知这个东西叫啥……</p>

<p>那么守护进程到底是做什么的呢？该如何实现呢？经过一番深刻地反省和检讨之后，博主认真学习怎么去实现守护进程。</p>

<h2>守护进程 Daemon</h2>

<p>守护进程，也即通常所说的 Daemon 进程，是 Linux 下一种特殊的后台服务进程，它独立于控制终端并且周期性的执行某种任务或者等待处理某些发生的事件。守护进程通常在系统引导装入时启动，在系统关闭时终止。Linux 系统下大多数服务都是通过守护进程实现的。</p>

<p>守护进程的名称通常以 “d” 结尾，如 “httpd”、“crond”、“mysqld”等。</p>

<p>控制终端是什么？<br>
终端是用户与操作系统进行交流的界面。在 Linux 系统中，用户由终端登录系统登入系统后会得到一个 shell 进程，这个终端便成为这个 shell 进程的控制终端（Controlling Terminal）。shell 进程启动的其他进程，由于复制了父进程的信息，因此也都同依附于这个控制终端。<br>
从终端启动的进程都依附于该终端，并受终端控制和影响。终端关闭，相应的进程都会自动关闭。守护进程脱离终端的目的，也即是不受终端变化的影响不被终端打断，当然也不想在终端显示执行过程中的信息。</p>

<!--more-->

<p><strong>如果不想进程受到用户、终端或其他变化的影响，就必须把它变成守护进程。</strong></p>

<h2>如何实现守护进程</h2>

<p>守护进程属于 Linux 进程管理的范畴。其首要的特性是<strong>后台运行</strong>；其次，要与从启动它的父进程的运行环境隔离开来，需要处理的内容大致包括会话、控制终端、进程组、文件描述符、文件权限掩码以及工作目录等。<br>
守护进程可以在 Linux 启动时从脚本 <code>/etc/rc.d</code> 启动，也可以由作业规划进程 <code>crond</code> 启动，还可以通过用户终端（一般是 Shell）启动。</p>

<p>实现一个守护进程，其实就是将普通进程按照上述特性改造为守护进程的过程。<br>
需要注意的一点是，不同版本的 Unix 系统其实现机制不同，BSD 和 Linux 下的实现细节就不同。</p>

<p>根据上述的特性，我们便可以创建一个简单的守护进程，这里以 Linux 系统下从终端 Shell 来启动为例。</p>

<h3>1、创建子进程，父进程退出</h3>

<p>编写守护进程第一步，就是要使得进程独立于终端后台运行。为避免终端挂起，将父进程退出，造成程序已经退出的假象，而后面的工作都在子进程完成，这样控制终端也可以继续执行其他命令，从而在形式上脱离控制终端的控制。</p>

<p>由于父进程先于子进程退出，子进程就变为孤儿进程，并由 init 进程作为其父进程收养。</p>

<h3>2、子进程创建新会话</h3>

<p>经过上一步，子进程已经后台运行，然而系统调用 <code>fork</code> 创建子进程，子进程便复制了原父进程的进程控制块（PCB），相应地继承了一些信息，包括会话、进程组、控制终端等信息。尽管父进程已经退出，但子进程的会话、进程组、控制终端的信息没有改变。为使子进程完全摆脱父进程的环境，需要调用 <code>setsid</code> 函数。</p>

<p>这里有必要说一下两个概念：<strong>会话</strong>和<strong>进程组</strong>。  </p>

<p>进程组：一个或多个进程的集合。拥有唯一的标识进程组 ID，每个进程组都有一个组长进程，该进程的进程号等于其进程组的 ID。进程组 ID 不会因组长进程退出而受到影响，<code>fork</code> 调用也不会改变进程组 ID。</p>

<p>会话：一个或多个进程组的集合。新建会话时，当前进程（会话中唯一的进程）成为会话首进程，<strong>也是当前进程组的组长进程</strong>，其进程号为会话 ID，同样也是该进程组的 ID。它通常是登录 shell，也可以是调用 <code>setsid</code> 新建会话的孤儿进程。<br>
注意：组长进程调用 <code>setsid</code> ，则出错返回，无法新建会话。</p>

<p>通常，会话开始于用户登录，终止于用户退出，期间的所有进程都属于这个会话。一个会话一般包含一个<strong>会话首进程</strong>、一个<strong>前台进程组</strong>和一个<strong>后台进程组</strong>，控制终端可有可无；此外，前台进程组只有一个，后台进程组可以有多个，这些进程组共享一个控制终端。</p>

<ul>
<li><p>前台进程组：<br>
该进程组中的进程可以<strong>向终端设备进行读、写操作</strong>（属于该组的进程可以从终端获得输入）。该进程组的 ID 等于控制终端进程组 ID，通常据此来判断前台进程组。</p></li>
<li><p>后台进程组：<br>
会话中除了会话首进程和前台进程组以外的所有进程，都属于后台进程组。该进程组中的进程<strong>只能向终端设备进行写操作</strong>。</p></li>
</ul>

<p>下图为会话、进程组、进程和控制终端之间的关系（登录 shell 进程本身属于一个单独的进程组）。</p>

<p><img src="/media/pictures/daemon-implementation/session.png" alt="session"></p>

<p><em>想了解更多关于会话 <strong>Sessions</strong> 内容，可以认真读一下 <a href="http://www.apuebook.com/"><strong>APUE</strong></a> 这本书。</em></p>

<p>如果调用进程非组长进程，那么就能创建一个新会话：  </p>

<ul>
<li>该进程变成新会话的首进程</li>
<li>该进程成为一个新进程组的组长进程</li>
<li>该进程没有控制终端，如果之前有，则会被中断（<strong>会话过程对控制终端的独占性</strong>）</li>
</ul>

<p>也就是说：<strong>组长进程不能成为新会话首进程，新会话首进程必定成为组长进程</strong>。</p>

<p>到此为止，我们熟悉了会话与进程间的关系，那么如何新建一个会话呢？</p>

<p>通过调用 <code>setsid</code> 函数可以创建一个新会话，调用进程担任新会话的首进程，其作用有：  </p>

<ul>
<li>使当前进程脱离原会话的控制</li>
<li>使当前进程脱离原进程组的控制</li>
<li>使当前进程脱离原控制终端的控制</li>
</ul>

<p>这样，当前进程才能实现真正意义上完全独立出来，摆脱其他进程的控制。</p>

<p>另外，要提一下，尽管进程变成无终端的会话首进程，但是它仍然可以重新申请打开一个控制终端。可以通过再次创建子进程结束当前进程，<strong>使进程不再是会话首进程</strong>来禁止进程重新打开控制终端。</p>

<h3>3、改变当前目录为根目录</h3>

<p>直接调用 <code>chdir</code> 函数切换到根目录下。<br>
由于进程运行过程中，当前目录所在的文件系统（如：“/mnt/usb”）是不能卸载的，为避免对以后的使用造成麻烦，改变工作目录为根目录是必要的。如有特殊需要，也可以改变到特定目录，如“/tmp”。</p>

<h3>4、重设文件权限掩码</h3>

<p><code>fork</code> 函数创建的子进程，继承了父进程的文件操作权限，为防止对以后使用文件带来问题，需要重设<strong>文件权限掩码</strong>。</p>

<p>文件权限掩码，设定了文件权限中要屏蔽掉的对应位。这个跟文件权限的八进制数字模式表示差不多，将现有存取权限减去权限掩码（或做异或运算），就可产生新建文件时的预设权限。</p>

<p>调用 <code>umask</code> 设置文件权限掩码，通常是重设为 0，清除掩码，这样可以大大增强守护进程的灵活性。</p>

<h3>5、关闭文件描述符</h3>

<p>同文件权限掩码一样，子进程可能继承了父进程打开的文件，而这些文件可能永远不会被用到，但它们一样消耗系统资源，而且可能导致所在的文件系统无法卸下，因此需要一一关闭它们。由于守护进程脱离了终端运行，因此标准输入、标准输出、标准错误输出这3个文件描述符也要关闭。通常按如下方式来关闭：</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAXFILE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="n">close</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</code></pre></div>
<p>这里要注意下，<code>param.h</code> 头文件中定义了一个常量 <code>NOFILE</code>，表示最大允许的文件描述符，但是我们尽量不要用它，而是通过调用函数 <code>getdtablesize</code> 返回进程文件描述符表中的项数（即打开的文件数目）：</p>

<blockquote>
<p>/* The following are not really correct but it is a value we used for a
long time<br>
and which seems to be usable. People should not use <strong>NOFILE</strong> and <strong>NCARGS</strong> anyway. */<br>
<strong>#define NOFILE 256</strong><br>
<strong>#define NCARGS 131072</strong>  </p>
</blockquote>

<hr>

<p>至此为止，一个简单的守护进程就建立起来了。<br>
另外，有些 Unix 提供一个 <code>daemon</code> 的 C 库函数，实现守护进程。（BSD 和 Linux 均提供这个函数）：</p>

<blockquote>
<p><strong>NAME</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;  daemon - run in the background</p>

<p><strong>SYNOPSIS</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;  #include &lt;unistd.h&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;  int daemon(int nochdir, int noclose);</p>

<p><strong>DESCRIPTION</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;  The  daemon()  function  is  for programs wishing to detach themselves from the controlling terminal and run in the background as system daemons.</p>
</blockquote>

<h2>守护进程实例</h2>

<p>代码说明：</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>
<span class="cp">#include &lt;unistd.h&gt;</span>
<span class="cp">#include &lt;sys/param.h&gt;</span>
<span class="cp">#include &lt;sys/types.h&gt;</span>
<span class="cp">#include &lt;sys/stat.h&gt;</span>
<span class="cp">#include &lt;fcntl.h&gt;</span>

<span class="c1">// 守护进程初始化函数</span>
<span class="kt">void</span> <span class="nf">init_daemon</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">pid_t</span> <span class="n">pid</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Fork error !</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>        <span class="c1">// 父进程退出</span>
    <span class="p">}</span>

    <span class="n">setsid</span><span class="p">();</span>           <span class="c1">// 子进程开启新会话，并成为会话首进程和组长进程</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Fork error !</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>        <span class="c1">// 结束第一子进程，第二子进程不再是会话首进程</span>
    <span class="p">}</span>
    <span class="n">chdir</span><span class="p">(</span><span class="s">&quot;/tmp&quot;</span><span class="p">);</span>      <span class="c1">// 改变工作目录</span>
    <span class="n">umask</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>           <span class="c1">// 重设文件掩码</span>
    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">getdtablesize</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
       <span class="n">close</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>        <span class="c1">// 关闭打开的文件描述符</span>
    <span class="p">}</span>

    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">fp</span><span class="p">;</span>
    <span class="kt">time_t</span> <span class="n">t</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;This is a daemon:  &quot;</span><span class="p">};</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">datetime</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">//printf(&quot;The NOFILE is: %d\n&quot;, NOFILE);</span>
    <span class="c1">//printf(&quot;The tablesize is: %d\n&quot;, getdtablesize());</span>
    <span class="c1">//printf(&quot;The pid is: %d\n&quot;, getpid());</span>

    <span class="c1">// 初始化 Daemon 进程</span>
    <span class="n">init_daemon</span><span class="p">();</span>

    <span class="c1">// 每隔一分钟记录运行状态</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="p">(</span><span class="n">fp</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/tmp/daemon.log&quot;</span><span class="p">,</span> <span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_WRONLY</span><span class="o">|</span><span class="n">O_APPEND</span><span class="p">,</span> <span class="mo">0600</span><span class="p">)))</span> <span class="p">{</span>
          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Open file error !</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
          <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
        <span class="n">write</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">datetime</span> <span class="o">=</span> <span class="n">asctime</span><span class="p">(</span><span class="n">localtime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t</span><span class="p">));</span>
        <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">datetime</span><span class="p">);</span>
        <span class="n">write</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
        <span class="n">close</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
        <span class="n">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>测试结果：</p>

<p><img src="/media/pictures/daemon-implementation/daemon-log.png" alt="test result"></p>

<h2>僵尸进程</h2>

<p>提到守护进程，就不得不说一下另一类特殊进程——<strong>僵尸进程</strong>。</p>

<p>那什么是僵尸进程呢？<br>
以前看的书上大致都说“如果父进程中没有等待子进程的结束，那么子进程就会变成僵尸进程”，所以就想当然地认为“如果父进程先于子进程结束，那么子进程就成为僵尸进程”。<br>
事实上，这是完全错误的理解，<strong>父进程先于子进程结束</strong>，这时的子进程应该称作“<strong>孤儿进程</strong>（Orphan）”，它将被 1 号进程（init 进程）接管，init 进程成为其父进程。而僵尸进程是<strong>子进程先于父进程结束</strong>，而且父进程没有函数调用 <code>wait()</code> 或 <code>waitpid()</code> 等待子进程结束，也没有注册 <code>SIGCHLD</code> 信号处理函数，结果使得子进程的<strong>进程列表信息</strong>无法回收，就变成了僵尸进程（Zombie）。</p>

<p><strong>一个已经终止，但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息、释放它仍占用的资源）的进程被称为僵尸进程。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash 学习笔记]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/13/bash-notes/"/>
    <updated>2015-05-13T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/13/bash-notes</id>
    <content type="html"><![CDATA[<h2>bash 多行注释</h2>

<p>单行注释，井号 # 可以搞定，下面说多行的：通过 <strong>Here Documents</strong> 实现。</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">:<span class="s">&lt;&lt;EOF</span>
<span class="s">注释的代码...</span>
<span class="s">EOF</span>
</code></pre></div>
<p>冒号 <code>:</code> 是空命令，表示什么都不做，亦即相当于注释了。<br>
“EOF” 为 Here Documents 中的定义符号，名称任意，只要前后匹配就行。</p>

<p>Here Documents 的更多使用方法参考这里：<a href="http://tldp.org/LDP/abs/html/here-docs.html">http://tldp.org/LDP/abs/html/here-docs.html</a>  </p>

<p>说明: 这种方法当注释代码里出现<strong>变量引用</strong>或者是<strong>反引号</strong>时，bash 会去尝试解析他们，会提示错误信息，解决方法有下面几种:</p>

<!--more-->

<p>1) 方法一</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:&lt;&lt;\EOF
注释的代码...
EOF
</code></pre></div>
<p>2) 方法二</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:&lt;&lt;&#39;EOF&#39;
注释的代码...
EOF
</code></pre></div>
<p>3) 方法三</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:&lt;&lt;&#39;EOF
注释的代码...
EOF&#39;
</code></pre></div>
<p>4) 方法四</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:&lt;&lt;EOF&#39;
注释的代码...
&#39;EOF
</code></pre></div>
<p>5) 方法五</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:&lt;&lt;&#39;
注释的代码...
&#39;
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[启用 Xfce 桌面的事件声音]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/06/how-to-enable-event-sounds-in-xfce/"/>
    <updated>2015-05-06T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/06/how-to-enable-event-sounds-in-xfce</id>
    <content type="html"><![CDATA[<ol>
<li>Enable &ldquo;Event Sounds&rdquo; in Settings Manager -&gt; Appearance -&gt; Settings</li>
<li>Set &ldquo;xsettings/Net/SoundThemeName&rdquo; in the Settings Manager (to a sound theme located in /usr/share/sounds).</li>
<li>Export GTK_MODULES=&ldquo;canberra-gtk-module&rdquo; (In Arch this was done automatically by install the libcanberra package, in Xubuntu and Fedora I had to manually create the file: see <a href="http://ubuntuforums.org/showthread.php?t=1869787&amp;page=2&amp;p=12008205&amp;viewfull=1#post12008205">http://ubuntuforums.org/showthread.php?t=1869787&amp;page=2&amp;p=12008205&amp;viewfull=1#post12008205</a>)</li>
<li>Install the following packages: Arch (libcanberra libcanberra-pulse) Xubuntu (sox gnome-session-canberra) Fedora (libcanberra)</li>
<li>Turn up &ldquo;System Sounds&rdquo; in pavucontrol (Pulseaudio).</li>
</ol>

<p>// /etc/X11/xinit/xinitrc.d/50-xinput.sh</p>

<p>if [ -z &ldquo;$GTK<em>MODULES&rdquo; ] ; then
    GTK</em>MODULES=&ldquo;canberra-gtk-module&rdquo;
else
    GTK<em>MODULES=&ldquo;$GTK</em>MODULES:canberra-gtk-module&rdquo;
fi
export GTK_MODULES</p>

<p>注销重新登录，声音就出现了。</p>

<p>默认情况下，桌面环境安装的声音主题是 “freedesktop”，如果要更改，需要到 “xsettings/Net/SoundThemeName” 中设定。</p>

<p>另外，可能你会发现并没有听见声音特效，这时你要确认下声音主题里面是否包含你所触发的事件的声音文件。</p>

<!--more-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源编辑器：Visual Studio Code]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/05/visual-studio-code/"/>
    <updated>2015-05-05T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/05/visual-studio-code</id>
    <content type="html"><![CDATA[<p>M$ 的 Visual Studio 家族新添一名支持 Linux 的成员，成为它家首个跨平台的代码编辑器。</p>

<p><strong>Visual Studio Code</strong> 是一款面向云端应用开发的代码编辑器（轻量级 IDE ？），现阶段具备的功能有：</p>

<ul>
<li>具备家族标志性的代码补全功能</li>
<li>突出文件导航定位的特点</li>
<li>支持 Node.js 和 ASP.NET v5 应用开发</li>
<li>具备 Node.js 调试功能，未来还将增添更多支持</li>
<li>内置 Git 支持</li>
</ul>

<p><a href="https://code.visualstudio.com/">官方首页及下载地址</a></p>

<p><a href="http://techcrunch.com/2015/04/29/microsoft-shocks-the-world-with-visual-studio-code-a-free-code-editor-for-os-x-linux-and-windows/#.geynzw:moa5"><strong>Microsoft Launches Visual Studio Code, A Free Cross-Platform Code Editor For OS X, Linux And Windows</strong></a> </p>

<!--more-->

<p>使用了 GitHub <a href="http://electron.atom.io/">Electron Shell</a> 前端技术，流畅度很不错，界面上类似 Web APP，功能上类似 sublime 和 VS 编辑器的结合，简单易用性很强。</p>

<p>支持语法高亮的语言有很多，主要还是偏前端语言开发。</p>

<p>使用了一下下后，发表下感慨，虽然目前的版本存在的问题也比较多（尤其是非 ASCII 字符输入的问题），但是用起来感觉蛮爽。。</p>

<p><img src="https://code.visualstudio.com/Content/images/hero-osx.png" alt="code"></p>

<hr>

<p>有木有发现官网那个 demo 的兄弟用的 <strong>MacBook Air</strong> <a href="https://az754404.vo.msecnd.net/public/vscode_preview.mp4" title="出门左转，微软项目">&hellip;</a><br>
要吐槽，两个标志性的 Brand，违和感很强烈，有木有呀……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何启用 root 用户登录 Fedora ？]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/05/problems-with-using-chrome/"/>
    <updated>2015-05-05T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/05/problems-with-using-chrome</id>
    <content type="html"><![CDATA[<p>在终端输入</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[test@fedora ~]$ su  
Password:   
[root@fedora test]# vim /etc/pam.d/gdm-password  
</code></pre></div>
<p>注释掉这段及前面加上#号  如下</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#auth        required      pam_succeed_if.so user != root quiet  
</code></pre></div>
<p>保存之后注销再用root和密码登陆就好了。</p>

<p>修改目录 /etc/pam.d/gdm与/etc/pam.d/gdm-password两个文件  </p>

<p>一般修改方法:<br>
在终端中输入su命令并输入root密码这样我在终端中就有了root的操权限接下来我们使用gdit命令对其进行修改<br>
gdit /etc/pam.d/gdm<br>
在这段&quot;auth required pam<em>succeed</em>if.so user != root quiet&quot;加上#号注释掉就可以了  </p>

<p>同样的gdit /etc/pam.d/gdm-password<br>
也是在auth required pam<em>succeed</em>if.so user != root quiet前面加上#号注释<br>
保存之后我们重启或者注销一次计算机就能以root进行登录系统了  </p>

<!--more-->

<p><img src="/media/pictures/test.png" alt="image"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习 tar 压缩命令]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/04/linux-tar-command/"/>
    <updated>2015-05-04T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/04/linux-tar-command</id>
    <content type="html"><![CDATA[<p>linux解压 tar命令</p>

<p>tar [-cxtzjvfpPN] 文件与目录 &hellip;.</p>

<p>参数：</p>

<p>-c ：建立一个压缩文件的参数指令(create 的意思)； 
-x ：解开一个压缩文件的参数指令！ 
-t ：查看 tarfile 里面的文件！ 
特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！ 
因为不可能同时压缩与解压缩。 
-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？ 
-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？ 
-v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！ 
-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！ 
　　　例如使用『 tar -zcvfP tfile sfile』就是错误的写法，要写成 
　　　『 tar -zcvPf tfile sfile』才对喔！ 
-p ：使用原文件的原来属性（属性不会依据使用者而变） 
-P ：可以使用绝对路径来压缩！ 
-N ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的文件中！ 
&ndash;exclude FILE：在压缩的过程中，不要将 FILE 打包！ 
范例： 
范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar 
[root@linux ~]# tar -cvf /tmp/etc.tar /etc&lt;<mark>仅打包，不压缩！ 
[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc&lt;</mark>打包后，以 gzip 压缩 
[root@linux ~]# tar -jcvf /tmp/etc.tar.bz2 /etc&lt;==打包后，以 bzip2 压缩 </p>

<h1>特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。</h1>

<h1>如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～</h1>

<h1>如果加 j 参数，则以 .tar.bz2 来作为附档名啊～</h1>

<h1>上述指令在执行的时候，会显示一个警告讯息：</h1>

<h1>『tar: Removing leading `/&ldquo; from member names』那是关於绝对路径的特殊设定。</h1>

<p>范例二：查阅上述 /tmp/etc.tar.gz 文件内有哪些文件？ 
[root@linux ~]# tar -ztvf /tmp/etc.tar.gz </p>

<h1>由於我们使用 gzip 压缩，所以要查阅该 tar file 内的文件时，</h1>

<h1>就得要加上 z 这个参数了！这很重要的！</h1>

<p>范例三：将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下 
[root@linux ~]# cd /usr/local/src 
[root@linux src]# tar -zxvf /tmp/etc.tar.gz </p>

<h1>在预设的情况下，我们可以将压缩档在任何地方解开的！以这个范例来说，</h1>

<h1>我先将工作目录变换到 /usr/local/src 底下，并且解开 /tmp/etc.tar.gz ，</h1>

<h1>则解开的目录会在 /usr/local/src/etc 呢！另外，如果您进入 /usr/local/src/etc</h1>

<h1>则会发现，该目录下的文件属性与 /etc/ 可能会有所不同喔！</h1>

<p>范例四：在 /tmp 底下，我只想要将 /tmp/etc.tar.gz 内的 etc/passwd 解开而已 
[root@linux ~]# cd /tmp 
[root@linux tmp]# tar -zxvf /tmp/etc.tar.gz etc/passwd </p>

<h1>我可以透过 tar -ztvf 来查阅 tarfile 内的文件名称，如果单只要一个文件，</h1>

<h1>就可以透过这个方式来下达！注意到！ etc.tar.gz 内的根目录 / 是被拿掉了！</h1>

<p>范例五：将 /etc/ 内的所有文件备份下来，并且保存其权限！ 
[root@linux ~]# tar -zxvpf /tmp/etc.tar.gz /etc </p>

<h1>这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时！</h1>

<p>范例六：在 /home 当中，比 2005/06/01 新的文件才备份 
[root@linux ~]# tar -N &quot;2005/06/01&rdquo; -zcvf home.tar.gz /home
范例七：我要备份 /home, /etc ，但不要 /home/dmtsai 
[root@linux ~]# tar &ndash;exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc
范例八：将 /etc/ 打包后直接解开在 /tmp 底下，而不产生文件！ 
[root@linux ~]# cd /tmp 
[root@linux tmp]# tar -cvf - /etc | tar -xvf - </p>

<h1>这个动作有点像是 cp -r /etc /tmp 啦～依旧是有其有用途的！</h1>

<h1>要注意的地方在於输出档变成 - 而输入档也变成 - ，又有一个 | 存在～</h1>

<h1>这分别代表 standard output, standard input 与管线命令啦！</h1>

<!--more-->

<p>tar命令详解</p>

<p>-c: 建立压缩档案</p>

<p>-x：解压</p>

<p>-t：查看内容</p>

<p>-r：向压缩归档文件末尾追加文件</p>

<p>-u：更新原压缩包中的文件</p>

<p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。</p>

<p>下面的参数是根据需要在压缩或解压档案时可选的。</p>

<p>-z：有gzip属性的</p>

<p>-j：有bz2属性的</p>

<p>-Z：有compress属性的</p>

<p>-v：显示所有过程</p>

<p>-O：将文件解开到标准输出</p>

<p>参数-f是必须的</p>

<p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>

<h1>tar -cf all.tar *.jpg 这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</h1>

<h1>tar -rf all.tar *.gif 这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</h1>

<h1>tar -uf all.tar logo.gif 这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</h1>

<h1>tar -tf all.tar 这条命令是列出all.tar包中所有文件，-t是列出文件的意思</h1>

<h1>tar -xf all.tar 这条命令是解出all.tar包中所有文件，-x是解开的意思</h1>

<p>查看
tar -tf aaa.tar.gz   在不解压的情况下查看压缩包的内容</p>

<p>压缩</p>

<p>tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg</p>

<p>tar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p>

<p>tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</p>

<p>tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p>

<p>解压</p>

<p>tar –xvf file.tar //解压 tar包</p>

<p>tar -xzvf file.tar.gz //解压tar.gz</p>

<p>tar -xjvf file.tar.bz2   //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Z</p>

<p>总结</p>

<p>1、*.tar 用 tar –xvf 解压</p>

<p>2、*.gz 用 gzip -d或者gunzip 解压</p>

<p>3、<em>.tar.gz和</em>.tgz 用 tar –xzf 解压</p>

<p>4、*.bz2 用 bzip2 -d或者用bunzip2 解压</p>

<p>5、*.tar.bz2用tar –xjf 解压</p>

<p>6、*.Z 用 uncompress 解压</p>

<p>7、*.tar.Z 用tar –xZf 解压</p>

<p><img src="/media/pictures/test.png" alt="image"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何启用 root 用户登录 Fedora ？]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/03/install-vmware-tools-on-linux/"/>
    <updated>2015-05-03T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/03/install-vmware-tools-on-linux</id>
    <content type="html"><![CDATA[<p>在终端输入</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[test@fedora ~]$ su  
Password:   
[root@fedora test]# vim /etc/pam.d/gdm-password  
</code></pre></div>
<p>注释掉这段及前面加上#号  如下</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#auth        required      pam_succeed_if.so user != root quiet  
</code></pre></div>
<p>保存之后注销再用root和密码登陆就好了。</p>

<p>修改目录 /etc/pam.d/gdm与/etc/pam.d/gdm-password两个文件  </p>

<p>一般修改方法:<br>
在终端中输入su命令并输入root密码这样我在终端中就有了root的操权限接下来我们使用gdit命令对其进行修改<br>
gdit /etc/pam.d/gdm<br>
在这段&quot;auth required pam<em>succeed</em>if.so user != root quiet&quot;加上#号注释掉就可以了  </p>

<p>同样的gdit /etc/pam.d/gdm-password<br>
也是在auth required pam<em>succeed</em>if.so user != root quiet前面加上#号注释<br>
保存之后我们重启或者注销一次计算机就能以root进行登录系统了  </p>

<!--more-->

<p><img src="/media/pictures/test.png" alt="image"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何启用 root 用户登录 Fedora ？]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/05/01/install-openbox-wm/"/>
    <updated>2015-05-01T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/05/01/install-openbox-wm</id>
    <content type="html"><![CDATA[<p>在终端输入</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[test@fedora ~]$ su  
Password:   
[root@fedora test]# vim /etc/pam.d/gdm-password  
</code></pre></div>
<p>注释掉这段及前面加上#号  如下</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#auth        required      pam_succeed_if.so user != root quiet  
</code></pre></div>
<p>保存之后注销再用root和密码登陆就好了。</p>

<p>修改目录 /etc/pam.d/gdm与/etc/pam.d/gdm-password两个文件  </p>

<p>一般修改方法:<br>
在终端中输入su命令并输入root密码这样我在终端中就有了root的操权限接下来我们使用gdit命令对其进行修改<br>
gdit /etc/pam.d/gdm<br>
在这段&quot;auth required pam<em>succeed</em>if.so user != root quiet&quot;加上#号注释掉就可以了  </p>

<p>同样的gdit /etc/pam.d/gdm-password<br>
也是在auth required pam<em>succeed</em>if.so user != root quiet前面加上#号注释<br>
保存之后我们重启或者注销一次计算机就能以root进行登录系统了  </p>

<!--more-->

<p><img src="/media/pictures/test.png" alt="image"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何启用 root 用户登录 Fedora ？]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/04/29/login-fedora-with-root/"/>
    <updated>2015-04-29T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/04/29/login-fedora-with-root</id>
    <content type="html"><![CDATA[<p>以前的 Fedora 发行版默认无法 root 登录系统，需要在普通账户下修改配置文件。</p>

<p>在终端输入：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[test@fedora ~]$ su  
Password:   
[root@fedora test]# vim /etc/pam.d/gdm-password  
</code></pre></div>
<p>注释掉这段及前面加上#号，如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#auth        required      pam_succeed_if.so user != root quiet  
</code></pre></div>
<p>保存之后注销再用 root 和密码登陆就好了。</p>

<p>修改目录 /etc/pam.d/gdm 与 /etc/pam.d/gdm-password 两个文件  </p>

<p>一般修改方法:  </p>

<p>在终端中输入su 命令并输入root密码这样我在终端中就有了root的操权限接下来我们使用gdit命令对其进行修改</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">vim /etc/pam.d/gdm  
</code></pre></div>
<p>在这段 &ldquo;auth required pam<em>succeed</em>if.so user != root quiet&rdquo; 加上 # 号注释掉就可以了  </p>

<p>同样的 vim /etc/pam.d/gdm-password<br>
也是在 auth required pam<em>succeed</em>if.so user != root quiet 前面加上 # 号注释</p>

<p>保存之后我们重启或者注销一次计算机就能以 root 进行登录系统了  </p>

<!--more-->

<p>从博主目前的使用来看，Fedora 20 和 Fedora 21 都去除了这种权限设置，允许 root 登录系统。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十个基础算法及其讲解]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/03/11/ten-basic-algorithms-for-programmers/"/>
    <updated>2015-03-11T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/03/11/ten-basic-algorithms-for-programmers</id>
    <content type="html"><![CDATA[<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/suanfa.jpg" alt="Algorithms"></p>

<h2>算法一：快速排序算法</h2>

<p><strong>快速排序</strong>是由东尼·霍尔所发展的一种排序算法。<br>
在平均状况下，排序 n 个项目要 <strong>Ο(nlogn)</strong> 次比较。在最坏状况下则需要 Ο(n^2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>

<p>快速排序使用<strong>分治法</strong>（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>

<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/quicksort.gif" alt="QuickSort"></p>

<h3>算法步骤</h3>

<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot）。</li>
<li>重新排序数列，所有元素比<strong>基准值</strong>小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>

<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的<strong>迭代</strong>（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>

<!--more-->

<p>没仔细研究 <strong><a href="http://dx.doi.org/10.1145%2F366622.366644" title="Hoare, C. A. R. (1961). &quot;Algorithm 64: Quicksort&quot;. Comm. ACM 4 (7): 321">QuickSort</a></strong> 前，一直以为 <code>Partition</code> 的实现大约存在两个版本：一个是 <strong>CLRS</strong> （<a href="http://mitpress.mit.edu/books/introduction-algorithms">算法导论</a>）的实现（单方向一趟遍历，数据交换频繁），另一个是严蔚敏数据结构的实现（双方向进行，变换方向和数据）。<br>
后来，看了不少资料（与后文所述的 <strong>BFPRT</strong> 相关）后，才知道原来严蔚敏书中所讲的 <code>Partition</code> 的实现来自 <strong>QuickSort</strong> 原作者，即 <strong><a href="http://dx.doi.org/10.1145%2F366622.366642" title="Hoare, C. A. R. (1961). &quot;Algorithm 63: Partition&quot;. Comm. ACM 4 (7): 321">HOARE-PARTITION</a></strong>。<br>
经过简单的测试发现，两种方法存在一倍的时间差距，也即<strong>双方向对数据序列遍历更高效</strong>。</p>

<h3>示例代码</h3>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// 严蔚敏版数据结构实现方法，类似 C. A. R. Hoare 的实现</span>
<span class="kt">int</span> <span class="nf">partition</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">pivotkey</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivotkey</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">high</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">array</span><span class="p">[</span><span class="n">low</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivotkey</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">low</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">array</span><span class="p">[</span><span class="n">high</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">array</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotkey</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">low</span><span class="p">;</span>  <span class="c1">// 返回基准元素的下标</span>
<span class="p">}</span>

<span class="c1">// CLRS 上面划分方法的实现</span>
<span class="kt">int</span> <span class="nf">partition2</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">pivotkey</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>         <span class="c1">// 选取最后一个元素作为基准</span>
    <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">low</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(;</span> <span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">;</span> <span class="n">low</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">array</span><span class="p">[</span><span class="n">high</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">p</span><span class="o">++</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="n">low</span><span class="p">)</span> <span class="p">{</span>             <span class="c1">// 在p前面的都是大于pivotkey的元素</span>
                <span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">low</span><span class="p">);</span>    <span class="c1">// 在p位置和其后的都是小于等于pivotkey的元素</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 快速排序的递归实现</span>
<span class="kt">void</span> <span class="nf">quicksort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">high</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 快速排序使用栈的非递归实现</span>
<span class="kt">void</span> <span class="nf">quicksort_nr</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="o">*</span><span class="n">stack</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">((</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">low</span><span class="p">;</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">high</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// 其实就是用栈保存每一个待排序子串的首尾元素下标，</span>
        <span class="c1">// 下一次while循环时取出这个范围，对这段子序列进行partition操作</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">--</span><span class="n">p</span><span class="p">];</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">--</span><span class="n">p</span><span class="p">];</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">low</span><span class="p">;</span>
                <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">high</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">stack</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">free</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>算法二：堆排序算法</h2>

<p><strong>堆排序</strong>(Heap sort)，是指利用堆这种数据结构所设计的一种排序算法。<br>
堆积是一个<strong>近似完全二叉树</strong>的结构（二叉堆），并同时满足堆积的性质：即子结点的键值或索引总是小于(或者大于)它的父节点。</p>

<p>堆排序的平均<strong>时间复杂度为 Ο(NlogN)</strong>。</p>

<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/heapsort.gif" alt="HeapSort"></p>

<h3>基本思想</h3>

<ol>
<li>先将初始文件 R[1..n] 建成一个大顶堆，此堆为初始的无序区</li>
<li>再将关键字最大的记录 R[1]（即堆顶）和无序区的最后一个记录 R[n] 交换，由此得到新的无序区 R[1..n-1] 和有序区 R[n]，且满足 <strong>R[1..n-1].keys≤R[n].key</strong></li>
<li>由于交换后新的根 R[1] 可能违反堆性质，故应将当前无序区 R[1..n-1] 调整为堆。然后再次将 R[1..n-1] 中关键字最大的记录 R[1] 和该区间的最后一个记录 R[n-1] 交换，由此得到新的无序区 R[1..n-2] 和有序区 R[n-1..n]，且仍满足关系 <strong>R[1..n-2].keys≤R[n-1..n].keys</strong>，同样要将 R[1..n-2] 调整为堆。</li>
</ol>

<h3>算法步骤</h3>

<ol>
<li>构建一个堆 H[0..n-1]。<strong>建堆是不断调整堆的过程</strong>，从 len/2 处（<strong>最后一个非叶节点</strong>）开始调整，一直到第一个节点，此处 len 是堆中元素的个数。建堆的过程是线性的过程，从 len/2 到 0 处一直调用调整堆的过程，相当于 o(h1)+o(h2)…+o(hlen/2) 其中 h 表示节点的深度，len/2 表示节点的个数，这是一个求和的过程，结果是<strong>线性的 O(N)</strong>。</li>
<li>把堆首(最大值)和堆尾互换。</li>
<li>把堆的尺寸缩小 1，调整堆，把新的数组顶端数据调整到相应位置。其思想是比较节点 i 和它的孩子节点 left(i)、right(i)，选出三者最大(或者最小)值，如果最大（小）值不是节点 i 而是它的一个孩子节点，那边交互节点 i 和该节点，然后再调用调整堆过程，这是一个递归的过程。调整堆的过程时间复杂度与堆的深度有关系，是 logN 的操作，因为是沿着深度方向进行调整的。</li>
<li>重复步骤 2，直到<strong>堆的尺寸为 1</strong>。</li>
</ol>

<h3>示例代码</h3>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">array</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">array</span><span class="p">[</span><span class="n">b</span><span class="p">];</span>
        <span class="n">array</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">array</span><span class="p">[</span><span class="n">b</span><span class="p">];</span>
        <span class="n">array</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">^</span> <span class="n">array</span><span class="p">[</span><span class="n">b</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 自顶向下建立大顶堆</span>
<span class="kt">void</span> <span class="nf">buildheap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">parent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">child</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">key_value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">child</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="n">key_value</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(;</span> <span class="p">(</span><span class="n">parent</span> <span class="o">=</span> <span class="p">((</span><span class="n">child</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">child</span> <span class="o">=</span> <span class="n">parent</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">key_value</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="n">parent</span><span class="p">])</span> <span class="p">{</span>
                <span class="c1">//swap(data, child, parent);</span>
                <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">parent</span><span class="p">];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="p">]</span> <span class="o">=</span> <span class="n">key_value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 调整堆</span>
<span class="kt">void</span> <span class="nf">heapadjust</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">child</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">key_value</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">parent</span><span class="p">];</span>

    <span class="k">for</span> <span class="p">(;</span> <span class="p">(</span><span class="n">child</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">parent</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">child</span><span class="p">)</span> <span class="p">{</span>
       <span class="c1">//child = 2 * parent + 1;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">child</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">child</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">key_value</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="p">])</span> <span class="p">{</span>
            <span class="c1">//swap(data, parent, child);</span>
            <span class="n">data</span><span class="p">[</span><span class="n">parent</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">child</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">data</span><span class="p">[</span><span class="n">parent</span><span class="p">]</span> <span class="o">=</span> <span class="n">key_value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">heapsort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">heapadjust</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>  <span class="c1">// 自底向上建立大顶堆</span>
    <span class="p">}</span>
    <span class="c1">//buildheap(data, len);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">swap</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">heapadjust</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>算法三：归并排序</h2>

<p><strong>归并排序</strong>(Merge sort)，是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>

<p>归并过程为：</p>

<p>比较 a[i] 和 a[j] 的大小，若 a[i]≤a[j]，则将第一个有序表中的元素 a[i] 复制到 r[k] 中，并令 i 和 k 分别加上 1；<br>
否则将第二个有序表中的元素 a[j] 复制到 r[k] 中，并令 j 和 k 分别加上 1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到 r 中从下标 k 到下标 t 的单元。<br>
归并排序的算法我们通常用递归实现，先把待排序区间 [s,t] 以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间 [s,t]。</p>

<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/mergesort.gif" alt="MergeSort"></p>

<h3>算法步骤</h3>

<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤 3 直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>

<h3>性能分析</h3>

<ol>
<li>归并排序，速度仅次于快速排序，是<strong>稳定的排序算法</strong>（相等元素的相对位置前后不会改变），适用于总体无序，但是各<strong>子项相对有序</strong>的数列。<br></li>
<li>时间复杂度，比较次数最好、最坏、平均时间都是 O(NlogN)，与堆排序一样，而空间复杂度是 O(N)，比较占用内存。<br></li>
<li>另一种用法，用来<strong>求逆序对数</strong>，在归并的过程中计算每个小区间的逆序对数，进而计算出大区间的逆序对数（也可以用树状数组来求解）。<br>
（对于一个包含 N 个非负整数的数组 A[1&hellip;n]，如果有 i &lt; j，且 A[i] &gt; A[j]，则称 (A[i] ,A[j]) 为数组 A 中的一个逆序对。）</li>
</ol>

<h3>示例代码 (Java 实现便于书写)</h3>

<h4>A. 2-路归并 Merge 算法（优化）</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * @param source</span>
<span class="cm"> *            the array to be sorted</span>
<span class="cm"> * @param buffer</span>
<span class="cm"> *            the temporary space for sorted data</span>
<span class="cm"> * @param start</span>
<span class="cm"> *            the 1st partition&#39;s start position for source array</span>
<span class="cm"> * @param mid</span>
<span class="cm"> *            the 1st partition&#39;s end position for source array</span>
<span class="cm"> * @param end</span>
<span class="cm"> *            the 2nd partition&#39;s end position for source array</span>
<span class="cm"> */</span>

<span class="kd">private</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">buffer</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">source</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">buffer</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">source</span><span class="o">[</span><span class="n">j</span><span class="o">++];</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">buffer</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">source</span><span class="o">[</span><span class="n">i</span><span class="o">++];</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// If the 1st partition doesn&#39;t go to the end, which means the 2nd partition has been merged to the buffer, </span>
    <span class="c1">// then just need move the left data of the 1st partition to the right position, and no need copy to and </span>
    <span class="c1">// then copy back again; but must consider the data overlapping.</span>
    <span class="c1">// Otherwise, the 2nd partition&#39;s data is left and there is no sense to move or copy them.</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// System.arraycopy(source, i, source, i + (end - mid), mid + 1 - i);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">),</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">source</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

    <span class="c1">// if (i != mid + 1) {</span>
    <span class="c1">// while (i &lt;= mid) {</span>
    <span class="c1">// buffer[k++] = source[i++];</span>
    <span class="c1">// }</span>
    <span class="c1">// }</span>
    <span class="c1">// System.arraycopy(buffer, start, source, start, i - start + j - mid - 1);</span>

    <span class="c1">// if (i != mid + 1) {</span>
    <span class="c1">// while (i &lt;= mid) {</span>
    <span class="c1">// buffer[k++] = source[i++];</span>
    <span class="c1">// }</span>
    <span class="c1">// }</span>
    <span class="c1">// if (j != end + 1) {</span>
    <span class="c1">// while (j &lt;= end) {</span>
    <span class="c1">// buffer[k++] = source[j++];</span>
    <span class="c1">// }</span>
    <span class="c1">// }</span>
    <span class="c1">// System.arraycopy(buffer, start, source, start, end - start + 1);</span>

    <span class="c1">// while (start &lt;= end) {</span>
    <span class="c1">// source[start] = buffer[start];</span>
    <span class="c1">// start++;</span>
    <span class="c1">// }</span>
<span class="o">}</span>
</code></pre></div>
<h4>B. 递归归并算法（分治法：自顶向下）</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * @param array</span>
<span class="cm"> *            the source array</span>
<span class="cm"> * @param temp</span>
<span class="cm"> *            the buffer array to store sorted data</span>
<span class="cm"> * @param start</span>
<span class="cm"> *            the start position of target array</span>
<span class="cm"> * @param end</span>
<span class="cm"> *            the end position of target array</span>
<span class="cm"> */</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">mergeSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">midIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="n">mergeSort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">midIndex</span><span class="o">);</span>
        <span class="n">mergeSort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">midIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
        <span class="n">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">midIndex</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<h4>C. 归并算法（自底向上）</h4>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * 若子文件个数为奇数，则最后一个子文件无须和其它子文件归并(即本趟轮空)</span>
<span class="cm"> * </span>
<span class="cm"> * 若子文件个数为偶数，则要注意最后一对子文件中后一子文件的区间上界是 n</span>
<span class="cm"> */</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">mergeSort2</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="c1">// 待排序的文件 R[1..n] 看作是 n 个长度为 1 的有序子文件</span>
    <span class="c1">// 各子文件长度为 length (最后一个子文件的长度可能小于 length)</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">length</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">length</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// i+2*len-1&lt;=n-1</span>
            <span class="k">this</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// i+len-1&lt;n-1</span>
            <span class="k">this</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="c1">// 尚有两个子文件，其中后一个长度小于length,归并最后两个子文件</span>
            <span class="c1">// 注意：若i≤n-1且i+length-1≥n-1时，则剩余一个子文件轮空，无须归并</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<h4>D. 非递归归并算法（堆栈）</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno"> 1</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">mergeSortNoRecur</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 2</span>     <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3</span>     <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span>     <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6</span>         <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno"> 7</span>         <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">indexStack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="lineno"> 8</span>         <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">end</span><span class="o">);</span>
<span class="lineno"> 9</span>         <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
<span class="lineno">10</span> 
<span class="lineno">11</span>         <span class="k">while</span> <span class="o">(!</span><span class="n">indexStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
<span class="lineno">12</span>             <span class="n">mid</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
<span class="lineno">13</span>             <span class="n">start</span> <span class="o">=</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
<span class="lineno">14</span>             <span class="k">if</span> <span class="o">(</span><span class="n">mid</span> <span class="o">==</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">15</span>                 <span class="n">end</span> <span class="o">=</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
<span class="lineno">16</span>                 <span class="k">this</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
<span class="lineno">17</span> 
<span class="lineno">18</span>                 <span class="c1">// Maybe the last two partition has been merged, so that </span>
<span class="lineno">19</span>                 <span class="c1">// the stack should be empty and certainly the sort work is finished.</span>
<span class="lineno">20</span>                 <span class="k">if</span> <span class="o">(</span><span class="n">indexStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
<span class="lineno">21</span>                     <span class="k">break</span><span class="o">;</span>
<span class="lineno">22</span>                 <span class="o">}</span>
<span class="lineno">23</span> 
<span class="lineno">24</span>                 <span class="n">mid</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
<span class="lineno">25</span> 
<span class="lineno">26</span>                 <span class="c1">// Judge if need to traverse and divide the right child</span>
<span class="lineno">27</span>                 <span class="n">start</span> <span class="o">=</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
<span class="lineno">28</span>                 <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">==</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">29</span>                     <span class="n">end</span> <span class="o">=</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
<span class="lineno">30</span>                     <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
<span class="lineno">31</span>                     <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">32</span>                     <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">33</span>                         <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">end</span><span class="o">);</span>
<span class="lineno">34</span>                         <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="lineno">35</span>                     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">36</span>                         <span class="c1">// If can&#39;t divide on the left side, then turn to the right side</span>
<span class="lineno">37</span>                         <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">38</span>                     <span class="o">}</span>
<span class="lineno">39</span>                 <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">40</span>                     <span class="c1">// Restore the previous value if don&#39;t divide the right child,</span>
<span class="lineno">41</span>                     <span class="c1">// which means should merge the last merge with another merge partition again</span>
<span class="lineno">42</span>                     <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
<span class="lineno">43</span>                     <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
<span class="lineno">44</span>                 <span class="o">}</span>
<span class="lineno">45</span>             <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">46</span>                 <span class="c1">// Start to divide the left child</span>
<span class="lineno">47</span>                 <span class="n">end</span> <span class="o">=</span> <span class="n">indexStack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>
<span class="lineno">48</span>                 <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
<span class="lineno">49</span>                 <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">50</span>                 <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">51</span>                     <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">mid</span><span class="o">);</span>
<span class="lineno">52</span>                     <span class="n">indexStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
<span class="lineno">53</span>                 <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">54</span>                     <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">55</span>                 <span class="o">}</span>
<span class="lineno">56</span>             <span class="o">}</span>
<span class="lineno">57</span>         <span class="o">}</span>
<span class="lineno">58</span>     <span class="o">}</span>
<span class="lineno">59</span> <span class="o">}</span></code></pre></div>

<h4>E. 另一非递归归并算法（堆栈）</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="lineno"> 1</span> <span class="c1">// 非递归实现(感觉跟二叉树后序遍历的非递归实现很像)</span>
<span class="lineno"> 2</span> <span class="kt">void</span> <span class="nf">NonRecursiveMergeSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3</span>     <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Region</span><span class="o">&gt;</span> <span class="n">region_stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Region</span><span class="o">&gt;();</span>
<span class="lineno"> 4</span>     <span class="n">Region</span> <span class="n">beginRegion</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Region</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">Type</span><span class="o">.</span><span class="na">PARTITION</span><span class="o">);</span>
<span class="lineno"> 5</span>     <span class="n">region_stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">beginRegion</span><span class="o">);</span>
<span class="lineno"> 6</span>     <span class="k">while</span> <span class="o">(!</span><span class="n">region_stack</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
<span class="lineno"> 7</span>         <span class="n">Region</span> <span class="n">region</span> <span class="o">=</span> <span class="n">region_stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span> <span class="c1">// 从栈中删除</span>
<span class="lineno"> 8</span>         <span class="k">if</span> <span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">MERGE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">getFlag</span><span class="o">()))</span> <span class="o">{</span><span class="c1">// 应该归并</span>
<span class="lineno"> 9</span>             <span class="k">this</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(),</span>
<span class="lineno">10</span>                     <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()</span> <span class="o">+</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">());</span><span class="c1">// 归并之</span>
<span class="lineno">11</span>         <span class="o">}</span> <span class="k">else</span> <span class="o">{</span><span class="c1">// 应该划分</span>
<span class="lineno">12</span>             <span class="k">if</span> <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">())</span> <span class="o">{</span><span class="c1">// 如果区域是两个相邻的数</span>
<span class="lineno">13</span>                 <span class="k">this</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">temp</span><span class="o">,</span> <span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(),</span>
<span class="lineno">14</span>                         <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()</span> <span class="o">+</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">());</span><span class="c1">// 直接合并之</span>
<span class="lineno">15</span>             <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// 否则应该划分</span>
<span class="lineno">16</span>                 <span class="n">region</span><span class="o">.</span><span class="na">setFlag</span><span class="o">(</span><span class="n">Type</span><span class="o">.</span><span class="na">MERGE</span><span class="o">);</span> <span class="c1">// 下次应该归并</span>
<span class="lineno">17</span>                 <span class="n">region_stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">region</span><span class="o">);</span>
<span class="lineno">18</span>                 <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()</span> <span class="o">+</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">19</span> 
<span class="lineno">20</span>                 <span class="n">Region</span> <span class="n">region_low</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Region</span><span class="o">(</span><span class="n">region</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(),</span> <span class="n">mid</span><span class="o">,</span>
<span class="lineno">21</span>                         <span class="n">Type</span><span class="o">.</span><span class="na">PARTITION</span><span class="o">);</span>
<span class="lineno">22</span>                 <span class="n">region_stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">region_low</span><span class="o">);</span>
<span class="lineno">23</span> 
<span class="lineno">24</span>                 <span class="n">Region</span> <span class="n">region_high</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Region</span><span class="o">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">region</span><span class="o">.</span><span class="na">getEnd</span><span class="o">(),</span>
<span class="lineno">25</span>                         <span class="n">Type</span><span class="o">.</span><span class="na">PARTITION</span><span class="o">);</span>
<span class="lineno">26</span>                 <span class="n">region_stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">region_high</span><span class="o">);</span>
<span class="lineno">27</span>             <span class="o">}</span>
<span class="lineno">28</span>         <span class="o">}</span>
<span class="lineno">29</span>     <span class="o">}</span>
<span class="lineno">30</span> <span class="o">}</span>
<span class="lineno">31</span> 
<span class="lineno">32</span> <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Type</span> <span class="o">{</span>
<span class="lineno">33</span>     <span class="n">MERGE</span><span class="o">,</span> <span class="c1">// Need to merge</span>
<span class="lineno">34</span>     <span class="n">PARTITION</span> <span class="c1">// Need to divide</span>
<span class="lineno">35</span> <span class="o">}</span>
<span class="lineno">36</span> 
<span class="lineno">37</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Region</span> <span class="o">{</span>
<span class="lineno">38</span>     <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">first</span><span class="o">;</span> <span class="c1">// 起始位置</span>
<span class="lineno">39</span>     <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">end</span><span class="o">;</span> <span class="c1">// 结束位置</span>
<span class="lineno">40</span>     <span class="kd">private</span> <span class="n">Type</span> <span class="n">flag</span><span class="o">;</span> <span class="c1">// 标记该区域是应该划分还是应该归并</span>
<span class="lineno">41</span> 
<span class="lineno">42</span>     <span class="kd">private</span> <span class="nf">Region</span><span class="o">(</span><span class="kt">int</span> <span class="n">first</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="n">Type</span> <span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">43</span>         <span class="kd">super</span><span class="o">();</span>
<span class="lineno">44</span>         <span class="k">this</span><span class="o">.</span><span class="na">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
<span class="lineno">45</span>         <span class="k">this</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>
<span class="lineno">46</span>         <span class="k">this</span><span class="o">.</span><span class="na">flag</span> <span class="o">=</span> <span class="n">flag</span><span class="o">;</span>
<span class="lineno">47</span>     <span class="o">}</span>
<span class="lineno">48</span> 
<span class="lineno">49</span>     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">50</span>         <span class="k">return</span> <span class="n">first</span><span class="o">;</span>
<span class="lineno">51</span>     <span class="o">}</span>
<span class="lineno">52</span>     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getEnd</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">53</span>         <span class="k">return</span> <span class="n">end</span><span class="o">;</span>
<span class="lineno">54</span>     <span class="o">}</span>
<span class="lineno">55</span>     <span class="kd">public</span> <span class="n">Type</span> <span class="nf">getFlag</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">56</span>         <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
<span class="lineno">57</span>     <span class="o">}</span>
<span class="lineno">58</span>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFlag</span><span class="o">(</span><span class="n">Type</span> <span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">59</span>         <span class="k">this</span><span class="o">.</span><span class="na">flag</span> <span class="o">=</span> <span class="n">flag</span><span class="o">;</span>
<span class="lineno">60</span>     <span class="o">}</span>
<span class="lineno">61</span> <span class="o">}</span></code></pre></div>

<h2>算法四：二分查找算法</h2>

<p><strong>二分查找</strong>算法是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束;如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为 <strong>Ο(logN)</strong>。</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">binary_search</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
        <span class="cm">/*if (key == array[low]) {</span>
<span class="cm">            return low;</span>
<span class="cm">        }</span>
<span class="cm">        if (key == array[high]) {</span>
<span class="cm">            return high;</span>
<span class="cm">        }*/</span>

        <span class="cm">/*使用(low+high)/2会有整数溢出的问题</span>
<span class="cm">        问题会出现在当low+high的结果大于表达式结果类型所能表示的最大值时，</span>
<span class="cm">        这样，产生溢出后再/2是不会产生正确结果的，而low+((high-low)/2)不存在这个问题*/</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">array</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">array</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>算法五：BFPRT(线性查找算法)</h2>

<p><strong>BFPRT 算法</strong>解决的问题十分经典，即从某n个元素的序列中选出第 k 小（第 k 大）的元素，通过巧妙的分析，<strong>BFPRT</strong> 可以保证在最坏情况下仍为线性时间复杂度。该算法的思想与快速排序思想相似，当然为使得算法在最坏情况下，依然能达到 <strong>O(n)</strong> 的时间复杂度，五位算法作者（Blum、Floyd、Pratt、Rivest、Tarjan）做了精妙的处理，该算法的简单和巧妙颇有我们需要借鉴学习之处。<br>
算法刊登在<a href="http://people.csail.mit.edu/rivest/pubs/BFPRT73.pdf">Blum et al. (Tarjan)</a>，以论文作者名字首字母组合来命名。</p>

<p><a href="http://en.wikipedia.org/wiki/Median_of_medians">http://en.wikipedia.org/wiki/Median_of_medians</a></p>

<h3>算法步骤</h3>

<ol>
<li>将 n 个元素每 5 个一组，分成 n/5 (上界)组。</li>
<li>取出每一组的中位数，任意排序方法，比如插入排序。</li>
<li>递归的调用 select 算法查找上一步中所有中位数的中位数，设为 x，偶数个中位数的情况下设定为选取中间小的一个。</li>
<li>用 x 来分割数组，设小于等于 x 的个数为 m ，大于 x 的个数即为 n-m。</li>
<li>若 k==m，返回 x；若 k<m ，在小于 x 的元素中递归查找第 k 小的元素；若 k>m，在大于 x 的元素中递归查找第 k-m 小的元素。</li>
</ol>

<p>终止条件：n=1 时，返回的即是 k 小元素。</p>

<h3>个人的一点思考</h3>

<p>递归调用单独寻找中位数的算法，得到的并不是中位数的中位数。<br>
阅读这篇文章：<a href="http://www.johndcook.com/blog/2009/06/23/tukey-median-ninther/">http://www.johndcook.com/blog/2009/06/23/tukey-median-ninther/</a></p>

<p>这个算法看起来简单，似乎可以直接认为是快排改进快速选择。但真正理解这个算法后，才能通晓其高明之处，其思想绝对精华，不愧为<a href="http://www.matrix67.com/blog/archives/3748">“来自圣经的算法”</a>。<br>
然则要理解这个算法，也有一定的难度，其中有几个点要特别注意：</p>

<p>A. 划分方法的基准选取，即算法所讲的中位数的中位数，如何计算它更加高效 ？<br>
B. 递归调用 Select 计算中位数的中位数（看起来复杂，实际可行），并非递归寻找中位数的方法<br>
C. 将第一次找到的中位数集合交换到数组最左边，更方便递归寻找它们的中位数；花费额外空间存储中位数，递归返回是元素值，还需要额外 O(N) 的时间定位其下标；虽然与前者 Swap 的时间相抵消，但是空间的开销需要考虑<br>
D. Select 返回值是元素值，而不是下标索引，Partition 基准参数也是下标；计算中位数的中位数过程，一定会将中位数放置到计算前设定的下标上<br>
E. Partition 要保证一个值从原数据序列中隔离出来，不参与下次划分，这个值就是边界，同时也是第 i 小元素</p>

<hr>

<blockquote>
<p>Like <strong>RANDOMIZED-SELECT</strong>, the algorithm <strong>SELECT</strong> finds the desired element by recursively partitioning the input array. Here, however, we guarantee a good split upon partitioning the array. <strong>SELECT</strong> uses the deterministic partitioning algorithm <strong>PARTITION</strong> from quicksort (see Section 7.1), but modified to take the element to partition around as an input parameter.<br>
The <strong>SELECT</strong> algorithm determines the <strong>i</strong>th smallest of an input array of <strong>n &gt; 1</strong> distinct elements by executing the following steps. (If <strong>n == 1</strong>, then <strong>SELECT</strong> merely returns its only input value as the <strong>i</strong>th smallest.)</p>
</blockquote>

<ol>
<li>Divide the <strong>n</strong> elements of the input array into <strong>&lfloor;n / 5&rfloor;</strong> groups of 5 elements each and at most one group made up of the remaining <strong>n mod 5</strong> elements.</li>
<li>Find the median of each of the <strong>&lceil;n / 5&rceil;</strong> groups by first insertion-sorting the elements of each group (of which there are at most 5) and then picking the median from the sorted list of group elements.</li>
<li>Use <strong>SELECT</strong> recursively to find the median <strong>x</strong> of the <strong>&lceil;n / 5&rceil;</strong> medians found in step 2. (If there are an even number of medians, then by our convention, <strong>x</strong> isthe lower median.)</li>
<li>Partition the input array around the median-of-medians <strong>x</strong> using the modified version of <strong>PARTITION</strong>. Let <strong>k</strong> be one more than the number of elements on the low side of the partition, so that <strong>x</strong> is the kth smallest element and there are <strong>n - k</strong> elements on the high side of the partition.</li>
<li>If <strong>i == k</strong>, then return <strong>x</strong>. Otherwise, use <strong>SELECT</strong> recursively to find the <strong>i</strong>th smallest element on the low side if <strong>i &lt; k</strong>, or the <strong>(i - k)</strong>th smallest element on the high side if <strong>i &gt; k</strong>.</li>
</ol>

<h3>性能分析</h3>

<p>BFPRT 算法最出色的地方在于，精心设计的 pivot 选取方法，使得最坏情形理论上达到了线性时间复杂度。
这样找到的 pivot 能保证在这个 pivot 之前一定有至少 0.3N 的数，在这个 pivot 之后的也至少有 0.3N 的数，从而，每次 partition 不会出现数据倾斜(基本上整个数组都在 pivot 之后或者之前)，由此保证了 pivot 的有效性（如下图）。理论分析这个算法的时间复杂度是 O(N) ，具体证明细节请参考算法导论。（由于常数比较大，实际效果并不一定好。）</p>

<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/medians.png" alt="Medians"></p>

<p>然而实际应用中，寻找中位数的中位数的时间开销很大，即便是 O(n) 平均查找时间，相比固定的选取 pivot 的 Quick-Select 算法，效率不但不高，反而很差。<br>
博主亲测，双核 2.27 GHz CPU、x86架构、VS2010，随机产生 256MB 整型数据，选出第 14 小元素，BFPRT 算法花费CPU时间 1293756ms，而固定选择最低位作为 pivot 的 Quick-Select 算法仅需要 2603ms，而以三元素取中值作为 pivot 的 Quick-Select 时间为 12825ms。<br>
由此可见，BFPRT 还不适合应用于实践，一般而言最坏情形发生的可能性还是比较低的，选择高效适宜的算法才是关键。</p>

<p>同样地，我们都知道快排和归并的平均时间复杂度都是 O(nlogn)，但是实际应用中相比归并排序，快排耗费的时间更少；然而，对于链式存储结构的，我们还是倾向选择归并排序，原因就是快排在一趟划分过程中需要花费更多时间去定位元素，而归并排序需要额外的辅存空间，适用于链表结构。那么，对于顺序存储结构，快速排序就是优先选择了。</p>

<p>至于，为何利用 5 个元素作为元组大小，根据计算以 3 个元素分组有更好的数据平衡，有人认为与寄存器的数量和运算有关。</p>

<h3>示例代码</h3>

<p>在研究 BFPRT时， 看过不少人写的代码实现，有的忽略不足5个元素的那组；有的将分组后每组中位数前置，有的另为它们另分配内存；有的求中位数的中位数仅递归了Select方法的一部分，有的Partition写的让人很无语，有的写完了都没有测试过，……等等，千奇百怪，没见几个能完整的实现出来的（伪代码写的大有人在）。<br>
偶尔发现一位对BFPRT分析的很不错，在这里：<a href="http://noalgo.info/466.html">BFPRT算法</a><br>
鉴于代码的鱼龙混杂，没有统一的思路，于是乎博主决定亲自写一个标准的实现。</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="lineno"> 1</span> <span class="kt">void</span> <span class="nf">insertsort</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="kt">array_t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span>
<span class="lineno"> 2</span> <span class="p">{</span>
<span class="lineno"> 3</span>     <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 4</span>         <span class="kt">int</span> <span class="n">inserted_data</span> <span class="o">=</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="lineno"> 5</span>         <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
<span class="lineno"> 6</span>         <span class="k">for</span> <span class="p">(;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">start</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno"> 7</span>             <span class="k">if</span> <span class="p">(</span><span class="n">inserted_data</span> <span class="o">&lt;</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
<span class="lineno"> 8</span>                 <span class="kt">array_t</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="lineno"> 9</span>             <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno">10</span>                 <span class="k">break</span><span class="p">;</span>
<span class="lineno">11</span>             <span class="p">}</span>
<span class="lineno">12</span>         <span class="p">}</span>
<span class="lineno">13</span>         <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">14</span>             <span class="kt">array_t</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">inserted_data</span><span class="p">;</span>
<span class="lineno">15</span>         <span class="p">}</span>
<span class="lineno">16</span>     <span class="p">}</span>
<span class="lineno">17</span> <span class="p">}</span>
<span class="lineno">18</span> 
<span class="lineno">19</span> <span class="kt">int</span> <span class="nf">partition</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="kt">array_t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pivot_index</span><span class="p">)</span>
<span class="lineno">20</span> <span class="p">{</span>
<span class="lineno">21</span>     <span class="kt">int</span> <span class="n">pivot_value</span> <span class="o">=</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">pivot_index</span><span class="p">];</span>
<span class="lineno">22</span>     <span class="n">swap</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">pivot_index</span><span class="p">);</span>
<span class="lineno">23</span> 
<span class="lineno">24</span>     <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">25</span>         <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot_value</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">26</span>             <span class="n">high</span><span class="o">--</span><span class="p">;</span>
<span class="lineno">27</span>         <span class="p">}</span>
<span class="lineno">28</span>         <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">29</span>             <span class="kt">array_t</span><span class="p">[</span><span class="n">low</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
<span class="lineno">30</span>         <span class="p">}</span>
<span class="lineno">31</span> 
<span class="lineno">32</span>         <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot_value</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">33</span>             <span class="n">low</span><span class="o">++</span><span class="p">;</span>
<span class="lineno">34</span>         <span class="p">}</span>
<span class="lineno">35</span>         <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">36</span>             <span class="kt">array_t</span><span class="p">[</span><span class="n">high</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
<span class="lineno">37</span>         <span class="p">}</span>
<span class="lineno">38</span>     <span class="p">}</span>
<span class="lineno">39</span> 
<span class="lineno">40</span>     <span class="kt">array_t</span><span class="p">[</span><span class="n">low</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot_value</span><span class="p">;</span>
<span class="lineno">41</span>     <span class="k">return</span> <span class="n">low</span><span class="p">;</span>
<span class="lineno">42</span> <span class="p">}</span>
<span class="lineno">43</span> 
<span class="lineno">44</span> <span class="c1">// 五划分中项：中位数的中位数（the median of medians algorithm）</span>
<span class="lineno">45</span> <span class="c1">// 严格依照 CLRS 算法描述实现，计算中位数的中位数时，没有忽略不足 5 个元素的那组数据</span>
<span class="lineno">46</span> <span class="c1">// Return the kth value</span>
<span class="lineno">47</span> <span class="kt">int</span> <span class="nf">select</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="kt">array_t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
<span class="lineno">48</span> <span class="p">{</span>
<span class="lineno">49</span>     <span class="k">const</span> <span class="kt">int</span> <span class="n">k_group_size</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="lineno">50</span>     <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="lineno">51</span> 
<span class="lineno">52</span>     <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="n">k_group_size</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">53</span>         <span class="n">insertsort</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
<span class="lineno">54</span>         <span class="k">return</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
<span class="lineno">55</span>     <span class="p">}</span>
<span class="lineno">56</span>     <span class="c1">// (right - left) / 2 + left</span>
<span class="lineno">57</span>     <span class="k">const</span> <span class="kt">int</span> <span class="n">num_group</span> <span class="o">=</span> <span class="p">(</span><span class="n">size</span> <span class="o">%</span> <span class="n">k_group_size</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="p">(</span><span class="n">size</span> <span class="o">/</span> <span class="n">k_group_size</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="p">(</span><span class="n">size</span> <span class="o">/</span> <span class="n">k_group_size</span><span class="p">);</span>
<span class="lineno">58</span>     <span class="c1">//int *medians_arr = new int[num_group];</span>
<span class="lineno">59</span>     <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_group</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">60</span>         <span class="kt">int</span> <span class="n">sub_left</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">k_group_size</span><span class="p">;</span>
<span class="lineno">61</span>         <span class="kt">int</span> <span class="n">sub_right</span> <span class="o">=</span> <span class="n">sub_left</span> <span class="o">+</span> <span class="n">k_group_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="lineno">62</span>         <span class="k">if</span> <span class="p">(</span><span class="n">sub_right</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">63</span>             <span class="n">sub_right</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
<span class="lineno">64</span>         <span class="p">}</span>
<span class="lineno">65</span>         <span class="n">insertsort</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">sub_left</span><span class="p">,</span> <span class="n">sub_right</span><span class="p">);</span>
<span class="lineno">66</span>         <span class="c1">// IMPORTANT !!</span>
<span class="lineno">67</span>         <span class="c1">// Place these median in front of array_t, so as to recurse to find the median of median</span>
<span class="lineno">68</span>         <span class="kt">int</span> <span class="n">median</span> <span class="o">=</span> <span class="n">sub_left</span> <span class="o">+</span> <span class="p">((</span><span class="n">sub_right</span> <span class="o">-</span> <span class="n">sub_left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
<span class="lineno">69</span>         <span class="n">swap</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">median</span><span class="p">);</span>
<span class="lineno">70</span>         <span class="c1">//medians_arr[i] = array_t[sub_left + (sub_right - sub_left) &gt;&gt; 1];</span>
<span class="lineno">71</span>         <span class="c1">// Better not to use new array to store the medians, otherwise have to traverse the array_t to find the pivot index due to select function returning pivot value.</span>
<span class="lineno">72</span>     <span class="p">}</span>
<span class="lineno">73</span>     <span class="c1">// IMPORTANT !!</span>
<span class="lineno">74</span>     <span class="c1">// Get the index of median</span>
<span class="lineno">75</span>     <span class="kt">int</span> <span class="n">pivot_index</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">num_group</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
<span class="lineno">76</span> 
<span class="lineno">77</span>     <span class="c1">//int pivotValue = select(medians_arr, 0, num_group - 1, pivot_index);</span>
<span class="lineno">78</span> 
<span class="lineno">79</span>     <span class="c1">// IMPORTANT !!</span>
<span class="lineno">80</span>     <span class="c1">// Recurse to call and place the median on the pivot_index, without care about the median value</span>
<span class="lineno">81</span>     <span class="c1">// Because the value of pivot_index must be the median after select function recursive call.</span>
<span class="lineno">82</span>     <span class="n">select</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">num_group</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">num_group</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
<span class="lineno">83</span> 
<span class="lineno">84</span>     <span class="kt">int</span> <span class="n">mid_index</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">pivot_index</span><span class="p">);</span>
<span class="lineno">85</span>     <span class="kt">int</span> <span class="n">_ith</span> <span class="o">=</span> <span class="n">mid_index</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="lineno">86</span>     <span class="c1">// _ith_element == array_t[_ith]</span>
<span class="lineno">87</span>     <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">_ith</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">88</span>         <span class="k">return</span> <span class="kt">array_t</span><span class="p">[</span><span class="n">mid_index</span><span class="p">];</span>
<span class="lineno">89</span>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">_ith</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">90</span>         <span class="k">return</span> <span class="n">select</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid_index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
<span class="lineno">91</span>     <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="lineno">92</span>         <span class="k">return</span> <span class="n">select</span><span class="p">(</span><span class="kt">array_t</span><span class="p">,</span> <span class="n">mid_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="n">_ith</span><span class="p">);</span>
<span class="lineno">93</span>     <span class="p">}</span>
<span class="lineno">94</span> <span class="p">}</span></code></pre></div>

<h2>算法六：DFS(深度优先搜索)</h2>

<p><strong>深度优先搜索</strong>算法（Depth-First-Search），是搜索算法的一种。<br>
它沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。DFS属于盲目搜索。</p>

<p>深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。</p>

<p>深度优先遍历图算法步骤：</p>

<ol>
<li>访问顶点v；</li>
<li>依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</li>
<li>若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</li>
</ol>

<p>上述描述可能比较抽象，举个实例：</p>

<p>DFS 在访问图中某一起始顶点 v 后，由 v 出发，访问它的任一邻接顶点 w1；再从 w1 出发，访问与 w1邻 接但还没有访问过的顶点 w2；然后再从 w2 出发，进行类似的访问，… 如此进行下去，直至到达所有的邻接顶点都被访问过的顶点 u 为止。</p>

<p>接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。</p>

<h2>算法七：BFS(广度优先搜索)</h2>

<p><strong>广度优先搜索</strong>算法（Breadth-First-Search），是一种图形搜索算法。<br>
简单的说，BFS是从根节点开始，沿着树(图)的宽度遍历树(图)的节点。如果所有节点均被访问，则算法中止。BFS同样属于盲目搜索。一般用队列数据结构来辅助实现BFS算法。</p>

<p>算法步骤：</p>

<ol>
<li>首先将根节点放入队列中。</li>
<li>从队列中取出第一个节点，并检验它是否为目标。
如果找到目标，则结束搜寻并回传结果；
否则将它所有尚未检验过的直接子节点加入队列中。</li>
<li>若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</li>
<li>重复步骤2。</li>
</ol>

<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/bfs.gif" alt="BFS"></p>

<h3>DFS &amp; BFS 示例代码</h3>

<p>以二叉树为例，分别进行深度优先遍历和广度优先遍历；最后实现一个栈空间 O(1) 的非递归算法 —— Morris 遍历，它的本质就是线索二叉树。</p>

<h4>A. 递归建立、销毁二叉树</h4>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// define tree, stack and queue structure</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tree_node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">tree_node</span> <span class="o">*</span><span class="n">left</span><span class="p">,</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
<span class="p">}</span> <span class="n">tree_node</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">nodestack</span> <span class="p">{</span>
    <span class="n">tree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">nodestack</span> <span class="o">*</span><span class="n">below</span><span class="p">;</span>
<span class="p">}</span> <span class="n">nodestack</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">nodequeue</span> <span class="p">{</span>
    <span class="n">tree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">nodequeue</span> <span class="o">*</span><span class="n">rear</span><span class="p">;</span>
<span class="p">}</span> <span class="n">nodequeue</span><span class="p">;</span>

<span class="c1">// Set up and destroy binary tree</span>
<span class="kt">void</span> <span class="nf">create_binary_tree</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">**</span><span class="n">tree_root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
    <span class="c1">// eg. {1024 37 2 0$ 0$ 936 80 0$ 0$ 768 0$ 0$ 9 131 0$ 0$ 0$}</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%c&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="sc">&#39;$&#39;</span> <span class="o">==</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="o">*</span><span class="n">tree_root</span><span class="p">)</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="p">(</span><span class="o">*</span><span class="n">tree_root</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">tree_node</span><span class="p">));</span>
        <span class="p">(</span><span class="o">*</span><span class="n">tree_root</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
        <span class="n">create_binary_tree</span><span class="p">(</span><span class="o">&amp;</span><span class="p">((</span><span class="o">*</span><span class="n">tree_root</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">));</span>
        <span class="n">create_binary_tree</span><span class="p">(</span><span class="o">&amp;</span><span class="p">((</span><span class="o">*</span><span class="n">tree_root</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">destroy_binary_tree</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="n">tree_root</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">tree_root</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">destroy_binary_tree</span><span class="p">(</span><span class="n">tree_root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
        <span class="n">destroy_binary_tree</span><span class="p">(</span><span class="n">tree_root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
        <span class="n">free</span><span class="p">(</span><span class="n">tree_root</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h4>B. 深度优先遍历（递归、非递归；前序、中序、后序）</h4>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Depth_First Search</span>
<span class="c1">// traverse binary tree recursively</span>
<span class="kt">void</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span> <span class="c1">// preorder_traverse</span>
        <span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
        <span class="c1">// printf  ==&gt; inorder_traverse</span>
        <span class="n">traverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
        <span class="c1">// printf  ==&gt; postorder_traverse</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// traverse non-recursively using stack</span>
<span class="kt">void</span> <span class="nf">traverse_nr</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">nodestack</span> <span class="o">*</span><span class="n">st</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">root</span> <span class="o">||</span> <span class="nb">NULL</span> <span class="o">!=</span> <span class="n">st</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Push into stack</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span> <span class="c1">// preorder_traverse</span>
            <span class="n">nodestack</span> <span class="o">*</span><span class="n">el</span> <span class="o">=</span> <span class="p">(</span><span class="n">nodestack</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">nodestack</span><span class="p">));</span>
            <span class="n">el</span><span class="o">-&gt;</span><span class="n">node</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
            <span class="n">el</span><span class="o">-&gt;</span><span class="n">below</span> <span class="o">=</span> <span class="n">st</span><span class="p">;</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">el</span><span class="p">;</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// Pop from the stack</span>
            <span class="n">nodestack</span> <span class="o">*</span><span class="n">top</span> <span class="o">=</span> <span class="n">st</span><span class="p">;</span>
            <span class="c1">// printf  ==&gt; inorder_traverse</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">top</span><span class="o">-&gt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">st</span><span class="o">-&gt;</span><span class="n">below</span><span class="p">;</span>
            <span class="n">free</span><span class="p">(</span><span class="n">top</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">postorder_traverse_nr</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">nodestack</span> <span class="o">*</span><span class="n">st</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">tree_node</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
    <span class="n">tree_node</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">cur</span> <span class="o">||</span> <span class="nb">NULL</span> <span class="o">!=</span> <span class="n">st</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">cur</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nodestack</span> <span class="o">*</span><span class="n">el</span> <span class="o">=</span> <span class="p">(</span><span class="n">nodestack</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">nodestack</span><span class="p">));</span>
            <span class="n">el</span><span class="o">-&gt;</span><span class="n">node</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
            <span class="n">el</span><span class="o">-&gt;</span><span class="n">below</span> <span class="o">=</span> <span class="n">st</span><span class="p">;</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">el</span><span class="p">;</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">st</span><span class="o">-&gt;</span><span class="n">node</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span>  <span class="n">prev</span> <span class="o">||</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span> <span class="c1">// postorder_traverse</span>
                <span class="n">prev</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="n">nodestack</span> <span class="o">*</span><span class="n">top</span> <span class="o">=</span> <span class="n">st</span><span class="p">;</span>
                <span class="n">st</span> <span class="o">=</span> <span class="n">st</span><span class="o">-&gt;</span><span class="n">below</span><span class="p">;</span>
                <span class="n">free</span><span class="p">(</span><span class="n">top</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h4>C. Morris 遍历算法（中序遍历）</h4>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Morris Algorithms for inorder-traverse</span>
<span class="kt">void</span> <span class="nf">inorder_traverse_mo</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">tree_node</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">root</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">// the 1st visit, change the right pointer to successor</span>
                <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>                    <span class="c1">// the 2nd visit, restore the right pointer to NULL</span>
                <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
                <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h4>D. 广度优先遍历</h4>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Breadth_First Search</span>
<span class="c1">// traverse binary tree by level layer</span>
<span class="kt">void</span> <span class="nf">level_traverse</span><span class="p">(</span><span class="n">tree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">nodequeue</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="n">nodequeue</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">nodequeue</span><span class="p">));</span>
        <span class="n">head</span><span class="o">-&gt;</span><span class="n">node</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
        <span class="n">head</span><span class="o">-&gt;</span><span class="n">rear</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">nodequeue</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="n">nodequeue</span> <span class="o">*</span><span class="n">el</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">el</span> <span class="o">=</span> <span class="p">(</span><span class="n">nodequeue</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">nodequeue</span><span class="p">));</span>
                <span class="n">el</span><span class="o">-&gt;</span><span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
                <span class="n">el</span><span class="o">-&gt;</span><span class="n">rear</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="n">tail</span><span class="o">-&gt;</span><span class="n">rear</span> <span class="o">=</span> <span class="n">el</span><span class="p">;</span>
                <span class="n">tail</span> <span class="o">=</span> <span class="n">el</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">el</span> <span class="o">=</span> <span class="p">(</span><span class="n">nodequeue</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">nodequeue</span><span class="p">));</span>
                <span class="n">el</span><span class="o">-&gt;</span><span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
                <span class="n">el</span><span class="o">-&gt;</span><span class="n">rear</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="n">tail</span><span class="o">-&gt;</span><span class="n">rear</span> <span class="o">=</span> <span class="n">el</span><span class="p">;</span>
                <span class="n">tail</span> <span class="o">=</span> <span class="n">el</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">nodequeue</span> <span class="o">*</span><span class="n">ob_el</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">rear</span><span class="p">;</span>
            <span class="n">free</span><span class="p">(</span><span class="n">ob_el</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>算法八：Dijkstra 算法</h2>

<p><strong>戴克斯特拉算法</strong>（Dijkstra’s algorithm）是由荷兰计算机科学家艾兹赫尔·戴克斯特拉提出。迪科斯彻算法使用了<strong>广度优先搜索</strong>解决非负权有向图的<strong>单源最短路径</strong>问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。</p>

<p>该算法的输入包含了一个有权重的有向图 G，以及G中的一个来源顶点 S。我们以 V 表示 G 中所有顶点的集合。每一个图中的边，都是两个顶点所形成的有序元素对。(u, v) 表示从顶点 u 到 v 有路径相连。我们以 E 表示G中所有边的集合，而边的权重则由<strong>权重函数 w: E → [0, ∞]</strong> 定义。因此，w(u, v) 就是从顶点 u 到顶点 v 的非负权重（weight）。边的权重可以想像成两个顶点之间的距离。任两点间路径的权重，就是该路径上所有边的权重总和。已知有 V 中有顶点 s 及 t，Dijkstra 算法可以找到 s 到 t的最低权重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点 s 到任何其他顶点的最短路径。对于<strong>不含负权的有向图</strong>，Dijkstra 算法是目前已知的最快的单源最短路径算法。</p>

<h3>算法步骤</h3>

<ol>
<li>初始时令 S={V0}，T={其余顶点}，T中顶点对应的距离值
若存在 <V0,Vi>，d(V0,Vi) 为 <V0,Vi> 弧上的权值；
若不存在 <V0,Vi>，d(V0,Vi) 为 ∞</li>
<li>从 T 中选取一个其距离值为最小的顶点 W 且不在 S 中，加入 S</li>
<li>对其余 T 中顶点的距离值进行修改：若加进 W 作中间顶点，从 V0 到 Vi 的距离值缩短，则修改此距离值（<strong>松弛操作</strong>）</li>
</ol>

<p>重复上述步骤 2、3，直到 S 中包含所有顶点，即 W==Vi 为止</p>

<p><img src="/media/pictures/ten-basic-algorithms-for-programmers/dijkstra.gif" alt="Dijkstra"></p>

<h3>示例代码</h3>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#define INFINITE        (~(0x1&lt;&lt;31))    </span><span class="c1">// 最大值(即0X7FFFFFFF)</span>
<span class="cp">#define MAX_VERTEX_NUM  100             </span><span class="c1">// 最大顶点个数</span>

<span class="k">typedef</span> <span class="k">enum</span> <span class="n">BOOLEAN</span> <span class="p">{</span>
    <span class="n">TRUE</span><span class="p">,</span> <span class="n">FALSE</span>
<span class="p">};</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">MGraph</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">vexs</span><span class="p">[</span><span class="n">MAX_VERTEX_NUM</span><span class="p">];</span>                  <span class="c1">// 顶点向量</span>
    <span class="kt">int</span> <span class="n">arcs</span><span class="p">[</span><span class="n">MAX_VERTEX_NUM</span><span class="p">][</span><span class="n">MAX_VERTEX_NUM</span><span class="p">];</span>   <span class="c1">// 邻接矩阵</span>
    <span class="kt">int</span> <span class="n">vexnum</span><span class="p">,</span> <span class="n">arcnum</span><span class="p">;</span>                         <span class="c1">// 顶点数和弧数</span>
<span class="p">}</span> <span class="n">MGraph</span><span class="p">;</span>

<span class="cm">/************************************************************************/</span>
<span class="cm">/* Dijkstra 算法</span>
<span class="cm">* 统计图(G)中&quot;顶点vs&quot;到其它各个顶点的最短路径。</span>
<span class="cm">* </span>
<span class="cm">* Param:</span>
<span class="cm">*      G       -- 图</span>
<span class="cm">*      v0      -- 起点</span>
<span class="cm">*      path    -- 每个终点的前一个顶点</span>
<span class="cm">*      dist    -- 起点到终点的最短路径</span>
<span class="cm">*/</span>
<span class="cm">/************************************************************************/</span>
<span class="kt">void</span> <span class="nf">shortest_path_dij</span><span class="p">(</span><span class="n">MGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">path</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">dist</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">vlen</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">INFINITE</span><span class="p">;</span>
    <span class="c1">// flag[i] = TRUE 表示&quot;顶点v0&quot;到&quot;顶点i&quot;</span>
    <span class="n">BOOLEAN</span> <span class="o">*</span><span class="n">flag</span> <span class="o">=</span> <span class="p">(</span><span class="n">BOOLEAN</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">vlen</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">BOOLEAN</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(;</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="n">vlen</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">flag</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
        <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">v0</span><span class="p">][</span><span class="n">v</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">INFINITE</span> <span class="o">==</span> <span class="n">G</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">v0</span><span class="p">][</span><span class="n">v</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">path</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">path</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">v0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">flag</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
    <span class="n">dist</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vlen</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">min</span> <span class="o">=</span> <span class="n">INFINITE</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="n">vlen</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">FALSE</span> <span class="o">==</span> <span class="n">flag</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">min</span> <span class="o">&gt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">min</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">];</span>
                <span class="n">w</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">INFINITE</span> <span class="o">==</span> <span class="n">min</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">flag</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="n">vlen</span><span class="p">;</span> <span class="o">++</span><span class="n">v</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 防止溢出</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">FALSE</span> <span class="o">==</span> <span class="n">flag</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">INFINITE</span> <span class="o">!=</span> <span class="n">G</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">min</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">v</span><span class="p">];</span>
                <span class="n">path</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">free</span><span class="p">(</span><span class="n">flag</span><span class="p">);</span>

    <span class="c1">// 打印dijkstra最短路径的结果</span>
    <span class="cm">/* printf(&quot;dijkstra(%c): \n&quot;, G.vexs[v0]);</span>
<span class="cm">    for (i = 0; i &lt; G.vexnum; i++) {</span>
<span class="cm">        printf(&quot;  shortest(%c, %c) =&quot;, G.vexs[v0], G.vexs[i]);</span>
<span class="cm">        if (INFINITE == dist[i]) {</span>
<span class="cm">            printf(&quot; ∞&quot;);</span>
<span class="cm">        } else {</span>
<span class="cm">            printf(&quot; %d&quot;, dist[i]);</span>
<span class="cm">        }</span>

<span class="cm">        w = path[i];</span>
<span class="cm">        if (w != -1) {</span>
<span class="cm">            printf(&quot;  \tpath(%c, %c): &quot;, G.vexs[i], G.vexs[v0]);</span>
<span class="cm">            printf(&quot;%c &lt;- &quot;, G.vexs[i]);</span>
<span class="cm">            while (w != -1 &amp;&amp; w != v0) {</span>
<span class="cm">                printf(&quot;%c &lt;- &quot;, G.vexs[w]);</span>
<span class="cm">                w = path[w];</span>
<span class="cm">            }</span>
<span class="cm">            printf(&quot;%c&quot;, G.vexs[v0]);</span>
<span class="cm">        }</span>
<span class="cm">        printf(&quot;\n&quot;);</span>
<span class="cm">    } */</span>
<span class="p">}</span>
</code></pre></div>
<p>备注：<strong>Dijkstra 算法</strong>用于求解单源、无负权图的最短路径，不能用于有负权图；<br>
设想图中存在一个回路（从 v 出发，经过若干个节点后又回到 v）且这个回路中的所有边的权值之和为负；那么这个回路中任意两点的最短路径便可以无穷小下去，如果不处理负权回路的话，程序就会永远执行下去。<br>
另一种算法，<strong>Bellman-Ford 算法</strong>具有识别这种负权回路的能力，可以判断有无负权回路（若有，则不存在最短路径）。它允许图中存在负权边，只要不存在从源点可达的负权回路即可；简单的说，图中可以存在负权边，但此条负权边，构不成负权回路，不影响回路的形成。<br>
此外，<strong>SPFA 算法</strong>（Bellman-Ford 的队列优化）同样可以用于存在负数边权的图。</p>

<h2>算法九：动态规划算法</h2>

<p><strong>动态规划</strong>（Dynamic Programming）是一种在数学、计算机科学和经济学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>

<p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。 通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量： 一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。 这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p>

<p>关于动态规划最经典的问题当属背包问题。</p>

<h3>适用情况</h3>

<p>能采用动态规划求解的问题的一般要具有3个性质：</p>

<ol>
<li><strong>最优子结构</strong>性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</li>
<li><strong>无后效性</strong>。即将各阶段按照一定的次序排列好之后，某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</li>
<li><strong>子问题重叠</strong>性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率。<br>
动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。其中的关键在于解决冗余，这是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其它的算法。</li>
</ol>

<h3>示例问题</h3>

<h4>A. 最大子数组和问题</h4>

<p><strong>题目：</strong><br>
由 N 个整数元素组成的一维数组 (A[0], A[1],&hellip;,A[n-1], A[n])，这个数组有很多连续子数组，那么其中数组之和的最大值是什么呢？<br>
例如，数组 int A[5] = {-1, 2, 3, -4, 2};<br>
符合条件的子数组为 {2, 3}，即答案为 5;</p>

<p>这是一道很简单的题目，但是要想写出时间复杂度为 O(n) 的最优解法还是需要仔细推敲下的。<br>
明确一下题意：</p>

<ol>
<li>子数组必须是连续的。</li>
<li>不需要返回子数组的具体位置。</li>
<li>数组中包含：正整数，零，负整数。</li>
</ol>

<p>例如：<br>
数组：{1, -2, 3, 5, -3, 2}  &nbsp;&nbsp; 返回值为 8<br>
数组：{0, -2, 3, 5, -1, 2}  &nbsp;&nbsp; 返回值为 9<br>
数组：{-9, -2, -3, -5, -6}  &nbsp;&nbsp; 返回值为 -2 &nbsp;&nbsp;
<font color="red">&nbsp;&nbsp;注意子数组不能为空</font>  </p>

<p><strong>分析：</strong><br>
首先，我们看看最直接的穷举法：</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">MaxSubArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="mh">0x1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">);</span>  <span class="c1">//初始值为负无穷大</span>
    <span class="kt">int</span> <span class="n">sum</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">max</span> <span class="o">=</span> <span class="n">sum</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>这种方法最直接，当然也是最耗时的，时间复杂度为 O(n^2);</p>

<p>可以优化吗？答案是肯定的，可以考虑数组的第一个元素 A[0] 和最大的一段子数组 (A[i], &hellip;, A[j]) 的关系，有以下几种情况：</p>

<ol>
<li>当 0 = i = j 时，元素 A[0] 本身构成和最大的子数组;</li>
<li>当 0 = i &lt; j 时，最大子数组以 A[0] 开始;</li>
<li>当 0 &lt; i 时， 元素 A[0] 和最大子数组没有关系。</li>
</ol>

<p>从上面3种情况可以看出：<br>
可以将一个大问题（N个元素数组）转化为一个较小的问题（N-1个元素的数组）。<br>
假设已经知道 (A[1], &hellip;, A[n-1]) 中和最大的一段子数组之和为 MaxArr[1]，并且已经知道 (A[1],&hellip;,A[n-1]) 中包含 A[1] 的和最大的一段数组为 Start[1]。<br>
那么不难看出 (A[0], &hellip;, A[n]) 中问题的解：<strong>MaxArr[0] = max{ A[0], A[0] + Start[1], MaxArr[1] }</strong>。<br>
通过这样的分析，可以看出这个问题可以用动态规划来解决。</p>

<p><strong>解决方案：</strong></p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#define MAX(x, y)  ((x) &gt; (y) ? (x) : (y))</span>

<span class="kt">int</span> <span class="nf">MaxSubArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">max_arr_sum</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>      <span class="c1">// 从后向前遍历，反之亦可</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">start</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="n">max_arr_sum</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">max_arr_sum</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">max_arr_sum</span><span class="p">;</span>                 <span class="c1">// max_arr_sum 中存放结果</span>
<span class="p">}</span>
</code></pre></div>
<p>由此看出，通过动规算法解决该问题，不仅效率很高（时间复杂度为O(n)），而且极其简便。</p>

<h4>B. 0-1 背包问题</h4>

<p><strong>题目：</strong><br>
这题非常有名，只要是计算机专业的应该都有听说过。有 N 件物品和一个容量为 C 的背包；第 i 件物品的体积是 c[i]，价值是 v[i]。求解将哪些物品装入背包可使价值总和最大。</p>

<p>把题目具体下，有 5 个物品，背包的体积为 10，物品的体积分别为 c[5] = { 3, 5, 2, 7, 4 }，价值为 v[5] = { 2, 4, 1, 6, 5 }。</p>

<p><strong>分析：</strong><br>
这是最基础的背包问题，特点是：每种物品仅有一件，可以<strong>选择放或不放</strong>。可以将背包问题的求解看作是进行一系列的决策过程，即决定<strong>哪些物品应该放入背包，哪些不放入背包</strong>。</p>

<p>如果一个问题的最优解包含了物品 n，即 Xn = 1，那么其余 X1, X2, &hellip;.., Xn-1 一定构成子问题 1,2,&hellip;..,n-1 在容量 C - Cn 时的最优解；<br>
如果这个最优解不包含物品 n，即 Xn = 0，那么其余 X1, X2&hellip;.., Xn-1 一定构成了子问题 1,2,&hellip;.,n-1 在容量 C 时的最优解。（请仔细品味这几句话)</p>

<p>根据以上分析最优解的结构，递归定义问题的最优解： <strong>f[i][j] = max{ f[i-1][j], f[i-1][j - c[i]] + v[i] }</strong>，其中 f[i][j] 表示 将 i 个物品放入体积为 j 的背包可获得的最大价值。</p>

<p><strong>解决方案：</strong>  </p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#define N 5</span>
<span class="cp">#define C 10</span>

<span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">v</span><span class="p">[</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">C</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="c1">// f[i][j] = max{ f[i-1][j] , f[i-1][j - c[i]] + v[i]}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">C</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>             <span class="c1">// 如果背包的容量，放不下c[i]，则不选c[i]</span>
                <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAX</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>  <span class="c1">// 转移方程式</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The maximum value: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">C</span><span class="p">]);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><strong>0-1 背包问题</strong>是最基本的动态规划问题，也是最经典，最易懂的，它包含了背包问题中设计状态、方程的最基本思想。</p>

<h2>算法十：朴素贝叶斯分类算法</h2>

<p><strong>朴素贝叶斯分类</strong>算法是一种基于<strong>贝叶斯定理</strong>的简单概率分类算法。贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况下，如何完成推理和决策任务。概率推理是与确定性推理相对应的。而朴素贝叶斯分类器是基于<strong>独立假设</strong>的，即假设<strong>样本每个特征与其他特征都不相关</strong>。</p>

<p>朴素贝叶斯分类器依靠精确的自然概率模型，在<strong>有监督学习</strong>的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用<strong>最大似然估计</strong>方法，换言之朴素贝叶斯模型能工作并没有用到贝叶斯概率或者任何贝叶斯模型。</p>

<p>实际中的表现，<strong>朴素贝叶斯方法</strong>往往并不比<strong>贝叶斯网络</strong>、<strong>决策树</strong>效果差，而且速度还很快。尽管是带着这些朴素思想和过于简单化的假设，但朴素贝叶斯分类器在很多复杂的现实情形中仍能够取得相当好的效果。</p>

<h3>贝叶斯定理</h3>

<p><strong>P(A|B) = P(B|A) P(A) / P(B)</strong> ，是关于随机事件 A 和 B 的条件概率和边缘概率的一则定理。其中：  </p>

<ul>
<li>P(A) &nbsp;&nbsp;&nbsp;：是 A 的<strong>先验概率</strong>或<strong>边缘概率</strong>。之所以称为&quot;先验&quot;是因為它不考虑任何 B 方面的因素。</li>
<li>P(A|B) ：是在 B 发生的情况下 A 发生的可能性。</li>
<li>P(B) &nbsp;&nbsp;&nbsp;：是 B 的先验概率或边缘概率，也作<strong>标准化常量</strong>（normalized constant）。</li>
</ul>

<p>定理可表述为：<strong>后验概率 = (相似度*先验概率) / 标准化常量</strong>，也就是說，后验概率与先验概率和相似度的乘积成正比。另外，<strong>P(B|A) / P(B)</strong> 也有时被称作<strong>标准相似度</strong>（standardised likelihood），Bayes 定理可表述为：<strong>后验概率 = 标准相似度 * 先验概率</strong>。</p>

<h3>朴素贝叶斯分类器的公式</h3>

<p>贝叶斯分类器的基本方法：<br>
<font color="red">在统计资料的基础上，依据某些特征，计算各个类别的概率，从而实现分类。</font></p>

<p>假设某个体有 n 项特征（Feature），分别为 F1、F2、&hellip;、Fn。现有 m 个类别（Category），分别为 C1、C2、&hellip;、Cm。贝叶斯分类器就是计算出概率最大的那个分类，也就是求下面这个算式的最大值：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># P(F1,F2,...,Fn) 对于不同的类别都是相同的，作为常数忽略处理
# 再根据联合概率展开公式

P(C|F1,F2,...,Fn) = P(C) * P(F1,F2,...,Fn|C)
                  = P(C) * P(F1|C) * P(F2|F1,C) * ... * P(Fn|Fn-1,...,F1,C)
</code></pre></div>
<p>假设<strong>所有特征都彼此独立</strong>，公式简化为：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">P(C|F1,F2,...,Fn) = P(C) * P(F1|C) * P(F2|C) * ... * P（Fn|C)
</code></pre></div>
<p>上式等号右边的每一项，都可以从<strong>统计资料</strong>中得到，由此就可以计算出每个类别对应的概率，从而找出最大概率的那个类。</p>

<h3>分类器工作流程</h3>

<p>整个朴素贝叶斯分类分为三个阶段，分类的流程可以由下图表示（暂时不考虑验证）：<br>
<img src="/media/pictures/ten-basic-algorithms-for-programmers/naive-bayesian-classifier.png" alt="Naive Bayesian Classifier" title="naive Bayes classifiers"></p>

<ul>
<li>第一阶段——准备工作阶段<br>
这个阶段的任务是为朴素贝叶斯分类做必要的准备，主要工作是根据具体情况确定特征属性 (F1,F2,&hellip;,Fn)，并对每个特征属性进行适当划分，然后由人工对一部分待分类项进行分类 (C1,C2,&hellip;,Cm)，形成训练样本集合。这一阶段的输入是所有待分类数据，输出是特征属性和训练样本。这一阶段是整个朴素贝叶斯分类中唯一需要人工完成的阶段，其质量对整个过程将有重要影响，分类器的质量很大程度上由特征属性、特征属性划分及训练样本质量决定。</li>
<li>第二阶段——分类器训练阶段<br>
这个阶段的任务就是生成分类器，主要工作是计算每个类别在训练样本中的出现频率 P(Cj) 及每个特征属性划分对每个类别的条件概率估计 P(Fi|Cj)，并将结果记录。其输入是特征属性和训练样本，输出是分类器。这一阶段是机械性阶段，根据前面讨论的公式可以由程序自动计算完成。</li>
<li>第三阶段——应用阶段<br>
这个阶段的任务是使用分类器对待分类项进行分类，其输入是分类器和待分类项，输出是待分类项与类别的映射关系。这一阶段也是机械性阶段，由程序完成。</li>
</ul>

<h3>贝叶斯分类器特点</h3>

<p>朴素贝叶斯分类器的一个优势在于只需要根据<strong>少量的训练数据</strong>估计出必要的参数（变量的均值和方差）。由于变量独立假设，只需要估计各个变量的方法，而不需要确定整个协方差矩阵。</p>

<ol>
<li>需要知道先验概率<br>
先验概率是计算后验概率的基础。在传统的概率理论中，先验概率可以由大量的重复实验所获得的各类样本出现的频率来近似获得，其基础是“大数定律”，这一思想称为“频率主义”。而在称为“贝叶斯主义”的数理统计学派中，他们认为时间是单向的，许多事件的发生不具有可重复性，因此先验概率只能根据对置信度的主观判定来给出，也可以说由“信仰”来确定。</li>
<li>按照获得的信息对先验概率进行修正<br>
在没有获得任何信息的时候，如果要进行分类判别，只能依据各类存在的先验概率，将样本划分到先验概率大的一类中。而在获得了更多关于样本特征的信息后，可以依照贝叶斯公式<strong>对先验概率进行修正</strong>，得到后验概率，提高分类决策的准确性和置信度。</li>
<li>分类决策存在错误率<br>
由于贝叶斯分类是在样本取得某特征值时对它属于各类的概率进行推测，并无法获得样本真实的类别归属情况，所以<strong>分类决策一定存在错误率</strong>，即使错误率很低，分类错误的情况也可能发生。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash 快捷键]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/03/08/bash-special-key/"/>
    <updated>2015-03-08T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/03/08/bash-special-key</id>
    <content type="html"><![CDATA[<h2>Ctrl 键组合</h2>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">ctrl+a  <span class="c"># 光标移到行首</span>
ctrl+e  <span class="c"># 光标移到行尾</span>
ctrl+b  <span class="c"># 光标左移一个字母</span>
ctrl+f  <span class="c"># 光标右移</span>
ctrl+c  <span class="c"># 杀死当前进程</span>
ctrl+d  <span class="c"># 退出当前 Shell</span>
ctrl+h  <span class="c"># 删除光标前一个字符，同 backspace 键相同</span>
ctrl+d  <span class="c"># 删除光标所在字母；注意和 backspace 以及 ctrl+h 的区别，这2个是删除光标前的字符</span>
ctrl+w  <span class="c"># 移除光标前的一个单词</span>
ctrl+k  <span class="c"># 清除光标后至行尾的内容</span>
ctrl+u  <span class="c"># 清除光标前至行首间的所有内容</span>
ctrl+t  <span class="c"># 交换光标位置前的两个字符</span>
ctrl+y  <span class="c"># 粘贴或者恢复上次的删除</span>
ctrl+l  <span class="c"># 清屏，相当于 clear</span>
ctrl+r  <span class="c"># 搜索之前打过的命令。会有一个提示，根据你输入的关键字进行搜索bash的history</span>
ctrl+z  <span class="c"># 把当前进程转到后台运行，使用 fg 命令恢复。比如 top -d1 然后 ctrl+z，到后台，然后 fg，重新恢复</span>
</code></pre></div>
<h2>Esc 键组合</h2>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">esc+d   <span class="c"># 删除光标后的一个词</span>
esc+f   <span class="c"># 往右跳一个词</span>
esc+b   <span class="c"># 往左跳一个词</span>
esc+t   <span class="c"># 交换光标位置前的两个单词</span>
</code></pre></div>
<!--more-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 常用命令小结]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/03/04/vim-commands-frequently-used/"/>
    <updated>2015-03-04T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/03/04/vim-commands-frequently-used</id>
    <content type="html"><![CDATA[<h2>光标移动</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">h,j,k,l = ←, ↓, ↑, →
ctrl+f = 下一页（forward）
ctrl+b = 上一页（backward）
w = 跳到下一个单词的开头
W = 跳到下一个单词（空白分隔）的开头
e = 跳到下一个单词的末尾
E = 跳到下一个单词（空白分隔）的末尾
b = 跳到前一个单词的开头
B = 跳到前一个单词（空白分隔）的开头
0 = 跳到本行行头
$ = 跳到本行行尾
^ = 跳到本行第一个非空白字符
g_ = 跳到本行最后一个非空白字符
gg = 跳到第一行
G = 跳到最后一行
[N]G = 跳到第N行
`. = 跳到最后编辑的地方
* = 向下查找当前光标所在位置的字符串
# = 向上查找当前光标所在位置的字符串
</code></pre></div>
<!--more-->

<h2>插入模式</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">i = insert mode at cursor
I = insert at the beginning of line
a = append after the cursor
A = append at the end of the line
o = open blank line below current line
O = open blank line above current line
Esc = exit insert mode
</code></pre></div>
<h2>编辑</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">u = undo
ctrl+r = redo
~ = switch case
&gt;&gt; = indent line one column right
&lt;&lt; = indent line one column left
== = auto-indent current line
</code></pre></div>
<h2>剪切与粘贴（删除）</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">dd = 删除当前行，并把删除的行存到剪贴板里
[N]dd = 删除当前行开始的 N 行，并把删除的行存到剪贴板里
x = 删除当前字符
X = 删除前一个字符
dw = delete to end of word
D = delete to end of line
yy = 复制当前行
[N]yy = 复制 N 行
yw = copy to end of word
y$ = copy to end of line
p = 在光标位置之后粘贴
P = 在光标位置之前粘贴
</code></pre></div>
<h2>查找</h2>
<div class="highlight"><pre><code class="language-vim" data-lang="vim">/pattern <span class="c">&quot; search for pattern</span>
?pattern <span class="c">&quot; search backwards for pattern</span>
/<span class="k">ab</span>*    <span class="c">&quot; 重复 b 多次或者 0 次，可以匹配 b,be,bee,beee 等</span>
/<span class="k">ab</span>\<span class="p">+</span>   <span class="c">&quot; 重复匹配 b 至少一次</span>
/<span class="k">ab</span>\<span class="p">=</span>   <span class="c">&quot; 重复匹配 b 字符 0 次或者一次</span>
/<span class="k">a</span>.<span class="k">b</span>    <span class="c">&quot; 匹配任何一个非空白符，可以是 a b,a1b,acb,a*b,a-b 等</span>
<span class="k">n</span>       <span class="c">&quot; repeat search in same direction</span>
<span class="k">N</span>       <span class="c">&quot; repeat search in opposite direction</span>
</code></pre></div>
<h2>替换</h2>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">s</span><span class="sr">/str1/</span>str2/       <span class="c">&quot; 用字符串 str2 替换当前行中第一次出现的字符串 str1</span>
<span class="p">:</span><span class="k">s</span><span class="sr">/str1/</span>str2/<span class="k">g</span>      <span class="c">&quot; 用字符串 str2 替换当前行中所有的字符串 str1</span>
<span class="p">:</span><span class="k">s</span><span class="sr">/str1/</span>str2/gc     <span class="c">&quot; 用字符串 str2 替换当前行中所有字符串 str1，每次替换前询问请求确认</span>
<span class="p">:</span><span class="k">s</span><span class="sr">/str1/</span>str2/gci    <span class="c">&quot; 用字符串 str2 替换当前行中所有字符串 str1，不区分大小，替换前请求确认</span>
<span class="p">:</span>%<span class="k">s</span><span class="sr">/str1/</span>str2/<span class="k">g</span>     <span class="c">&quot; 替换每一行中所有的字符串 str1 为 str2</span>
<span class="p">:</span><span class="k">g</span><span class="sr">/str1/</span><span class="k">s</span><span class="sr">//</span>str2/<span class="k">g</span>   <span class="c">&quot; 同上</span>
<span class="p">:</span><span class="k">s</span>#<span class="sr">/oradata/</span>apras<span class="sr">/#/</span>user01<span class="sr">/apras1#  &quot; 将当前行第一个 /</span>oradata<span class="sr">/apras/</span> 替换成 <span class="sr">/user01/</span>apras1/
<span class="p">:</span><span class="k">n</span><span class="p">,</span>$<span class="k">s</span><span class="sr">/str1/</span>str2/<span class="k">g</span>   <span class="c">&quot; 替换第 n 行开始到最后一行中每一行所有 str1 为 str2</span>
<span class="p">:</span><span class="m">10</span><span class="p">,</span><span class="m">20</span> <span class="k">s</span><span class="sr">/^/</span>    /<span class="k">g</span>   <span class="c">&quot; 从第 10 行到第 20 行，每行前面加四个空格，用于缩进</span>
</code></pre></div>
<h2>退出</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">:w = 保存
:wq = 保存并退出    ZZ
:x = 保存并退出     ZZ
:q = 退出，有改动未保存时退出失败
:q! = 强制退出      ZQ
</code></pre></div>
<hr>

<p><a href="/media/pictures/vim_mind_map.png"><strong>Vim Cheat Sheet</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim技巧——将 CapsLock 键映射成 Esc键]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/02/04/remap-capslock-key/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/02/04/remap-capslock-key</id>
    <content type="html"><![CDATA[<h2>1. Linux 下将 CapsLock 转换成 Esc</h2>

<p>作为一个 vimer，Caps Lock 键根本就是多余的，而且在键盘中的位置根本不合理，一不小心就按到了 Caps Lock，然后就出错了。Esc 又是 vim 下使用最为频繁的按键，将Caps Lock替换成Esc真是再好不过了，而且不用担心按ESC的时候按到了该死的F1。</p>

<p>Linux 将Caps Lock转换成Esc非常简单，只要在<code>.profile</code>文件最后加入下面这条语句，让linux每次开机去帮我们执行它（<a href="http://c2.com/cgi/wiki?RemapCapsLock">参考文章</a>）：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">xmodmap -e <span class="s1">&#39;clear Lock&#39;</span> -e <span class="s1">&#39;keycode 0x42 = Escape&#39;</span>
</code></pre></div>
<p>当你不需要的时候，将这条语句删除，重启即可。</p>

<p>可能有人会问，这样对于连续的大写不是就不方便了吗？我们可以先用小写，然后选中该段文中，按 <strong>U</strong>，就变成大写了。对于在vim中的大写，这里还有一个小技巧推荐给大家：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot;change word to uppercase, I love this very much</span>
<span class="nb">inoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span> <span class="p">&lt;</span>esc<span class="p">&gt;</span>gUiwea
</code></pre></div>
<p>将上面这条语句是放在<code>.vimrc</code>文件里的，它的作用就是在编辑状态下，按<code>ctrl+u</code>，将你刚刚输入的那个单词变成大写。谁用谁知道。对一个用vim 作为主要编辑器的人，有了上面两条技巧以后， Caps Lock 就是多余的了。</p>

<!--more-->

<h2>2. Windows 下将 CapsLock 转换成 Esc</h2>

<p>Windows 将Caps Lock转换成Esc，搜索引擎搜&quot;windows Esc Caps lock&quot;，很轻松就找到了下面的答案：</p>

<p>将下面代码保存为 capslock2esc.reg：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
&quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,03,00,00,00,3a,00,01,00,01,00,3a,00,00,00,00,00
</code></pre></div>
<p>然后双击写入注册表，重启系统。</p>

<p>这个解决方案交换了Caps Lock与Esc，这样当我向同事请教问题的时候，他需要在我的电脑上操作，按Esc确是Caps Lock 显然让他很不习惯，所以，如何将Caps Lock转换成Esc ，而不是交换它们。我找到了<a href="http://xyztony1985.blog.163.com/blog/static/3611782011752420104/">这篇文章</a>，讲得不错，可惜有错误。</p>

<h3>解读</h3>

<p>为了完整，把这篇文章转过来了，并修正了错误。方法还是和上面的一样，不过多了解析。<br>
下面分析&quot;<strong>Scancode Map</strong>&ldquo;后面一长串2进制数字， 为方便分析，拆分为每8位一行，并加上行号，结果如下：</p>

<ol>
<li>00,00,00,00,</li>
<li>00,00,00,00,</li>
<li>03,00,00,00,</li>
<li>3a,00,01,00,</li>
<li>01,00,3a,00,</li>
<li>00,00,00,00</li>
</ol>

<p>头两行和最后一行，是固定的，都是8个0。<br>
第3行，表示共更改了多少个按键，本例为3个，怎么算的？从第4行开始，到最末尾行（虽然严格来说末行不算），每行算1个，4、5、6行，刚好3个<br>
第4行，前后各4位，分别代表某个按键。本例为将0100的按键映射为3a00。3a00代表CapsLock键，0100代表Esc键<br>
第5行，同理，3a00的按键映射为0100，即映CapsLock射为Esc<br>
第6行，已经讲了，末行，固定8个0。如果需要增加更多的映射，可以在此行之上，不断加类似4、5行格式的。当然，最后的结果，还是要将各行合为一行的。</p>

<p>每行的4个数字，两个数字一组，代表一个按键，在映射时，他们的关系类似与c语言的<code>char *strcpy(char *strDest, const char *strSource)</code>函数，把后面一组的意义赋给前一组。</p>

<p>综上所述，将Caps Lock映射成Esc，而不是交换Esc与Caps Lock的代码如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
&quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,02,00,00,00,01,00,3a,00,00,00,00,00
</code></pre></div>
<p>还原按键时，只需要在注册表的路径(<code>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</code>)下，删除<strong>Scancode Map</strong>键即可。</p>

<h3>附录</h3>

<p>部分按键映射对照表：</p>

<table><thead>
<tr>
<th>Special Keys</th>
<th>Scan Code</th>
</tr>
</thead><tbody>
<tr>
<td><strong>Escape</strong></td>
<td><strong>01    00</strong></td>
</tr>
<tr>
<td>Tab</td>
<td>0F    00</td>
</tr>
<tr>
<td><strong>Caps Lock</strong></td>
<td><strong>3A    00</strong></td>
</tr>
<tr>
<td>Left Alt</td>
<td>38    00</td>
</tr>
<tr>
<td>Left Ctrl</td>
<td>1D    00</td>
</tr>
<tr>
<td>Left Shift</td>
<td>2A    00</td>
</tr>
<tr>
<td>Left Windows</td>
<td>5B    E0</td>
</tr>
<tr>
<td>Right Alt</td>
<td>38    E0</td>
</tr>
<tr>
<td>Right Ctrl</td>
<td>1D    E0</td>
</tr>
<tr>
<td>Right Shift</td>
<td>36    00</td>
</tr>
<tr>
<td>Right Windows</td>
<td>5C    E0</td>
</tr>
<tr>
<td>Backspace</td>
<td>0E    00</td>
</tr>
<tr>
<td>Delete</td>
<td>53    E0</td>
</tr>
<tr>
<td>Enter</td>
<td>1C    00</td>
</tr>
<tr>
<td>Space</td>
<td>39    00</td>
</tr>
<tr>
<td>Insert</td>
<td>52    E0</td>
</tr>
<tr>
<td>HOME</td>
<td>47    E0</td>
</tr>
<tr>
<td>End</td>
<td>4F    E0</td>
</tr>
<tr>
<td>Num    Lock</td>
<td>45    00</td>
</tr>
<tr>
<td>Page   Down</td>
<td>51    E0</td>
</tr>
<tr>
<td>Page   Up</td>
<td>49    E0</td>
</tr>
<tr>
<td>Scroll Lock</td>
<td>46    00</td>
</tr>
</tbody></table>

<p>还有一个特殊的值 —— <strong>00 00</strong>，表示啥也不干，如果要将某个按键禁用，只需映射为 <strong>00 00</strong>。</p>

<hr>

<h2>3. 参考资料</h2>

<ul>
<li><a href="http://c2.com/cgi/wiki?RemapCapsLock">http://c2.com/cgi/wiki?RemapCapsLock</a><br></li>
<li><a href="http://stackoverflow.com/questions/2176532/how-to-map-caps-lock-key-in-vim">http://stackoverflow.com/questions/2176532/how-to-map-caps-lock-key-in-vim</a><br></li>
<li><a href="https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc">https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc</a><br></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/hardware/jj128267(v=vs.85).aspx">https://msdn.microsoft.com/en-us/library/windows/hardware/jj128267(v=vs.85).aspx</a><br></li>
<li><a href="http://www.doc88.com/p-10453230875.html">http://www.doc88.com/p-10453230875.html</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs vs Vim：神的编辑器和编辑器之神]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/02/04/emacs-vs-vim/"/>
    <updated>2015-02-04T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/02/04/emacs-vs-vim</id>
    <content type="html"><![CDATA[<p>Emacs 是神的编辑器，而 Vim 是编辑器之神。二者为何会有如此美誉，且听本文向你一一道来。</p>

<h2>序章：神器的传说</h2>

<p>在这个蔚蓝色的星球上，流传着两大神器的传说：据说 Emacs 是神的编辑器，而 Vim 是编辑器之神。</p>

<p>追求独步天下的高手和低手们争着一睹它们的风采，可看到它们朴素单薄的界面后，不禁心下怀疑：这就是神器吗？甚至有人生了轻视之心。</p>

<p>肤浅的人嗤之以鼻，说：什么年代了，还抱着这么老土的玩意不放，真他妈Geek！同学，请冷静下来，听我说：它们的确够老了，都几十年的寿命了，但你想想为什么，为什么这么古老的编辑器，却有越来越多的人皈依它们。</p>

<p>Windows 下用 UltraEdit 和 Editplus 的人质问：它们到底比 UltraEdit 和 Editplus 好在哪里？我说：不可同日而语。</p>

<p>连 UltraEdit 和 EditPlus 都没用过的同学问：它们就相当于 Linux 上的 Notepad 吧？我说：请你从我的眼前消失。</p>

<p>一些人勇敢地拾起了 Vim 或 Emacs，却发现学习曲线陡峭而漫长，于是在没发现它们的强大之前就放弃了，说：太难用了，把键盘当鼠标用的烂玩意，有什么好的？</p>

<!--more-->

<p><strong>主流编辑器学习曲线图：</strong><br>
<img src="/media/pictures/editor-learning-curve.png" alt="editor learning curve"></p>

<p>还是有一些人留下来了，坚定地守护着这两大神器。一些说葡萄太酸的人想离开又不甘心，总是问：它们到底神在哪里啊？ 我不禁想起了李宗盛的几句歌词：</p>

<p><em>有人问我你究竟是哪里好，<br>
这么多年我还忘不掉？<br>
春风再美也比不上你的笑，<br>
没见过你的人不会明了。</em></p>

<p>也许你不会明了，我还是要努力讲一讲。</p>

<h2>1. 无敌的可扩展性</h2>

<h3>1.1 可扩展性给了软件强大的生命</h3>

<p>曾几何时，Windows 用户对软件的可扩展性没有概念，他们只能对他们使用的软件进行非常有限的定制。扩展软件的权利保留在软件开发者手中。软件的使用者 如果想要新的功能和特性，只能等待软件的升级。有能力的用户等不及了，为了添加自己想要的功能，从0开始写了一款新的软件。就这样，新的功能意味着新的软件，Windows 下的软件前赴后继，迅速地更新换代着。因此，Windows 下的软件都很短命。</p>

<p>Linux 和开源软件渐渐流行起来，人们才发现：可扩展性才能给软件强大的生命。 在MS的VS横行的今天，Eclipse 为什么被评为最好的IDE？就是因为它在IDE中最具可扩展性。 在IE几乎一统天下的时候，为什么Firefox能夺走越来越多的用户，也是因为它的可扩展性。提供了良好的扩展接口，用户自然会写出各种各样的插件，来满足用户自己形形色色的要求。这样，软件在用户的推动下自然变得强大了。</p>

<p>Emacs和 Vim 没有被时代淘汰，反而越发强大，也正是因为在数不清的编辑器中，他们具有无可匹敌的可扩展性。</p>

<h3>1.2 Emacs 是伪装成编辑器的操作系统</h3>

<p>有句夸张的话说：<a href="http://www.gnu.org/software/emacs/">Emacs</a> 是伪装成编辑器的操作系统。细细想来，这句话并不夸张。</p>

<p>Emacs 其实是个 Lisp 的解释器，因此可以用 Lisp 灵活地扩展。Lisp 是什么东西，这同样是种很有生命力的编程语言。在C语言还没有发明的年代，MIT的人工智能实验室写ITS操作系统时，一部分用的是汇编语言，还有一部分就是用的 Lisp。现在，Lisp 仍在人工智能研究领域广泛使用着。</p>

<p>有这么牛逼的扩展语言，注定 Emacs 向着无所不能的方向发展。渐渐地，人们用 Emacs 不再限于写程序，写文档，而且在 Emacs 里管理文件系统，运行终端，收邮件，上网，听音乐……，真是一发不可收拾。甚至，有人用 Emacs 控制咖啡机煮咖啡。</p>

<p>这种大而全的扩展，背离了“一个程序只做一件事并做好它”的 Unix 哲学，被 Unix 的忠诚用户所诟病。可是真的背离了吗？Emacs说过自己是一个编辑器吗？</p>

<p>正是因为 Emacs 的无敌的可扩展性，人们才分不清 Emacs 到底是不是一个编辑器了。但，就是有人喜欢这种 <strong>All-in-One</strong> 的哲学，喜欢在 Emacs 中完成每件事。所以才会有人写《生活在Emacs中》，所以，Emacs 才会成为一种信仰。</p>

<h3>1.3 Vim 不只是 Vi</h3>

<p>Vim 是 Vi 最受欢迎的变种之一，除了继承了 Vi 迅捷的编辑方式，Vim 的功能已经比原始的 Vi 强大得多。这也得益于它可以用 Vim 脚本无限地扩展。<a href="http://www.vim.org/">Vim.org</a> 上已经有数千个脚本了，给 Vim 增加各种各样的特性和功能。</p>

<p>为了证明 Vim 的可扩展性不输于 Emacs，也有用户写了在 Vim 中玩游戏、运行 Shell、和集成 GDB 在 Vim 内部调试的插件。客观地讲，Vim 的脚本语言与 Emacs 的 ELisp 相比，略显逊色，但这丝毫不妨碍它把 Vim 扩展成非常优秀的编辑器。</p>

<p>说到底，Vim 的前身 Vi 和 Emacs 的设计采用了不同的哲学，Vi 更符合 Unix 传统，它通过管道机制和系统内各种积木工具打交道，它讲究的是和系统内的工具程序协作来完成用户的任务。和 Emacs 相比，它的定位很明确，就是要做一个强大的编辑器。因此 Vim 的绝大部分扩展，都是为了更好地完成编辑文本的任务。</p>

<p>海纳百川，有容乃大。Emacs 和 Vim 通过别的编辑器无法比肩的可扩展性，不断吸收广大用户的智慧，是它们能成为“神器”的原因之一。</p>

<h2>2. 特立独行的魅力</h2>

<h3>2.1 可扩展性让你倾注了灵魂</h3>

<p>一旦你意识到 Vim 或 Emacs 的强大，你就踏上了不停发掘它们潜力的漫漫长路。你不停地改进自己的配置文件，你不停地搜索更好的插件，甚至有一天你开始动手写自己的插件。就像剑客保养自己的剑一样，你也甘心花时间提升你的 Vim 或 Emacs。经年累月，不知不觉，你已经在那把剑上倾注了你的灵魂。</p>

<h3>2.2 独特的操作方式让你中了毒</h3>

<p>Emacs 和 Vim 有着迥异的操作方式，却成了 Unix/Linux 世界中两种代表性的操作方式，有些软件的操作方式类似 Vi，而有些软件的方式类似 Emacs，甚至有些软件提供了 Vi 的键绑定和 Emacs 的键绑定让你选择。而无论哪种操作方式，对 Windows 用户来说都是古怪的。虽说古怪，多少代人也验证了这两种操作方式的高效。</p>

<p>Emacs 号称 Ctrl 到死的编辑器。其实它几乎用了所有的辅助键，听说过没有，<code>Emacs = Esc + Meta + Alt + Ctrl + Shift</code>。所以高德纳大师说操作 Emacs，就像弹奏管风琴。Emacs 使用非常多的组合按键，这大概也是它高效于其它无模式编辑器的原因之一。你也可以定义自己的组合键序列，调用自己写的lisp函数，完成自己想要的功能。</p>

<p>Vi 一向是以快速的文本编辑闻名于世的。它的按键更简洁，通常是单个字符按键，就实现某种操作。但这是以有模式为代价的。你要不停地按 Esc 在从它的插入模式返回 Normal 模式。客观得讲，在文本编辑方面，Vim 比 Emacs 高效，因为它提供了一些 Emacs 没有对应功能的操作来辅助高效的文本编辑。但它的模式切换也让一些人受不了，于是那些人选择了 Emacs。</p>

<p>不管你选择了 Vim 还是 Emacs，你都要为习惯它们独特的操作方式而努力，这是一个技艺积累的过程。当你习惯了 Vim 或 Emacs，你会有欲罢不能的感觉，你希望用它们完成尽可能多的任务，因为你再用别的编辑器也已经不习惯。</p>

<p>用 Vim 或 Emacs 就像吸食毒品，慢慢地就会上瘾。它们会带给你渐渐强烈的快感，但你也向它们献出了自己的灵魂。这时，你只能称它们为神器。</p>

<h2>3. 黑客的编辑器</h2>

<p>Vim 的前身 Vi 的作者 Bill Joy 和 Emacs 的作者 Richard Stallman 都是那个时代著名的黑客，所以这两款编辑器一开始面向的主要用户就是写程序的人，现在仍然是。它们对编程加入了越来越多的支持，如语法高亮、智能缩进、关键字补全，甚至集成调试。也有越来越多的程序员从IDE转向了 Vim 和 Emacs。</p>

<p>用 Vim 和 Emacs 编程到底有什么好处？我想首先是它们高效的编辑操作会提高你的编程效率。其次你可以用它们完成各种语言的编程，所谓一剑在手，夫复何求。你不用再因为编程语言不同去学习不同的IDE的使用，那些庞大的IDE的升级换代也与你再不相关，你把精力用于学习编程语言本身就好了。听说 Google 和微软内部开发也都不用IDE的，他们也会用 Emacs或 Vim。</p>

<p>因为我写的程序不多，还不能深入体会用 Vim 或 Emacs 开发程序的乐趣。我只是觉得这很酷，你看，Linux 之父 Linus 多年来用的是一款 MicroEmacs，它比 GNU Emacs 或 XEmacs少许多功能，但 Linus 就是用它在维护 Linux。微软的大牛 Don Box，Com 之父，一直用 Emacs，他说谁也不能夺走他的编辑器。他还在网上放了一段他用 Emacs 写C#程序的视频。</p>

<p>编程大师们的选择，也是 Emacs 和 Vim 被追捧为神器的原因之一。</p>

<h2>4. 神器引发的圣战</h2>

<p>Vim 用户和 Emacs 用户有着旗鼓相当的品位，应该互相欣赏才对。现实却是，忠诚于 Vim 的用户和忠诚于 Emacs 的用户互不相容，常常没完没了地打口水仗。Emacs 用户说 Vim 的操作方式单一而古怪，Vim 用户说 Emacs 体积庞大，启动缓慢。</p>

<p>很有点一山不容二虎的意思，大概因为二者都处于神器的高度，才会斗争不断吧。也可能是因为二者截然不同的设计哲学吸引的用户在价值观上也互不认同。</p>

<p>正因为两者难分高下，新人总是在 Vim 和 Emacs 之间犹豫不定，很难决定到底要皈依哪一个神。</p>

<hr>

<h2>后记</h2>

<p>Vim 称为编辑器之神，是因为作为编辑器来说，Vim 无所不能。<br>
Emacs 称为神的编辑器，因为 Emacs 是个无所不能的编辑器。</p>

<p>具体来源无法可考，这场旷日持久的编辑器之战已经打了很多年……</p>

<p>Emacs 的理念是：“everything in emacs”，即所有的事情都在 emacs 里解决。你可以把emacs当作一个操作系统，“emacs lisp”是这个操作系统支持的开发语言，你可以使用emacs lisp去开发一切你需要的工具，当然，大部分常用的工具都已经有人开发完成了，并提交到了开源社区。<br>
这么做有什么好处呢？好处就是emacs支持丰富的快捷键，只要你熟悉emacs的快捷键，那么在emacs的环境里你就不需要去动鼠标，一切一切都在瞬间的敲击键盘中完成。也就是说，emacs就是一个不需要鼠标的操作系统，这个操作系统上所有的软件都使用一套快捷键规范，熟悉这个操作系统的人，在这个操作系统里做什么都只靠敲击键盘就能够完成了，而且是瞬时的完成。<br>
那么为什么 Emacs 被称为“神的编辑器”呢？因为这等于你需要重新学习一个非常复杂的操作系统（大脑的学习和肉体的学习），包括这个操作系统的开发语言“emacs lisp”，能精通emacs操作系统的人一般都被称为“神”。</p>

<p>Vi/Vim，这个名字其实不是最体切的，也许比较贴切的名字应该是： <em>Vi/Vim/Emacs/Eclipse/Xcode/Sublime text/Firefox/Chrome/Thunderbird&hellip;..</em>。<br>
不要惊讶，这个名字可以变的很长，“编辑器之神”－－“编辑器之精髓”，所有遵照Vi精髓的编辑器、浏览器甚至是邮件客户端都可以放在这个长长的名字里，因为他们的键盘操作都是可以遵照Vi的按键规范的。掌握Vi就是通过掌握Vi的快捷键规范，用一致的按键方式使用不同软件。是不是有点 “葵花在手，天下我有”的感觉，但是请冷静:)。因为这种状态也不是完美的（也不可能是完美的），因为每种编辑器、浏览器都各有特色，都只是支持 Vi规范的一个子集（你总不能要求网页浏览器也能随意输入文字吧？）。不过相信我，这个子集已经可以让你的速度double再double了。</p>

<h3><strong>圈内名言</strong></h3>

<p>世界上有三种程序员，一种用Emacs，一种用Vim，剩下的是用其它编辑器的。<br>
“Emacs是神的编辑器，Vim是编辑器之神”</p>

<h3><strong>Emacs是什么，Vim是什么</strong></h3>

<p>是编辑器，又不仅仅是编辑器。</p>

<p>Wiki Emacs：<a href="http://zh.wikipedia.org/wiki/Emacs">http://zh.wikipedia.org/wiki/Emacs</a><br>
Wiki Vim：<a href="http://zh.wikipedia.org/zh/Vim">http://zh.wikipedia.org/zh/Vim</a></p>

<p>程序员其实很龟毛，甚至用什么编辑器他们也要纠结。跟普通的文本编辑器不同，Emacs 和 Vim 主要面向对象是程序员和技术工作者，来协助他们完成很多繁琐的工作。所以，编辑器就需要更多更强大的功能。那么，为什么不用 IDE 呢？因为 Emacs 和 Vim 有强大的定制功能，程序员可以根据自己的需要和习惯来对编辑器作出修改。</p>

<h3><strong>Emacs和Vi的异同</strong></h3>

<p>Emacs 和 Vim 有什么不同？答案是，很不同。<br>
用一个词来形容 Emacs，那就是“自动化”。用一个词来形容 Vim，那就是“快”。</p>

<p>Emacs 的精髓在于其配置文件。这个编辑器内置了emacs lisp的语言解释器，所有的配置都是通过这种语言来完成的。所以，要用好 Emacs，你得先学会一门语言。而 Lisp，则是计算机历史上第二个高级语言。Emacs 历史悠久，故事很多，要用好它也很不容易。能用好这么折腾的编辑器，应该也只有“神”了吧？</p>

<p>Vim 则完全是另一种风格。通过键盘组合，你可以很快地编辑文本。甚至你在熟练地使用 Vim 之后，你想把你的浏览器甚至是操作系统桌面按键方式也设定为 Vim 的模式。为什么？因为快！而且 Vim 显然没那么折腾，只要熟悉了基本键位之后，用不了多久你就可以指上如飞一般地coding了。Vim 是如此的简介易用而且还高效，当之无愧是编辑器之神。</p>

<h3><strong>历史悠久的吐槽</strong></h3>

<p>可能是某一天，某个菜鸟coder发了一个帖子，“我是一个程序员新手，我是应该用 Vim 呢还是 Emacs 呢？”，于是，程序员圈历史悠久的优良传统之一——吐槽，又牛逼闪闪地登场了。而且程序员们的吐槽功力竟然也极为深厚，Emacser们和Vier们刚开始只是说自己的编辑器是多么多么的牛逼，然后发展到“理性批评”对方阵营的编辑器有哪些弱点。当然，一旦划分阵营，事情就起了变化。</p>

<p>于是后来呢？估计是发展为某种哲学意义上的探讨了吧，不过肯定没有变为问候对方家人这种程度，又不是J2EE圈嘛（笑）。不过呢，既然被称为“编辑器之战”，这场旷日持久的争论也成为了黑客文化的一部分，为后来的程序员们津津乐道。</p>

<p>Hello world小组讨论编辑器的帖子：<a href="http://www.guokr.com/post/62596/">http://www.guokr.com/post/62596/</a><br>
（你知道为什么要在标题前加【纯交流】三个字了吧）<br>
Editor War Wiki：<a href="http://en.wikipedia.org/wiki/Editor_war">http://en.wikipedia.org/wiki/Editor_war</a></p>

<p>细节？哦，对于八卦的细节这种事，LZ还是很为难啊。因为那时候还木有LZ呢。</p>

<h3><strong>同余者何人？</strong></h3>

<p>未来的种子深埋在过去之中。</p>

<p>历史在发展，强大的IDE——例如Visual Studio 和 Eclipse——的出现，并没有让前辈们离开历史的舞台。Emacs 和 Vim 仍然有很多不可替代的优良特性，如果你想脱离菜鸟程序员的行列更上一层楼，那么你早晚要学会使用一个。</p>

<p>用得不好也没关系，慢慢学嘛。至少可以帮你自己融入程序员圈（更为正式的说法是“社区”），当别人有<code>.vimrc</code>和<code>.emacs</code>可以晒的时候，你也能参与进去。<br>
Hello world小组晒.vimrc的帖子：<a href="http://www.guokr.com/post/63390/">http://www.guokr.com/post/63390/</a></p>

<h3>补充一点</h3>

<p>Vi 里面还有跟 emacs 作战的游戏：<a href="http://wordwarvi.sourceforge.net/">http://wordwarvi.sourceforge.net/</a></p>

<p>在中国用 Vim 的人貌似比 Emacs 更多些，应该是 Vim 的中文资料多一些的缘故，而且毕竟 Vim 上手简单点；<br>
Emacs 要用顺手比 Vim 要难，组合快捷键太难记，好在有便利的 Org-Mode，Emacs 是需要自己配置的，不配置当然不能发现它的强大之处。而 Vim 默认有一千四百多个命令，不过同样的功能，用更少的击键次数。</p>

<p>Vim 觉得Esc键远，有个小技巧，可以用 <code>Ctrl+[</code> 来代替，还可以用CapsLock替换ESC或者Left Ctrl（参考<a href="/blog/2015/02/04/remap-capslock-key/">此文</a>）；左手小拇指可以用来回归Normal模式，真正做到双手不离键盘主行，缺点是转到用别人的电脑的时候一直写大写字母。<br>
现在的键盘布局里CapsLock就是个废键，平常都用Shift就足够了，把CapsLock和Ctrl对换就好，无论对 Vim 还是 Emacs 来说都会好用很多。</p>

<p>最后，附上一篇 Vim 进化论：<a href="http://kevinw.github.io/2010/12/15/this-is-your-brain-on-vim/"><strong>This is Your Brain on Vim</strong></a>
<img src="/media/pictures/vim-brain.gif" alt="the pristine state"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些 Vim 小技巧]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/28/vim-tricks/"/>
    <updated>2015-01-28T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/28/vim-tricks</id>
    <content type="html"><![CDATA[<p>本文主要记录一下使用 Vim 过程中，学到的一些小技巧，以免以后忘记找不到。</p>

<h2>插入模式下，光标移动</h2>

<p>在插入模式下，用 <strong>Ctrl-O</strong> 进入 普通模式：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;C-o&gt;h  move cursor left 
&lt;C-o&gt;l  move cursor right
&lt;C-o&gt;j  move cursor down
&lt;C-o&gt;k  move cursor up
</code></pre></div>
<p>插入模式下有用的控制键：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;C-w&gt;   delete word to the left of cursor
&lt;C-o&gt;D  delete everything to the right of cursor
&lt;C-u&gt;   delete everything to the left of cursor
&lt;C-h&gt;   backspace/delete
&lt;C-j&gt;   insert newline (easier than reaching for the return key)
&lt;C-t&gt;   indent current line
&lt;C-d&gt;   un-indent current line
</code></pre></div>
<!--more-->

<h2>命令模式下移动、编辑</h2>

<p>Vim 内置的热键，更多参见 <code>:help ex-edit-index</code></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">CTRL-B       cursor to beginning of command-line
CTRL-E       cursor to end       of command-line

CTRL-F       opens the command-line window (unless a different key is specified in &#39;cedit&#39;)

CTRL-H       delete the character  in front of the cursor (same as &lt;Backspace&gt;)
CTRL-W       delete the word       in front of the cursor
CTRL-U       delete all characters in front of the cursor

CTRL-P       recall previous command-line from history (that matches pattern in front of the cursor)
CTRL-N       recall next     command-line from history (that matches pattern in front of the cursor)
&lt;Up&gt;         recall previous command-line from history (that matches pattern in front of the cursor)
&lt;Down&gt;       recall next     command-line from history (that matches pattern in front of the cursor)
&lt;S-Up&gt;       recall previous command-line from history
&lt;S-Down&gt;     recall next     command-line from history
&lt;PageUp&gt;     recall previous command-line from history
&lt;PageDown&gt;   recall next     command-line from history

&lt;S-Left&gt;     cursor one word left
&lt;C-Left&gt;     cursor one word left
&lt;S-Right&gt;    cursor one word right
&lt;C-Right&gt;    cursor one word right

&lt;LeftMouse&gt;  cursor at mouse click
</code></pre></div>
<h2>复制 Vim 命令输出结果</h2>

<p>比如，运行 <code>:pwd</code>，要复制它的执行结果到剪切板的话，可以：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">redir</span> @* <span class="p">|</span> <span class="k">set</span> <span class="nb">guifont</span> <span class="p">|</span> <span class="k">redir</span> END
</code></pre></div>
<p><code>:redir</code> 重定向某个命令的输出结果到一个寄存器 <code>@*</code>。这个寄存器 <code>@*</code> 指的就是剪切板。</p>

<p>更多的信息参考：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span>help :<span class="k">redir</span>
</code></pre></div>
<h2>恢复上次退出前的会话状态</h2>

<p>启动 Vim 后，打开上次未关闭的文件：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot;The following command creates a session file:</span>
<span class="p">:</span><span class="k">mksession</span> vimbook.<span class="k">vim</span>

<span class="c">&quot;Later if you want to restore this session, you can use this command:</span>
<span class="p">:</span>source vimbook.<span class="k">vim</span>

<span class="c">&quot;If you want to start Vim and restore a specific session, you can use the</span>
following command:
<span class="k">vim</span> <span class="p">-</span>S vimbook.<span class="k">vim</span>
</code></pre></div>
<p>参看文档：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot;usr_21.txt  21.4 Sessions</span>
<span class="p">:</span><span class="k">h</span> <span class="m">21</span>.<span class="m">4</span>
<span class="p">:</span>help session
</code></pre></div>
<h2>最近打开的文件列表</h2>

<p>Vim 在 <code>~/.viminfo</code> 或 <code>~\_viminfo</code> 中保存了最近访问的10个文件信息，可以用 <code>&#39;0</code>、<code>&#39;1</code>、<code>&#39;2</code>、<code>&#39;3</code> …… <code>&#39;9</code> 这些命令跳转到对应的文件。<br>
另外，使用 <code>:browse old</code> 查看文件的序号。</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot;get recent files&#39; list</span>
<span class="p">:</span><span class="k">browse</span> <span class="k">oldfiles</span>
<span class="c">&quot;enter &#39;q&#39; and use number(like &#39;0&#39; - &#39;9&#39; .etc) to choose which file to edit</span>
<span class="c">&quot;千万不要在 &#39;q&#39; 前面输入 &#39;:&#39;</span>
<span class="k">q</span> <span class="m">2</span>
<span class="c">&quot;Or use below command to list files:</span>
<span class="p">:</span><span class="k">oldfiles</span>
<span class="c">&quot;use &#39;e #&lt;N&#39; to open the file</span>
<span class="c">&quot;这个只适用于当前这个会话访问的文件，重新启动后，命令无效</span>
<span class="p">:</span><span class="k">e</span> #<span class="m">1</span>
</code></pre></div>
<h2>在 Vim 内运行外部命令</h2>

<p>切换到命令模式 <code>Esc</code>，执行 <code>:!unix_command</code>。<br>
Anything run from the <code>:</code> prompt starting with a bang <code>!</code> will be run as a unix shell command.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">:shell  :sh[ell]        start a shell
:!      :!{command}     execute {command} with a shell
</code></pre></div>
<p>参看 <a href="http://www.linux.com/learn/tutorials/442419-vim-tips-working-with-external-commands">Vim tips: Working with external commands</a></p>

<h2>文件比较 diff</h2>

<ol>
<li><p>终端 Vim 比较模式命令打开两文件</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">vim -d file1 file2
<span class="c"># OR</span>
vimdiff file1 file2
</code></pre></div>
<p>或者启动图形界面比较：<code>gvimdiff</code>、<code>vim -d -g</code>。</p></li>
<li><p>文件 file1 已经打开，再打开另一文件 file2</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot;分成左右两个窗口并比较</span>
<span class="p">:</span><span class="k">vert</span> <span class="k">diffsplit</span> file2
</code></pre></div></li>
<li><p>如果已经在左右窗口打开两文件 file1 file2</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">diffthis</span>
</code></pre></div></li>
<li><p>改变窗口内容，Vim 又没有自动更新 diff 检查</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">diffupdate</span>
</code></pre></div></li>
<li><p>定位到不同点</p>

<p><code>[c</code> 跳到前一个不同点<br>
<code>]c</code> 跳到h后一个不同点</p></li>
<li><p>窗口间切换</p>

<p><code>ctrl-w w</code> 跳到下一个窗口<br>
<code>ctrl-w h</code> 跳到左侧窗口<br>
<code>ctrl-w l</code> 跳到右侧窗口<br>
<code>ctrl-w k</code> 跳到上方窗口<br>
<code>ctrl-w j</code> 跳到下方窗口  </p></li>
<li><p>合并文档</p>

<p><code>dp</code> 将差异点的当前文档内容应用到另一文档 <code>diff put</code><br>
<code>do</code> 将差异点的另一文档的内容拷贝到当前文档 <code>diff get</code></p></li>
<li><p>上下文审查和代码折叠</p>

<p>比较及合并文件内容时，需要结合上下文来确定最终采取的操作。<br>
<code>vimdiff</code> 缺省会把不同处的上下各6行的文本都显示出来以供参考。其他的相同的文本行被自动折叠。如果希望修改缺省的上下文行数为3行，可以这样设置：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">set</span> <span class="nb">diffopt</span><span class="p">=</span>context:<span class="m">3</span>
</code></pre></div>
<p>用简单的折叠命令来临时被折叠的相同的：   </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#展开相同的文本行
zo  (:foldopen)
#重新折叠
zc  (:foldclose)
</code></pre></div></li>
</ol>

<h2>diff 文件对比功能出错</h2>

<p>使用 gVim 7.4 的 diff 对比功能可能会报出下面错误，原因是安装在有空格的目录中：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">E810: Cannot read or write temp files
E97: 无法创建 diff
</code></pre></div>
<p>经过头疼的排查后发现问题出现在：<code>set diffexpr=MyDiff()</code></p>

<p>Vim 自带的 MyDiff 函数的问题，在 _vimrc 或 .vimrc 中找到下面代码：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="k">if</span> &amp;<span class="k">sh</span> <span class="p">=~</span> <span class="s1">&#39;\&lt;cmd&#39;</span>
      <span class="k">let</span> cmd <span class="p">=</span> <span class="s1">&#39;&quot;&quot;&#39;</span> . $VIMRUNTIME . <span class="s1">&#39;\diff&quot;&quot;&#39;</span>
      <span class="k">let</span> eq <span class="p">=</span> <span class="s1">&#39;&quot;&#39;</span>
</code></pre></div>
<p>修改为：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="k">if</span> &amp;<span class="k">sh</span> <span class="p">=~</span> <span class="s1">&#39;\&lt;cmd&#39;</span>
      <span class="k">let</span> cmd <span class="p">=</span> <span class="s1">&#39;&quot;&#39;</span> . $VIMRUNTIME . <span class="s1">&#39;\diff&quot;&#39;</span>
      <span class="k">let</span> eq <span class="p">=</span> <span class="s1">&#39;&quot;&quot;&#39;</span>
</code></pre></div>
<h2>Vim 换行符的查找与替换之迷</h2>

<p>在 shell 下生成一个 test 文件：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span><span class="nb">echo</span> -e <span class="s2">&quot;i\rlove\rWQ.&quot;</span> &gt; <span class="nb">test</span>
</code></pre></div>
<p>然后，用 Vim 打开，内容是 “<em><strong>I^Mlove^MWQ.</strong></em>”，这时执行：<code>:%s/\r/\r/g</code> 发现文件正常了。</p>

<p>但是这里面有一个不正常现象：<code>:%s/\r/\r/g</code> 这个命令是把 <code>\r</code> 替换成了 <code>\r</code>，应该什么都没变化啊。<br>
于是仔细检查了一下，发现这个问题还要从各个系统不同的换行符开始，下面的这个表格大家比较熟悉了：</p>

<table><thead>
<tr>
<th></th>
<th>windows/dos</th>
<th>unix</th>
<th>mac</th>
</tr>
</thead><tbody>
<tr>
<td><strong>换行符</strong></td>
<td>CRLF     　</td>
<td>LF</td>
<td>CR</td>
</tr>
<tr>
<td><strong>SHELL中的表示</strong></td>
<td>\r\n     　</td>
<td>\n</td>
<td>\r</td>
</tr>
<tr>
<td><strong>16进制符</strong></td>
<td>0d0a     　</td>
<td>0a</td>
<td>0d</td>
</tr>
</tbody></table>

<p><code>:%s/\r/\r/g</code> 这个命令中，第一个 <code>\r</code> 与第二个 <code>\r</code> 的意义是可能不相同的；<br>
第一个 <code>\r</code> 代表 <code>0d</code>，也就是 <code>CR</code>；而第二个 <code>\r</code>，是Vim自行根据fileformat内置变量判断决定的，见下表：</p>

<table><thead>
<tr>
<th></th>
<th>\n</th>
<th>\r</th>
</tr>
</thead><tbody>
<tr>
<td><strong>:set ff=dos</strong></td>
<td>00</td>
<td>0d0a(\n\r)</td>
</tr>
<tr>
<td><strong>:set ff=unix</strong></td>
<td>00</td>
<td>0a(\n)</td>
</tr>
<tr>
<td><strong>:set ff=mac</strong></td>
<td>00</td>
<td>0d(\r)</td>
</tr>
</tbody></table>

<p>OK，现在就可以解释上面的 <code>:%s/\r/\r/g</code> 为什么会把 <code>0d</code> 变成 <code>0a</code> 了。</p>

<p><strong>另外还有两个小Tip：</strong></p>

<ol>
<li>根据fileformat的不同，Vim会自动在文件的最未尾添加一个换行符，除非启动时 <strong>vim -b xxx</strong></li>
<li>任何情形下，Vi 中的 <code>\n</code> 都是 <code>00</code>, 在 Vim 中会显示为 <code>^@</code></li>
</ol>

<p>See：<a href="http://www.zhangabc.com/2011/08/08/vim-cr-lf-shell/">http://www.zhangabc.com/2011/08/08/vim-cr-lf-shell/</a><br>
See：<a href="http://hi.baidu.com/valoias/blog/item/5f023930d9f7e080a8018e43.html">http://hi.baidu.com/valoias/blog/item/5f023930d9f7e080a8018e43.html</a></p>

<h2>Vim 查找替换不跳转</h2>

<p>使用命令 <code>:%s/foo/bar/g</code> 全局查找替换后，Vim 会将光标移到最后一个匹配位置。<br>
如果想回到查找前的位置，最简单的使用 <code>Ctrl+O</code> 进行跳转。</p>

<p>以命令行的方式实现，可以再替换命令后追加 <code>`<code>&lt;/code&gt; 或者</code>&ldquo;` 命令。<br>
前者会返回到原来的位置，后者返回到原位置所在行的第一个非空白符位置。</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">:%s/pat/str/g<span class="p">|</span>norm!<span class="sb">``</span>

<span class="c"># or</span>

:%s/pat/str/g<span class="p">|</span><span class="s1">&#39;&#39;</span>
</code></pre></div>
<p><em>备注：上面的 <code>&#39;&#39;</code> 可以用 <code>norm!&#39;&#39;</code> 代替，这是 <strong>Ex</strong> 命令的语法（查看 <code>:help range</code>）</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM 中文编码问题]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/21/vim-configure-file/"/>
    <updated>2015-01-21T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/21/vim-configure-file</id>
    <content type="html"><![CDATA[<p>VIM 在 Linux 中的配置文件是 <code>.vimrc</code>，而在 Windows 中是 <code>_vimrc</code>。通过设置这个文件可以定制自己的 VIM 编辑器。</p>

<h2>VIM 运行环境</h2>

<p>VIM 运行环境设定了5个地方，其路径都列在 <code>runtimepath</code> 选项中，使用 <code>set</code> 命令查看：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">set</span> <span class="nb">runtimepath</span>?
</code></pre></div>
<p>显示结果如下：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="nb">runtimepath</span><span class="p">=~</span><span class="sr">/.vim,/</span>usr<span class="sr">/local/</span>share<span class="sr">/vim/</span>vimfiles<span class="p">,</span><span class="sr">/usr/</span>local<span class="sr">/share/</span><span class="k">vim</span><span class="sr">/vim63,/</span>usr<span class="sr">/local/</span>share<span class="sr">/vim/</span>vimfiles<span class="sr">/after,~/</span>.<span class="k">vim</span>/after
</code></pre></div>
<!--more-->

<ul>
<li>Linux 下的 <code>$HOME/.vim</code> 或 Windows 下的 <code>%HOMEPATH%/vimfiles</code>：用户自定义脚本及插件。<br>
该目录下的脚本会在系统脚本加载前执行，用于扩展与替代系统脚本原有功能。</li>
<li><code>$VIM/vimfiles</code>：功能同上，不过是对所有用户均有效的。</li>
<li><code>$VIMRUNTIME</code>：随 VIM 一同发行的插件与脚本。<br>
不要在这里存放你自己下载或安装的文件，升级 VIM 的时候，这里的文件很可能被直接覆盖掉，不会给出任何提示信息。</li>
<li>Linux 下的 <code>$HOME/.vim/after</code> 或 Windows 下的 <code>%HOMEPATH%/vimfiles/after</code>：用于对已有设置进行一些小的修正和覆写。</li>
<li><code>$VIM/vimfiles/after</code>：对所有用户均有效的一些全局设置修正脚本。</li>
</ul>

<p>以上路径都是使用“ VIM 语言”给出的，一般情况下，<code>$VIMRUNTIME</code> 不会被定义为系统环境变量，<code>$VIM</code> 在少数情况下会在 VIM 之外被定义。如果你想知道这些路径都是什么，可以在 VIM 中使用 <code>:echo $VIMRUNTIME</code> 或 <code>:echo $VIM</code> 查看。</p>

<p>以上提到的 5 个目录的子目录结构都是相同的。如果你希望在其它目录里安装插件的话，建议使用 <code>$VIMRUNTIME</code> 的目录结构作为模版，将必要的目录结构创建完整，像这样：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">+ &lt;Directory&gt;
  +  colors
  +  compiler
  +  doc
  +  etc
  +  ftdetect
  +  ftplugin
  +  indent
  +  keymap
  +  plugin
  +  syntax
</code></pre></div>
<h2>中文编码乱码</h2>

<p>VIM 7.0 之后对双字节编码的支持已经很不错了，通过一些配置可以识别双字节编码。</p>

<h3>修改配置文件</h3>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>
<span class="k">set</span> <span class="nb">fenc</span><span class="p">=</span>cp936
<span class="k">set</span> <span class="nb">fileencodings</span><span class="p">=</span>cp936<span class="p">,</span>ucs<span class="p">-</span>bom<span class="p">,</span>utf<span class="m">-8</span>
<span class="c">&quot;判断操作系统</span>
<span class="k">if</span><span class="p">(</span>has<span class="p">(</span><span class="s2">&quot;win32&quot;</span><span class="p">)</span> <span class="p">||</span> has<span class="p">(</span><span class="s2">&quot;win95&quot;</span><span class="p">)</span> <span class="p">||</span> has<span class="p">(</span><span class="s2">&quot;win64&quot;</span><span class="p">)</span> <span class="p">||</span> has<span class="p">(</span><span class="s2">&quot;win16&quot;</span><span class="p">))</span>
    <span class="k">let</span> <span class="k">g</span>:iswindows<span class="p">=</span><span class="m">1</span>
<span class="k">else</span>
    <span class="k">let</span> <span class="k">g</span>:iswindows<span class="p">=</span><span class="m">0</span>
<span class="k">endif</span>
<span class="c">&quot;防止菜单乱码</span>
<span class="k">if</span><span class="p">(</span><span class="k">g</span>:iswindows<span class="p">==</span><span class="m">1</span><span class="p">)</span>
    source $VIMRUNTIME/delmenu.<span class="k">vim</span>
    source $VIMRUNTIME/menu.<span class="k">vim</span>
    <span class="k">set</span> <span class="nb">langmenu</span><span class="p">=</span>zh_CN.utf<span class="m">-8</span>
    <span class="k">language</span> <span class="k">messages</span> zh_CN.utf<span class="m">-8</span>
<span class="k">endif</span>
<span class="c">&quot;默认以双字节处理那些特殊字符</span>
<span class="k">if</span> <span class="k">v</span>:<span class="k">lang</span> <span class="p">=~</span>? <span class="s1">&#39;^\(zh\)\|\(ja\)\|\(ko\)&#39;</span>
    <span class="k">set</span> <span class="nb">ambiwidth</span><span class="p">=</span>double
<span class="k">endif</span>
<span class="k">set</span> <span class="nb">nobomb</span>
</code></pre></div>
<p>解释说明：</p>

<p><code>set encoding=utf-8</code> 将 Vim 的内部编码格式变为 utf-8 ，这样识别文件正确的准确性会提高很多。<br>
<code>set fenc=cp936</code> 是指当新建一个文件的时候，默认编码是 gbk。<br>
<code>set fileencodings=cp936,ucs-bom,utf-8</code> 会让 Vim 按照 gbk、utf-8（没有头）、utf-8 的顺序识别。如果读者需要默认为 utf-8 格式，可以改变这个变量取值的顺序。<br>
<code>set nobomb</code> 让 Vim 不自动设置字节序标记，因为并不是所有编辑器都可以识别字节序标记。</p>

<h3>fencview.vim 插件</h3>

<p>Vim 内置的编码识别机制，识别率是很低的，尤其是对于简体中文(GBK/GB18030)、繁体中文(Big5)、日文(euc-jp) 和韩文(euc-kr)之间的识别。<a href="http://www.vim.org/scripts/script.php?script_id=1708">FencView</a> 这个插件对其功能进行了完善。</p>

<p>这款插件集成了自动检测编码格式的能力，使用词频统计的方式识别编码，正确率非常高。<br>
不过，建议关掉自动检测，只有在 Vim 识别失败的时候，才调出 FencView，手动选择编码。本文开头给出了 Vim 环境的知识，从中选择合适的位置安装这个插件即可。</p>

<p>在 vimrc 中配置如下：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot;关闭自动检测</span>
<span class="k">let</span> <span class="k">g</span>:fencview_autodetect<span class="p">=</span><span class="m">0</span>
map <span class="p">&lt;</span>F11<span class="p">&gt;</span> :FencView<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</code></pre></div>
<p>这样按下 F11 键就可以直接呼出 FencView 界面，再按下就会关闭。</p>

<p>另外，按照上面的格式来配置 Vim，在保存文件时，是不会更改文件格式的，如果想要强制更改，例如要改成 utf-8，可以用 <code>set fenc=utf-8</code> 来执行，之后写入即可。</p>

<h2>编码设置选项</h2>

<p>Vim 有4个与编码有关的选项：<br>
<strong>enc</strong>(encoding)、<strong>fenc</strong>(fileencoding)、<strong>fencs</strong>(fileencodings) 和 <strong>tenc</strong>(termencoding)<br>
在实际使用中，任何一个选项出现错误，都会导致出现乱码。因此，每一个 Vim 用户都应该明确这4个选项的含义。下面，我们详细介绍它们的含义和作用。</p>

<h3>1、encoding</h3>

<p><code>encoding</code> 是 Vim 内部使用的字符编码方式。当我们设置了 <code>encoding</code> 后，Vim 内部所有的 buffer、寄存器、脚本中的字符串等，全都使用这个编码。Vim 在工作的时候，如果编码方式与它的内部编码不一致，它会先把编码转换成内部编码。如果工作用的编码中含有无法转换为内部编码的字符，这些字符就会丢失。因此，在选择 Vim 的内部编码的时候，一定要使用一种表现能力足够强的编码，以免影响正常工作。可以用命令 <code>:set enc</code> 查看当前的 <code>enc</code> 是什么值。</p>

<p>由于 <code>encoding</code> 选项涉及到 Vim 中所有字符的内部表示，因此只能在 Vim 启动的时候设置一次。在 Vim 工作过程中修改 <code>encoding</code> 会造成非常多的问题。如果没有特别的理由，请始终将 <code>encoding</code> 设置为 <code>utf-8</code>。为了避免在非 UTF-8 的系统如 Windows 下，菜单和系统提示出现乱码，可同时做这几项设置：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>
<span class="k">set</span> <span class="nb">langmenu</span><span class="p">=</span>zh_CN.UTF<span class="m">-8</span>
<span class="k">language</span> message zh_CN.UTF<span class="m">-8</span>
</code></pre></div>
<h3>2、fileencoding</h3>

<p>Vim 解析出来的当前文件的编码（有可能解析成错的哦）。</p>

<p>当 Vim 从磁盘上读取文件的时候，会对文件的编码进行探测。如果文件的编码方式和 Vim 的内部编码方式不同，Vim 就会对编码进行转换。转换完毕后，Vim 会将 <code>fileencoding</code> 选项设置为文件的编码。当 Vim 存盘的时候，如果 <code>encoding</code> 和 <code>fileencoding</code> 不一样，Vim 就会进行编码转换。因此，通过打开文件后设置 <code>fileencoding</code>，我们可以将文件由一种编码转换为另一种编码。<br>
但是，由前面的介绍可以看出，<code>fileencoding</code> 是在打开文件的时候，由 Vim 进行探测后自动设置的。因此，如果出现乱码，我们无法通过在打开文件后重新设置 <code>fileencoding</code> 来纠正乱码，设置 <code>fenc</code> 只能改变文本的编码格式。</p>

<h3>3、fileencodings</h3>

<p>Vim 解析文件时猜测的编码格式顺序列表。</p>

<p>编码的自动识别是通过设置 <code>fileencodings</code> 实现的，注意是复数形式。<code>fileencodings</code> 是一个用逗号分隔的列表，列表中的每一项是一种编码的名称。当我们打开文件的时候，Vim 按顺序使用 <code>fencs</code> 中的编码进行尝试解码，如果匹配成功，就用该编码方式进行解码，并将 <code>fileencoding</code> 设置为这个值，如果解码失败，就继续试验下一个编码。</p>

<p>因此，我们在设置 <code>fileencodings</code> 的时候，一定要把要求严格的、当文件不是这个编码的时候更容易出现解码失败的编码方式放在前面，把宽松的编码方式放在后面。</p>

<p>例如，<code>latin1</code> 是一种非常宽松的编码方式，任何一种编码方式得到的文本，用 <code>latin1</code> 进行解码，都不会发生解码失败——当然，解码得到的结果自然也就是理所当然的“乱码”。因此，如果你把 <code>latin1</code> 放到了 <code>fileencodings</code> 的第一位的话，打开任何中文文件都是乱码也就是理所当然的了。</p>

<p>以下是博主推荐的一个 <code>fileencodings</code> 设置：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="k">set</span> <span class="nb">fileencodings</span><span class="p">=</span>ucs<span class="p">-</span>bom<span class="p">,</span>utf<span class="m">-8</span><span class="p">,</span>cp936<span class="p">,</span>gb18030<span class="p">,</span>big5<span class="p">,</span>euc<span class="p">-</span>jp<span class="p">,</span>euc<span class="p">-</span>kr<span class="p">,</span>latin1
</code></pre></div>
<p>其中，<code>ucs-bom</code> 是一种非常严格的编码，非该编码的文件几乎没有可能被误判为 <code>ucs-bom</code>，因此放在第一位。</p>

<p><code>utf-8</code> 也相当严格，除了很短的文件外（例如许多人津津乐道的 GBK 编码的“联通”被误判为 UTF-8 编码的经典错误），现实生活中一般文件是几乎不可能被误判的，因此放在第二位。</p>

<p>接下来是 <code>cp936</code> 和 <code>gb18030</code>，这两种编码相对宽松，如果放前面的话，会出现大量误判，所以就让它们靠后一些。<code>cp936</code> 的编码空间比 <code>gb18030</code> 小，所以把 <code>cp936</code> 放在 <code>gb18030</code> 前面。</p>

<p>至于 <code>big5</code>、<code>euc-jp</code> 和 <code>euc-kr</code>，它们的严格程度和 <code>cp936</code> 差不多，把它们放在后面，在编辑这些编码的文件的时候必然出现大量误判，但这是 Vim 内置编码探测机制没有办法解决的事。由于中国用户很少有机会编辑这些编码的文件，因此我们还是决定把 <code>cp936</code> 和 <code>gb18030</code> 往前提以保证这些编码的识别。</p>

<p>最后就是 <code>latin1</code> 了。它是一种极其宽松的编码，以至于我们不得不把它放在最后一位。不过可惜的是，当你碰到一个真的 <code>latin1</code> 编码的文件时，绝大部分情况下，它没有机会 <strong>fall-back</strong> 到 <code>latin1</code>，往往在前面的编码中就被误判了。不过，正如前面所说的，中国用户没有太多机会接触这样的文件。</p>

<p>如果编码被误判了，解码后的结果就无法被人类识别，于是我们就说，这个文件乱码了。此时，如果你知道这个文件的正确编码的话，可以在打开文件的时候使用 <code>++enc=encoding</code> 的方式来打开文件，如：</p>
<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="k">e</span> <span class="p">++</span><span class="nb">enc</span><span class="p">=</span>utf<span class="m">-8</span> myfile.txt
</code></pre></div>
<h3>4、termencoding</h3>

<p>终端使用文本编码，或者说是 Vim 用于屏幕显示的编码，在显示的时候，Vim 会把内部编码转换为屏幕编码，再用于输出。内部编码中含有无法转换为屏幕编码的字符时，该字符会变成问号，但不会影响对它的编辑操作。如果 <code>termencoding</code> 没有设置，则直接使用 <code>encoding</code> 不进行转换。</p>

<p>举个例子，当你在 Windows 下通过 telnet 登录 Linux 工作站时，由于 Windows 的 telnet 是 GBK 编码的，而 Linux 下使用 UTF-8 编码，你在 telnet 下的 Vim 中就会乱码。此时有两种消除乱码的方式：一是把 Vim 的 <code>encoding</code> 改为 <code>gbk</code>，另一种方法是保持 <code>encoding</code> 为 <code>utf-8</code>，把 <code>termencoding</code> 改为 <code>gbk</code>，让 Vim 在显示的时候转码。显然，使用前一种方法时，如果遇到编辑的文件中含有 GBK 无法表示的字符时，这些字符就会丢失。但如果使用后一种方法，虽然由于终端所限，这些字符无法显示，但在编辑过程中这些字符是不会丢失的。</p>

<p>对于图形界面下的 GVim，它的显示不依赖 TERM，因此 <code>termencoding</code> 对于它没有意义。在 GTK2 下的 GVim 中，<code>termencoding</code> 永远是 utf-8，并且不能修改。而 Windows 下的 GVim 则忽略 <code>termencoding</code> 的存在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014-09-22 记录一些网站列表(ZZ)]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/18/web-sites-list/"/>
    <updated>2015-01-18T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/18/web-sites-list</id>
    <content type="html"><![CDATA[<h2>CSS</h2>

<p><a href="https://developer.mozilla.org/en-US/">MDN</a> <a href="http://lesscss.org/">Less</a> <a href="http://sass-lang.com/">Sass</a></p>

<h2>前端框架</h2>

<p><a href="http://foundation.zurb.com/index.html">Foundation</a> <a href="http://getbootstrap.com/">Bootstrap</a> <a href="http://purecss.io/">Pure</a> <a href="http://www.polymer-project.org/">Polymer</a></p></p>

<h2>图标</h2>

<p><a href="http://themify.me/themify-icons">Themify Icons</a> <a href="http://icomoon.io/">IcoMoon</a> <a href="http://www.flaticon.com/authors/freepik">Freepik</a> <a href="http://glyphicons.com/">Glyphicons</a></p>

<h2>排版</h2>

<p><a href="http://typo.sofi.sh/">typo.css</a> <a href="http://lab.lepture.com/yue.css/">yue.css</a></p>

<h2>图库</h2>

<p><a href="http://www.imcreator.com/free">Im Creator</a> <a href="http://picjumbo.com/">Pic Jumbo</a> <a href="http://www.gratisography.com/">Gratisography</a> <a href="http://superfamous.com/">Super Famous</a> <a href="http://unsplash.com/">Unsplash</a></p>

<!--more-->

<h2>其他</h2>

<table><tbody>
    <tr>
        <td>
            类别
        </td>
        <td>
            名称
        </td>
        <td>
            官网
        </td>
        <td>
            备注
        </td>
    </tr>
    <tr>
        <td>
            查询引擎
        </td>
        <td>
            Phoenix
        </td>
        <td>
            <a href="http://phoenix.incubator.apache.org/">http://phoenix.incubator.apache.org/</a> 
        </td>
        <td>
            Salesforce公司出品，Apache&nbsp;HBase之上的一个SQL中间层，完全使用Java编写
        </td>
    </tr>
    <tr>
        <td>
            Stinger
        </td>
        <td>
            <a href="http://hortonworks.com/labs/stinger/
http://tez.incubator.apache.org/">http://hortonworks.com/labs/stinger/<br clear="all">
http://tez.incubator.apache.org/</a> 
        </td>
        <td>
            原叫Tez，下一代Hive,Hortonworks主导开发，运行在YARN上的DAG计算框架
        </td>
    </tr>
    <tr>
        <td>
            Presto
        </td>
        <td>
            <a href="http://prestodb.io/">http://prestodb.io/</a> 
        </td>
        <td>
            Facebook开源
        </td>
    </tr>
    <tr>
        <td>
            Shark
        </td>
        <td>
            <a href="http://shark.cs.berkeley.edu/">http://shark.cs.berkeley.edu/</a> 
        </td>
        <td>
            Spark上的SQL执行引擎
        </td>
    </tr>
    <tr>
        <td>
            Pig
        </td>
        <td>
            <a href="http://pig.apache.org/">http://pig.apache.org/</a> 
        </td>
        <td>
            基于Hadoop&nbsp;MapReduce的脚本语言
        </td>
    </tr>
    <tr>
        <td>
            Cloudera&nbsp;<span class="font2">Impala</span> 
        </td>
        <td>
            <a href="http://www.cloudera.com/content/cloudera/en/products-and-services/cdh/impala.html">http://www.cloudera.com/content/cloudera/en/products-and-services/cdh/impala.html</a> 
        </td>
        <td>
            参照Google&nbsp;Dremel实现，能运行在HDFS或HBase上，使用C++开发
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;<span class="font2">Drill</span> 
        </td>
        <td>
            <a href="http://incubator.apache.org/drill/">http://incubator.apache.org/drill/</a> 
        </td>
        <td>
            参照Google&nbsp;Dremel实现
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;Tajo
        </td>
        <td>
            <a href="http://tajo.incubator.apache.org/">http://tajo.incubator.apache.org/</a> 
        </td>
        <td>
            一个运行在YARN上支持SQL的分布式数据仓库
        </td>
    </tr>
    <tr>
        <td>
            Hive
        </td>
        <td>
            <a href="http://hive.apache.org/">http://hive.apache.org/</a> 
        </td>
        <td>
            基于Hadoop&nbsp;MapReduce的SQL查询引擎
        </td>
    </tr>
    <tr>
        <td>
            流式计算
        </td>
        <td>
            Facebook&nbsp;Puma
        </td>
        <td>
        </td>
        <td>
            实时数据流分析
        </td>
    </tr>
    <tr>
        <td>
            Twitter&nbsp;Rainbird
        </td>
        <td>
        </td>
        <td>
            分布式实时统计系统，如网站的点击统计
        </td>
    </tr>
    <tr>
        <td>
            Yahoo&nbsp;S4
        </td>
        <td>
            <a href="http://incubator.apache.org/s4/">http://incubator.apache.org/s4/</a> 
        </td>
        <td>
            Java开发的一个通用的、分布式的、可扩展的、分区容错的、可插拔的无主架构的流式系统
        </td>
    </tr>
    <tr>
        <td>
            Twitter&nbsp;<span class="font2">Storm</span> 
        </td>
        <td>
            <a href="http://storm.incubator.apache.org/">http://storm.incubator.apache.org/</a> 
        </td>
        <td>
            使用Java和Clojure实现
        </td>
    </tr>
    <tr>
        <td>
            迭代计算
        </td>
        <td>
            Apache&nbsp;Hama
        </td>
        <td>
            <a href="https://hama.apache.org/">https://hama.apache.org/</a> 
        </td>
        <td>
            建立在Hadoop上基于BSP（Bulk&nbsp;Synchronous&nbsp;Parallel）的计算框架，模仿了Google的Pregel。
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;Giraph
        </td>
        <td>
            <a href="https://giraph.apache.org/">https://giraph.apache.org/</a> 
        </td>
        <td>
            建立在Hadoop上的可伸缩的分布式迭代图处理系统，灵感来自BSP（bulk&nbsp;synchronous&nbsp;parallel）和Google的Pregel
        </td>
    </tr>
    <tr>
        <td>
            HaLoop
        </td>
        <td>
            <a href="https://code.google.com/p/haloop/">https://code.google.com/p/haloop/</a> 
        </td>
        <td>
            迭代的MapReduce
        </td>
    </tr>
    <tr>
        <td>
            Twister
        </td>
        <td>
            <a href="http://www.iterativemapreduce.org/">http://www.iterativemapreduce.org/</a> 
        </td>
        <td>
            迭代的MapReduce
        </td>
    </tr>
    <tr>
        <td>
            离线计算
        </td>
        <td>
            Hadoop&nbsp;<span class="font2">MapReduce</span> 
        </td>
        <td>
            <a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a> 
        </td>
        <td>
            经典的大数据批处理系统
        </td>
    </tr>
    <tr>
        <td>
            Berkeley&nbsp;<span class="font2">Spark</span> 
        </td>
        <td>
            <a href="http://spark.incubator.apache.org/
http://shark.cs.berkeley.edu/">http://spark.incubator.apache.org/<br clear="all">
http://shark.cs.berkeley.edu/</a> 
        </td>
        <td>
            使用Scala语言实现，和MapReduce有较大的竞争关系，性能强于MapReduce
        </td>
    </tr>
    <tr>
        <td>
            DataTorrent
        </td>
        <td>
            <a href="http://www.datatorrent.com/">http://www.datatorrent.com/</a> 
        </td>
        <td>
            基于Hadoop2.X构建的实时流式处理和分析平台，每秒可以处理超过10亿个实时事件
        </td>
    </tr>
    <tr>
        <td>
            键值存储
        </td>
        <td>
            LevelDB
        </td>
        <td>
            <a href="https://code.google.com/p/leveldb/">https://code.google.com/p/leveldb/</a> 
        </td>
        <td>
            Google开源的高效KV编程库，注意它只是个库
        </td>
    </tr>
    <tr>
        <td>
            RocksDB
        </td>
        <td>
            <a href="http://rocksdb.org/">http://rocksdb.org/</a> 
        </td>
        <td>
            Facebook开源的，基于Google的LevelDB，但提高了扩展性可以运行在多核处理器上
        </td>
    </tr>
    <tr>
        <td>
            HyperDex
        </td>
        <td>
            <a href="http://hyperdex.org/">http://hyperdex.org/</a> 
        </td>
        <td>
            下一代KV存储系统，支持strings、integers、floats、lists、maps和sets等丰富的数据类型
        </td>
    </tr>
    <tr>
        <td>
            TokyoCabinet
        </td>
        <td>
            <a href="http://fallabs.com/tokyocabinet/">http://fallabs.com/tokyocabinet/</a> 
        </td>
        <td>
            日本人Mikio&nbsp;Hirabayashi（平林干雄）开发的一款DBM数据库，注意它只是个库（大名鼎鼎的DBM数据库qdbm就是Mikio&nbsp;Hirabayashi开发的）,读写非常快
        </td>
    </tr>
    <tr>
        <td>
            Voldemort
        </td>
        <td>
            <a href="http://www.project-voldemort.com/voldemort/">http://www.project-voldemort.com/voldemort/</a> 
        </td>
        <td>
            一个分布式键值存储系统，是Amazon&nbsp;Dynamo的一个开源克隆，LinkedIn开源
        </td>
    </tr>
    <tr>
        <td>
            Amazon&nbsp;Dynamo
        </td>
        <td>
            <a href="https://github.com/dynamo/dynamo">https://github.com/dynamo/dynamo</a> 
        </td>
        <td>
            亚马逊的KV模式的存储平台，无主架构
        </td>
    </tr>
    <tr>
        <td>
            Tair
        </td>
        <td>
            <a href="http://tair.taobao.org/">http://tair.taobao.org/</a> 
        </td>
        <td>
            淘宝出品的高性能、分布式、可扩展、高可靠的KV结构存储系统，专为小文件优化，并提供简单易用的接口（类似Map），Tair支持Java和C版本的客户端
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;Accumulo
        </td>
        <td>
            <a href="https://accumulo.apache.org/">https://accumulo.apache.org/</a> 
        </td>
        <td>
            一个可靠的、可伸缩的、高性能的排序分布式的KV存储系统，参照Google&nbsp;Bigtable而设计，建立在Hadoop、Thrift和Zookeeper之上。
        </td>
    </tr>
    <tr>
        <td>
            Redis
        </td>
        <td>
            <a href="http://redis.io/">http://redis.io/</a> 
        </td>
        <td>
            使用ANSI&nbsp;C语言编写、支持网络、可基于内存亦可持久化的日志型、单机版KV数据库。从2010年3月15日起，Redis的开发工作由VMware主持
        </td>
    </tr>
    <tr>
        <td>
            表格存储
        </td>
        <td>
            OceanBase
        </td>
        <td>
            <a href="http://alibaba.github.io/oceanbase/">http://alibaba.github.io/oceanbase/</a> 
        </td>
        <td>
            支持海量数据的高性能分布式数据库系统，实现了数千亿条记录、数百TB数据上的跨行跨表事务
        </td>
    </tr>
    <tr>
        <td>
            Amazon&nbsp;SimpleDB
        </td>
        <td>
            <a href="http://aws.amazon.com/cn/simpledb/">http://aws.amazon.com/cn/simpledb/</a> 
        </td>
        <td>
            一个可大规模伸缩、用&nbsp;Erlang&nbsp;编写的高可用数据存储
        </td>
    </tr>
    <tr>
        <td>
            Vertica
        </td>
        <td>
            <a href="http://www.vertica.com/">http://www.vertica.com/</a> 
        </td>
        <td>
            惠普2011收购Vertica，Vertica是传统的关系型数据库，基于列存储，同时支持MPP，使用标准的SQL查询,可以和Hadoop/MapReduce进行集成
        </td>
    </tr>
    <tr>
        <td>
            Cassandra
        </td>
        <td>
            <a href="http://cassandra.apache.org/">http://cassandra.apache.org/</a> 
        </td>
        <td>
            Hadoop成员，Facebook于2008将Cassandra开源，基于O(1)DHT的完全P2P架构
        </td>
    </tr>
    <tr>
        <td>
            HyperTable
        </td>
        <td>
            <a href="http://hypertable.org/">http://hypertable.org/</a> 
        </td>
        <td>
            搜索引擎公司Zvents针对Bigtable的C++开源实现
        </td>
    </tr>
    <tr>
        <td>
            HBase
        </td>
        <td>
            <a href="http://hbase.apache.org/">http://hbase.apache.org/</a> 
        </td>
        <td>
            Bigtable在Hadoop中的实现，最初是Powerset公司为了处理自然语言搜索产生的海量数据而开展的项目
        </td>
    </tr>
    <tr>
        <td>
            文件存储
        </td>
        <td>
            CouchDB
        </td>
        <td>
            <a href="http://couchdb.apache.org/">http://couchdb.apache.org/</a> 
        </td>
        <td>
            面向文档的数据存储
        </td>
    </tr>
    <tr>
        <td>
            MongoDB
        </td>
        <td>
            <a href="https://www.mongodb.org/">https://www.mongodb.org/</a> 
        </td>
        <td>
            文档数据库
        </td>
    </tr>
    <tr>
        <td>
            Tachyon
        </td>
        <td>
            <a href="http://tachyon-project.org/
https://github.com/amplab/tachyon">http://tachyon-project.org/<br clear="all">
https://github.com/amplab/tachyon</a> 
        </td>
        <td>
            加州大学伯克利分校的AMPLab基于Hadoop的核心组件开发出一个更快的版本Tachyon，它从底层重构了Hadoop平台。
        </td>
    </tr>
    <tr>
        <td>
            KFS
        </td>
        <td>
            <a href="http://code.google.com/p/kosmosfs/">http://code.google.com/p/kosmosfs/</a> 
        </td>
        <td>
            GFS的C++开源版本
        </td>
    </tr>
    <tr>
        <td>
            HDFS
        </td>
        <td>
            <a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a> 
        </td>
        <td>
            GFS在Hadoop中的实现
        </td>
    </tr>
    <tr>
        <td>
            资源管理
        </td>
        <td>
            Twitter&nbsp;<span class="font2">Mesos</span> 
        </td>
        <td>
            <a href="http://mesos.apache.org/">http://mesos.apache.org/</a> 
        </td>
        <td>
            Google&nbsp;Borg的翻版
        </td>
    </tr>
    <tr>
        <td>
            Hadoop&nbsp;<span class="font2">Yarn</span> 
        </td>
        <td>
            <a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a> 
        </td>
        <td>
            类似于Mesos
        </td>
    </tr>
    <tr>
        <td>
            日志收集系统
        </td>
        <td>
            Facebook&nbsp;Scribe
        </td>
        <td>
            <a href="https://github.com/facebook/scribe">https://github.com/facebook/scribe</a> 
        </td>
        <td>
            Facebook开源的日志收集系统，能够从各种日志源上收集日志，存储到一个中央存储系统（可以是NFS，分布式文件系统等）上，以便于进行集中统计分析处理，常与Hadoop结合使用，Scribe用于向HDFS中Push日志
        </td>
    </tr>
    <tr>
        <td>
            Cloudera&nbsp;Flume
        </td>
        <td>
            <a href="http://flume.apache.org/">http://flume.apache.org/</a> 
        </td>
        <td>
            Cloudera提供的日志收集系统，支持对日志的实时性收集
        </td>
    </tr>
    <tr>
        <td>
            消息系统
        </td>
        <td>
            StormMQ
        </td>
        <td>
            <a href="http://stormmq.com/">http://stormmq.com/</a> 
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
            ZeroMQ
        </td>
        <td>
            <a href="http://zeromq.org/">http://zeromq.org/</a> 
        </td>
        <td>
            很底层的高性能网络库
        </td>
    </tr>
    <tr>
        <td>
            RabbitMQ
        </td>
        <td>
            <a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a> 
        </td>
        <td>
            在AMQP基础上完整的，可复用的企业消息系统
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;ActiveMQ
        </td>
        <td>
            <a href="http://activemq.apache.org/">http://activemq.apache.org/</a> 
        </td>
        <td>
            能力强劲的开源消息总线
        </td>
    </tr>
    <tr>
        <td>
            Jafka
        </td>
        <td>
            <a href="http://kafka.apache.org/">http://kafka.apache.org/</a> 
        </td>
        <td>
            开源的、高性能的、跨语言分布式消息系统，最早是由Apache孵化的Kafka（由LinkedIn捐助给Apache）克隆而来
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;Kafka
        </td>
        <td>
            <a href="http://kafka.apache.org/">http://kafka.apache.org/</a> 
        </td>
        <td>
            Linkedin于2010年12月份开源的分布式消息系统，它主要用于处理活跃的流式数据，由Scala写成
        </td>
    </tr>
    <tr>
        <td>
            分布式服务
        </td>
        <td>
            ZooKeeper
        </td>
        <td>
            <a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a> 
        </td>
        <td>
            分布式锁服务，PoxOS算法的实现，对应Google的Chubby
        </td>
    </tr>
    <tr>
        <td>
            RPC
        </td>
        <td>
            Apache&nbsp;Avro
        </td>
        <td>
            <a href="http://avro.apache.org/">http://avro.apache.org/</a> 
        </td>
        <td>
            Hadoop中的RPC
        </td>
    </tr>
    <tr>
        <td>
            Facebook&nbsp;<span class="font2">Thrift</span> 
        </td>
        <td>
            <a href="http://thrift.apache.org/">http://thrift.apache.org/</a> 
        </td>
        <td>
            RPC，支持C++/Java/PHP等众多语言
        </td>
    </tr>
    <tr>
        <td>
            集群管理
        </td>
        <td>
            Nagios
        </td>
        <td>
            <a href="http://www.nagios.org/">http://www.nagios.org/</a> 
        </td>
        <td>
            监视系统运行状态和网络信息的监视系统
        </td>
    </tr>
    <tr>
        <td>
            Ganglia
        </td>
        <td>
            <a href="http://ganglia.sourceforge.net/">http://ganglia.sourceforge.net/</a> 
        </td>
        <td>
            UC&nbsp;Berkeley发起的一个开源集群监视项目，设计用于测量数以千计的节点。
        </td>
    </tr>
    <tr>
        <td>
            Apache&nbsp;Ambari
        </td>
        <td>
            <a href="http://ambari.apache.org/">http://ambari.apache.org/</a> 
        </td>
        <td>
            Hadoop成员，管理和监视Apache&nbsp;Hadoop集群的开源框架
        </td>
    </tr>
    <tr>
        <td>
            基础设施
        </td>
        <td>
            LevelDB
        </td>
        <td>
            <a href="http://code.google.com/p/leveldb/">http://code.google.com/p/leveldb/</a> 
        </td>
        <td>
            Google顶级大牛开发的单机版键值数据库，具有非常高的写性能
        </td>
    </tr>
    <tr>
        <td>
            SSTable
        </td>
        <td>
        </td>
        <td>
            源于Google，orted&nbsp;String&nbsp;Table
        </td>
    </tr>
    <tr>
        <td>
            RecordIO
        </td>
        <td>
        </td>
        <td>
            源于Google
        </td>
    </tr>
    <tr>
        <td>
            Flat&nbsp;Buffers
        </td>
        <td>
            <a href="https://github.com/google/flatbuffers">https://github.com/google/flatbuffers</a> 
        </td>
        <td>
            针对游戏开发的，高效的跨平台序列化库，相比Proto&nbsp;Buffers开销更小，因为Flat&nbsp;Buffers没有解析过程
        </td>
    </tr>
    <tr>
        <td>
            Protocol&nbsp;Buffers
        </td>
        <td>
            <a href="http://code.google.com/p/protobuf/">http://code.google.com/p/protobuf/</a> 
        </td>
        <td>
            Google公司开发的一种数据描述语言，类似于XML能够将结构化数据序列化，可用于数据存储、通信协议等方面。它不依赖于语言和平台并且可扩展性极强。
        </td>
    </tr>
    <tr>
        <td>
            Consistent&nbsp;Hashing
        </td>
        <td>
        </td>
        <td>
            1997年由麻省理工学院提出,目标是为了解决因特网中的热点（Hot&nbsp;spot）问题，初衷和CARP十分类似，基本解决了在P2P环境中最为关键的问题——如何在动态的网络拓扑中分布存储和路由。
        </td>
    </tr>
    <tr>
        <td>
            BloomFilter
        </td>
        <td>
        </td>
        <td>
            布隆过滤器，1970年由布隆提出，是一个很长的二进制矢量和一系列随机映射函数，可以用于检索一个元素是否在一个集合中，优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。
        </td>
    </tr>
    <tr>
        <td>
            搜索引擎
        </td>
        <td>
            Nutch
        </td>
        <td>
            <a href="https://nutch.apache.org/">https://nutch.apache.org/</a> 
        </td>
        <td>
            开源Java&nbsp;实现的搜索引擎，诞生Hadoop的地方。
        </td>
    </tr>
    <tr>
        <td>
            Lucene
        </td>
        <td>
            <a href="http://lucene.apache.org/">http://lucene.apache.org/</a> 
        </td>
        <td>
            一套信息检索工具包，但并不包含搜索引擎系统，它包含了索引结构、读写索引工具、相关性工具、排序等功能。
        </td>
    </tr>
    <tr>
        <td>
            SolrCloud
        </td>
        <td>
        </td>
        <td>
            基于Solr和Zookeeper的分布式搜索，&nbsp;Solr4.0&nbsp;的核心组件之一，主要思想是使用&nbsp;Zookeeper&nbsp;作为集群的配置信息中心
        </td>
    </tr>
    <tr>
        <td>
            Solr
        </td>
        <td>
            <a href="https://lucene.apache.org/solr/">https://lucene.apache.org/solr/</a> 
        </td>
        <td>
            Solr是基于Lucene的搜索。
        </td>
    </tr>
    <tr>
        <td>
            ElasticSearch
        </td>
        <td>
            <a href="http://www.elasticsearch.org/
http://www.elasticsearch.cn/">http://www.elasticsearch.org/<br clear="all">
http://www.elasticsearch.cn/</a> 
        </td>
        <td>
            开源的（Apache2协议），分布式的，RESTful的，构建在Apache&nbsp;Lucene之上的的搜索引擎。
        </td>
    </tr>
    <tr>
        <td>
            SenseiDB
        </td>
        <td>
            <a href="http://senseidb.com">http://senseidb.com</a> 
        </td>
        <td>
            Linkin公司开发的一个开源分布式实时半结构化数据库，在全文索引的基础封装了Browse&nbsp;Query&nbsp;Language&nbsp;(BQL，类似SQL)的查询语法。
        </td>
    </tr>
    <tr>
        <td>
            数据挖掘
        </td>
        <td>
            Mahout
        </td>
        <td>
            <a href="http://mahout.apache.org/">http://mahout.apache.org/</a> 
        </td>
        <td>
            Hadoop成员，目标是建立一个可扩展的机器学习库
        </td>
    </tr>
    <tr>
        <td>
            Iaas
        </td>
        <td>
            OpenStack
        </td>
        <td>
            <a href="https://www.openstack.org/">https://www.openstack.org/</a> 
        </td>
        <td>
            美国国家航空航天局和Rackspace合作研发的，以Apache许可证授权云平台管理的项目，它不是一个软件。这个项目由几个主要的组件组合起来完成一些具体的工作，旨在为公共及私有云的建设与管理提供软件的开源项目。6个核心项目：Nova（计算，Compute），Swift（对象存储，Object），Glance（镜像，Image），Keystone（身份，Identity），Horizon（自助门户，Dashboard），Quantum&nbsp;&amp;&nbsp;Melange（网络&amp;地址管理），另外还有若干社区项目，如Rackspace（负载均衡）、Rackspace（关系型数据库）。
        </td>
    </tr>
</tbody></table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 CLI 新建 GitHub 仓库]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/16/create-and-initialize-repo-on-github/"/>
    <updated>2015-01-16T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/16/create-and-initialize-repo-on-github</id>
    <content type="html"><![CDATA[<blockquote>
<p><em><strong>GitHub does not provide shell access !</strong></em></p>
</blockquote>

<p>用过 GitHub 的都知道，一般通过它的网页接口来创建新的仓库 Repository。<br>
由于 GitHub 不提供 <a href="https://help.github.com/articles/generating-ssh-keys/">Shell Access</a> 的权限，所以无法通过普通的终端命令来新建 Repository。</p>

<p>那么，有没有什么办法能利用 CLI 来新建 Repository 呢？</p>

<p>其实，我们可以利用 GitHub 提供 <a href="https://developer.github.com/v3/repos/#create">Repository API</a> 来做到。API 告诉我们可以通过发送 HTTP 请求来新建仓库，显然 <code>git</code> 命令无法使用，但是可以利用 <code>curl</code> 这个工具做到。</p>

<h2>GitHub API 新建远程 Repository</h2>

<p>GitHub Create Repository API 规范：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">POST /user/repos

# Input data example:
{
  &quot;name&quot;: &quot;Hello-World&quot;,
  &quot;description&quot;: &quot;This is your first repository&quot;,
  &quot;homepage&quot;: &quot;https://github.com&quot;,
  &quot;private&quot;: false,
  &quot;has_issues&quot;: true,
  &quot;has_wiki&quot;: true,
  &quot;has_downloads&quot;: true
}
</code></pre></div>
<!--more-->

<h3>1、CLI 新建 Repository</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># GitHub Account: alfred</span>
<span class="c"># New repository name: test</span>

curl -u <span class="s1">&#39;alfred&#39;</span> -d <span class="s1">&#39;{&quot;name&quot;:&quot;test&quot;, &quot;description&quot;:&quot;This project is a test&quot;}&#39;</span> https://api.github.com/user/repos

<span class="c"># &quot;-u&quot;:     specifies the user name and password to use for server authentication</span>
<span class="c"># &quot;-d&quot;:     allows you to send POST data with the request</span>
<span class="c"># &quot;name&quot;:   the only POST data required; I like to also include &quot;description&quot;</span>

<span class="c"># git remote add origin https://github.com/alfred/test.git</span>
<span class="c"># git remote add origin git@github.com:alfred/test.git</span>
<span class="c">#    add definition for location and existance of connected (remote) repo on github</span>
<span class="c">#    &quot;origin&quot; is a default name used by git for where the source came from; technically didn&#39;t come from github, but now the github repo will be the source of record</span>
<span class="c">#    &quot;git@github.com:alfred&quot; is a ssh connection that assumes you have already setup a trusted ssh keypair with github.</span>
<span class="c"># git push origin master</span>
</code></pre></div>
<h3>2、初始化 Repository</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># Creates a directory for your project called &quot;test&quot; in your user directory</span>
mkdir ~/test
<span class="c"># Changes the current working directory to your newly created directory</span>
<span class="nb">cd</span> ~/test
<span class="c"># create a file to commit, named README.md</span>
touch README.md
<span class="c"># Sets up the necessary Git files</span>
git init
<span class="c"># Stages your README.md file, adding it to the list of files to be committed</span>
git add README.md
<span class="c"># Commits your files, adding the message</span>
git commit -m <span class="s1">&#39;first initial commit for master branch&#39;</span>
<span class="c"># Creates a remote named &quot;origin&quot; pointing at your GitHub repository</span>
git remote add origin https://github.com/alfred/test.git
<span class="c"># Sends your commits in the &quot;master&quot; branch to GitHub</span>
git push -u origin master
</code></pre></div>
<p>方便起见，写了个 Bash 脚本 <strong><a href="/media/documents/githubrepo.sh">githubrepo.sh</a></strong> 专门做上面的那些事情，用法：<br>
<code>bash githubrepo.sh repo-name</code></p>

<h3>3、可能出现的问题</h3>

<p><strong>[A]:</strong> 在执行 <code>$ git remote add origin git@github.com:alfred/test.git</code></p>

<p>错误提示：<code>fatal: remote origin already exists.</code></p>

<p>解决办法：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># 先删除存在的旧的 remote</span>
<span class="nv">$ </span>git remote rm origin
<span class="c"># 然后添加新的 remote</span>
<span class="nv">$ </span>git remote add origin git@github.com:alfred/test.git

<span class="c"># 或者直接重设 remote 的 URL</span>
<span class="nv">$ </span>git remote <span class="nb">set</span>-url origin git@github.com:alfred/test.git
</code></pre></div>
<p><strong>[B]:</strong> 在执行 <code>$ git push origin master</code></p>

<p>错误提示：<code>error:failed to push som refs to......</code></p>

<p>解决办法：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># 先把远程服务器github上面的文件拉下来，再push 上去</span>
<span class="nv">$ </span>git pull origin master
</code></pre></div>
<h3>4、参考/扩展</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/2423777/is-it-possible-to-create-a-remote-repo-on-github-from-the-cli-without-ssh">Is it possible to create a remote repo on GitHub from the CLI without SSH</a></li>
<li><a href="http://hub.github.com/">Hub - excellent tool for GitHub</a></li>
<li><a href="https://github.com/dderiso/gitter">One script for creating, migrating, and updating repos on GitHub &amp; BitBucket</a></li>
</ul>

<h2>删除 GitHub Repository</h2>

<p>同样，利用 API 并通过 <code>curl</code> 命令发送 “<strong>DELETE</strong>” 请求来实现删除 GitHub 仓库。</p>

<p>GitHub Delete Repository API 规范：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">DELETE /repos/:owner/:repo
</code></pre></div>
<p>在系统终端输入下面命令，向指定的 URL 发送删除请求：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># curl -X &quot;DELETE&quot; http://www.url.com/page</span>

curl -u <span class="s1">&#39;alfred&#39;</span> -X <span class="s1">&#39;DELETE&#39;</span> https://api.github.com/repos/alfred/test
</code></pre></div>
<h2>GitHub SSH 帮助</h2>

<p>我们可以使用 GitHub for Windows 来向 GitHub 传输数据，可以从其他仓库（Subversion、Mercurial 或者 TFS project）导入数据初始化 GitHub 仓库，还可以像上面一样使用 <a href="http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">Git 的协议</a>。</p>

<p><img src="/media/pictures/github-setup.png" alt="GitHub Repository Setup" title="GitHub Repository Quick Setup"></p>

<h3>1、GitHub 两种协议</h3>

<p>GitHub 支持两种协议来传输数据：<strong>HTTPS</strong> 协议和 <strong>SSH</strong> 协议。</p>

<ul>
<li><strong>Connecting over HTTPS (recommended)</strong><br>
If you <a href="https://help.github.com/articles/which-remote-url-should-i-use#cloning-with-https-recommended">clone with HTTPS</a>, you can <a href="https://help.github.com/articles/caching-your-github-password-in-git">cache your GitHub password in Git</a> using a credential helper.<br>
e.g. <code>https://github.com/alfred/test.git</code></li>
<li><strong>Connecting over SSH</strong><br>
If you <a href="https://help.github.com/articles/which-remote-url-should-i-use#cloning-with-ssh">clone with SSH</a>, you must <a href="https://help.github.com/articles/generating-ssh-keys/">generate SSH keys</a> on each computer you use to push or pull from GitHub.<br>
e.g. <code>git@github.com:alfred/test.git</code> or <code>ssh://git@github.com/alfred/test.git</code></li>
</ul>

<p>如果本地仓库使用 HTTPS 协议，可以保存 GitHub 密码，避免每次 push 都要认证，看<a href="/blog/2014/11/23/disable-login-each-git-push/">这篇文章</a>的说明；而如果使用 SSH 协议传输数据，那么需要在本地生成新的 SSH key，并与 GitHub 账户关联起来。操作方法参见 GitHub 帮助文档 <a href="https://help.github.com/articles/generating-ssh-keys/">Generating SSH keys</a> 或者博主写的另一篇文章内的<a href="/blog/2014/12/05/github-pages/">中文说明</a>。</p>

<h3>2、SSH 访问自动认证授权</h3>

<p>使用 SSH 也有个问题，就是每次 pull 或 push 时，都要求输入 SSH key 的密码。我们可以通过 <code>ssh-agent</code> 记住密码自动认证：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>ssh-agent bash
<span class="nv">$ </span>ssh-add 
Enter passphrase <span class="k">for</span> /home/alfred/.ssh/id_rsa: 
Identity added: /home/alfred/.ssh/id_rsa <span class="o">(</span>/home/alfred/.ssh/id_rsa<span class="o">)</span>
</code></pre></div>
<p>或者：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># start the ssh-agent in the background</span>
ssh-agent -s
<span class="c"># Agent pid 59566</span>
ssh-add ~/.ssh/id_rsa
</code></pre></div>
<p>如果报出这个错误：<code>Could not open a connection to your authentication agent</code>，那么：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># start the agent for MsysGit or Cygwin Bash</span>
<span class="nb">eval</span> <span class="sb">`</span>ssh-agent -s<span class="sb">`</span>
ssh-add ~/.ssh/id_rsa

<span class="c"># test if the identity key is added</span>
ssh-add -l
</code></pre></div>
<p>下面是解释：</p>

<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Secure_Shell">SSH</a> private-keys are usually stored encrypted on the computers they are stored on. A pass-phrase is used to decrypt them when they are to be used. Since most people use <a href="http://funkaoshi.com/blog/SSH">SSH public-private key-pairs to get around typing in passwords all the time</a>, the <a href="http://www.securityfocus.com/infocus/1812">ssh-agent</a> daemon exists to store decrypted private-keys you plan on using in a given session. The thing most people get tripped up on when using ssh-agent is that what the program outputs, some borne or csh shell commands, needs to be run. It may look like ssh-agent has set some variables for you, but it has in fact done no such thing. If you call ssh-add without processing ssh-agent’s output, it will complain it is unable to open a connection to your authentication agent. The most straightforward way to run ssh-agent on the command line is as follows: <code>eval `ssh-agent`</code>. After doing this, calls to <code>ssh-add</code> should succeed without error.<br>
<em>Reference: <a href="http://funkaoshi.com/blog/could-not-open-a-connection-to-your-authentication-agent">http://funkaoshi.com/blog/could-not-open-a-connection-to-your-authentication-agent</a></em></p>
</blockquote>

<hr>

<p><code>ssh-add</code> 和 <code>ssh</code> 与 ssh agent 通信依赖一个环境变量，如果启动多个命令窗口，或者错误启动，那么 <code>ssh-add</code> 和 <code>ssh</code> 都不能读取环境变量（设置在命令提示符本地）。</p>

<p>如果正在使用 Cygwin，那么参考 <a href="http://blog.killtheradio.net/how-tos/ssh-agent-on-cygwin/">SSH Agent on Cygwin</a>：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># Add to your Bash config file</span>
<span class="nv">SSHAGENT</span><span class="o">=</span>/usr/bin/ssh-agent
<span class="nv">SSHAGENTARGS</span><span class="o">=</span><span class="s2">&quot;-s&quot;</span>
<span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$SSH_AUTH_SOCK&quot;</span> -a -x <span class="s2">&quot;$SSHAGENT&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">eval</span> <span class="sb">`</span><span class="nv">$SSHAGENT</span> <span class="nv">$SSHAGENTARGS</span><span class="sb">`</span>
    <span class="nb">trap</span> <span class="s2">&quot;kill $SSH_AGENT_PID&quot;</span> 0
<span class="k">fi</span>
</code></pre></div>
<p>这样对于每个命令提示符窗口，都会自动启动 ssh-agent。</p>

<p><em>Reference:<br>
<a href="http://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent">http://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最新 Google Hosts 文件]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/11/google-hosts/"/>
    <updated>2015-01-11T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/11/google-hosts</id>
    <content type="html"><![CDATA[<p>最近几天我忽然无法通过第三方工具登陆GMAIL，了解了一下才发现已经成了普遍现象了。使用国内的一些邮箱给GMAIL发邮件可能会丢失邮件，QQ邮箱反应比较快似乎没有这个问题，保险起见，给GMAIL发邮件最好还是使用GMAIL发送，另外国外很多大学虽然用的是学校域名的邮箱，实质好像也是经过了GMAIL，因此用国内的一些邮箱发送信件可能会导致信件丢失。</p>

<p>要登录GMAIL现在似乎只能是改HOSTS，VPN或者SSH等一些技术手段了。</p>

<p>这里提供我自己收集的一些HOSTS下载链接，12月30号测试可用，朋友们也可以自行搜索获取。</p>

<!--more-->

<p>hosts文件位置：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">C:\Windows\System32\drivers\etc
</code></pre></div>
<p>搜索google hosts。</p>

<ul>
<li>google hosts 2015 持续更新：<a href="http://www.360kb.com/kb/2_122.html">http://www.360kb.com/kb/2_122.html</a><br></li>
<li>2014-11-07 更新的hosts：下载地址1就行。。<br>
<a href="http://blog.sina.com.cn/s/blog_62fbf02e0102vewg.html">http://blog.sina.com.cn/s/blog_62fbf02e0102vewg.html</a><br>
<a href="http://blog.sina.com.cn/s/blog_6fa5aa4a01010wel.html">http://blog.sina.com.cn/s/blog_6fa5aa4a01010wel.html</a><br></li>
<li><strong>权威hosts更新</strong>：(<del><a href="http://serve.netsh.org/pub/gethosts.php">http://serve.netsh.org/pub/gethosts.php</a></del> 已失效)<br>
<a href="http://serve.netsh.org/pub/ipv4-hosts/">http://serve.netsh.org/pub/ipv4-hosts/</a></li>
</ul>

<p>要判断一个hosts文件是否可用比较简单的办法是把文件里的IP放在浏览器里看看是否能打开谷歌即可。</p>

<p>也可通过第三方客户端结合hosts来解决：<br>
通过设置Gmail的IMAP、POP、SMTP的Hosts文件，将如下内容加入Hosts之后，邮件客户端重启后即可重新使用Gmail邮件。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">173.194.65.108 imap.gmail.com
173.194.65.108 pop.gmail.com
173.194.193.108 smtp.gmail.com
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讲解 Markdown]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/10/markdown-syntax-documentation/"/>
    <updated>2015-01-10T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/10/markdown-syntax-documentation</id>
    <content type="html"><![CDATA[<blockquote>
<p><em>Markdown is a text-to-HTML conversion tool for web writers.<br>
Markdown allows you to write using an <strong>easy-to-read, easy-to-write</strong> plain text format, then convert it to structurally valid XHTML (or HTML).</em>
<div style="text-align:right;margin-top:5px;"> –  <a href="http://daringfireball.net/projects/markdown/"><b>John Gruber</b></a></div></p>
</blockquote>

<h2>开始用 Markdown 写博客</h2>

<p>让博客程序写文章时支持 Markdown 语法：用过 GitHub 的同学对 Markdown 都不陌生，对比常见的富文本编辑器，它至少有以下优点：</p>

<ul>
<li>纯文本，兼容性极强，可以用所有文本编辑器打开</li>
<li>格式转换方便，Markdown 可以轻松转换为各种格式</li>
<li>让你专注于文字而不是排版</li>
<li>Markdown 的标记语法有极好的可读性</li>
<li>在 Markdown 中，依然可以使用 html 标记</li>
</ul>

<p>对于喜欢贴代码的程序员来说，GFM(GitHub Flavored Markdown) 定义的<a href="https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks">代码块语法</a>方便好用。Sublime Text 对 Markdown 的语法高亮也支持得也很好，一目了然。Web 上也有强大的 <a href="http://codemirror.net/mode/gfm/index.html">CodeMirror</a> 支持 Markdown 的编写。</p>

<!--more-->

<p><img src="/media/pictures/markdown-syntax-documentation/markdown.png" alt="markdown"></p>

<p>解析 Markdown 语法，有两个库：运行于浏览器和 Nodejs 的 JavaScript 库 <a href="https://github.com/chjj/marked">marked</a>，和 Python 库 <a href="http://pythonhosted.org/Markdown/">Markdown</a>。它们除了支持 Markdown 的<a href="http://daringfireball.net/projects/markdown/syntax">基本语法</a>外，还支持表格、代码块、TOC(Table Of Contents) 等扩展功能。</p>

<p>最近，身边不少技术强爱折腾的朋友都把自己博客换成 Nodejs + Markdown 了。如果不想自己开发，也可以用 <a href="http://jekyllrb.com/">Jekyll</a> 或 <a href="http://octopress.org/">Octopress</a> 等系统。它们都支持 Markdown，都能很好的跟 github 整合。</p>

<p>还有一家叫 <a href="http://postach.io/">postach.io</a> 的网站比较有趣，在这里写博客的方式很特别：绑定 <a href="http://www.evernote.com/">Evernote</a> 帐号，在指定记事本新建 Note 并添加名为 published 的 tag，同步即可。当然，postach.io 也支持 Markdown。</p>

<p>现在 GitHub 和 GitCafe，都很容易将项目变成博客，还支持绑定域名、本地搭建服务等高级功能，可以去官网了解。</p>

<h2>Markdown 语法说明</h2>

<h3>语法文档</h3>

<p><img src="/media/pictures/markdown-syntax-documentation/markdownsheet.png" alt="Markdown Cheat Sheet" title="markdown cheat sheet"></p>

<p><strong>标准 Markdown 语法</strong>: <a href="http://alfred-sun.github.io/markdown-syntax-zhtw/">翻译版</a><br>
官方 Markdown 语法: <a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a><br>
一份语法速查表: <a href="/media/documents/markdown-syntax-cheat-sheet.pdf">Markdown语法速查表</a><br>
GFM Syntax Guide: an <a href="/media/pictures/markdown-syntax-documentation/Github%20Flavored%20MarkDown.jpg">overview of Markdown syntax</a> used anywhere on GitHub.com<br>
另一份别人整理的 Markdown/GFM 语法: <a href="/media/documents/MarkDown%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80.pdf">MarkDown轻量级标记语言</a></p>

<h3>Personal Notes</h3>

<ol>
<li><p>嵌套的列表：<br>
Create nested lists by indenting list items by two spaces.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1. Item 1
  1. A corollary to the above item.
  2. Yet another point to consider.
2. Item 2
  * A corollary that does not need to be ordered.
    * This is indented four spaces, because it&#39;s two spaces further than the item above.
    * You might want to consider making a new list.
3. Item 3
</code></pre></div></li>
<li><p>加强的代码块：<br>
行内代码用单个反引号<code>`</code>包住，即可显示原有格式的文本。<br>
跨行代码块，可以不用缩进4个空格，使用3个反引号<code>```</code>包住文本区块(Fenced code blocks)：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Check out this neat program I wrote:

```
x = 0
x = 2 + 2
what is x
```
</code></pre></div>
<p>这样Code blocks更容易语法高亮，直接在标记后接语言识别符。例如，高亮一段 Ruby 代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">```ruby
require &#39;redcarpet&#39;
markdown = Redcarpet.new(&quot;Hello World!&quot;)
puts markdown.to_html
```
</code></pre></div></li>
<li><p>表格支持：<br>
建表格使用连字符<code>-</code>和竖线<code>|</code>，区分开表头和单元格：</p>

<pre>
First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell
</pre>

<p>想好看一些的话，也可以在开头和结尾加竖线：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
</code></pre></div>
<p>顶部的连字符无需一定匹配表头文本的长度（但必须保证<strong>至少3个连字符</strong>）；也可以添加行内的Markdown语法文本，如链接、加粗、删除线等：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">| Name | Description          |
| ------------- | ----------- |
| Help      | ~~Display the~~ help window.|
| Close     | _Closes_ a window     |
</code></pre></div>
<p>表头行使用冒号<code>:</code>实现表格内列的文本对齐方式：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">| Left-Aligned  | Center Aligned  | Right Aligned |
| :------------ |:---------------:| -----:|
| col 3 is      | some wordy text | $1600 |
| col 2 is      | centered        |   $12 |
| zebra stripes | are neat        |    $1 |
</code></pre></div>
<p>冒号在最左边表示该列文本左对齐，最右边表示文本右对齐，两边都加冒号表示居中对齐文本。</p></li>
<li><p>LaTeX 公式   </p>

<h4>示例:</h4>

<p><img src="/media/pictures/markdown-syntax-documentation/MathJax.png" alt="MathJax LaTeX demo"></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">// $$ 表示整行公式：

$$\sum_{i=1}^n a_i=0$$

$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$
</code></pre></div>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax Tutorial</a> 参考更多使用方法。<br>
MathJax 文档：<a href="http://docs.mathjax.org/en/latest/mathjax.html"><em>What is MathJax ?</em></a></p>

<blockquote style="margin-left:0px;"><p><a href="http://www.mathjax.org" title="Beautiful math in all browsers" target="_blank" class="external"><strong>MathJax</strong></a> is an open-source JavaScript display engine for mathematics(<a href="http://www.latex-project.org" title="LaTeX – A document preparation system" target="_blank" class="external">LaTeX</a>, <a href="http://www.w3.org/TR/MathML3" target="_blank" class="external">MathML</a>, and <a href="http://www1.chapman.edu/%7Ejipsen/mathml/asciimath.html" target="_blank" class="external">AsciiMath</a> notation) that works in all modern browsers.</p></blockquote>

<!--[**MathJax**][MathJax_] is an open-source JavaScript display engine for mathematics([LaTeX][], [MathML][], and [AsciiMath][] notation) that works in all modern browsers.--></li>
<li><p>流程图   </p>

<h4>示例:</h4>

<p style="
margin-top: -25px;
"><img src="/media/pictures/markdown-syntax-documentation/flowchart.svg" alt="flowchart.js demo"></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">```flow
st=&gt;start: Start:&gt;http://alfred-sun.github.io
io=&gt;inputoutput: verification
op=&gt;operation: Your Operation
cond=&gt;condition: Yes or No?
sub=&gt;subroutine: Your Subroutine
e=&gt;end:&gt;https://github.com/adrai/flowchart.js

st-&gt;io-&gt;op-&gt;cond
cond(yes)-&gt;e
cond(no)-&gt;sub-&gt;io
```
</code></pre></div>
<h4>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a> <em>(View on <a href="https://github.com/adrai/flowchart.js" title="flowchart.js"><strong>GitHub</strong></a>)</em></h4></li>
<li><p>序列图   </p>

<h4>示例:</h4>

<p><img src="/media/pictures/markdown-syntax-documentation/diagram.svg" alt="js-sequence-diagrams demo"></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">```seq
Andrew-&gt;China: Says Hello
Note right of China: China thinks\nabout it
China--&gt;Andrew: How are you?
Andrew-&gt;&gt;China: I am good thanks!
```
</code></pre></div>
<h4>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a> <em>(View on <a href="https://github.com/bramp/js-sequence-diagrams" title="js-sequence-diagrams"><strong>GitHub</strong></a>)</em></h4></li>
<li><p>注脚<br>
使用 <code>[^keyword]</code> 表示注脚。例如：</p>

<p>这是第一个注脚<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>的样例。<br>
这是第二个注脚<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup>的样例。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">这是第一个注脚[^footnote1]的样例。   
这是第二个注脚[^footnote2]的样例。
...
[^footnote1]: 这是一个 *注脚* 的 **文本**。
[^footnote2]: 这是另一个 *注脚* 的 **文本**。
</code></pre></div></li>
</ol>

<h2>一些 Markdown 参考</h2>

<p>Markdown是一种网络书写语言，其目标是实现易读易写，且兼容HTML语言。Markdown的流行得益于Github和Stackoverflow，Stackoverflow的代码块以及Github上的README.md文件格式都是通过Markdown表现的。另外还有支持各大浏览器的写邮件的Markdown插件：<a href="https://github.com/adam-p/markdown-here">Markdown Here</a></p>

<p>使用Markdown可以书写自由书籍，关于此，您可以参看文章<a href="http://www.ituring.com.cn/article/828">用Markdown来写自由书籍-开源技术的方案</a>，<a href="http://www.larrycaiyu.com/2011/12/31/ebook-by-markdown.html">开源书和开源技术-Markdown篇</a>一文也介绍了一些Markdown与开源书和开源技术之间的渊源。已经有一些开源书籍使用Markdown书写了，亚嵌教育的开源书籍<a href="http://www.lumit.org/LASO/">源码开放学ARM</a>、蒋鑫老师的<a href="http://www.worldhello.net/gotgithub/">GotGithub</a>一书，这些开源书籍都给学习者提供很大帮助。Markdown书写已经是一种开源精神体现。好了，既然Markdown与自由书写这么默契，我们怎么用Markdown来写自己的README.md，自己的博客甚至自己的开源书籍呢？</p>

<p>这里有一份翻译的<a href="http://wowubuntu.com/markdown/">Markdown的语法</a>，从<a href="https://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md">这里</a>看可能更直观。Markdown语法是如此简单，以至于还不到1000行就描述完了。初学者您可以参考<a href="http://jianshu.io/p/q81RER">献给写作者的Markdown新手指南</a>。Github的Markdown语法大部分都与传统Markdown语法一样，可以看看<a href="https://help.github.com/articles/markdown-basics">markdown-basics</a>，但也有些扩展，扩展内容在文档<a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown</a>中。</p>

<p>在使用Markdown过程中，您也许还需要一个实时显示Markdown文档预览的工具，这方面的工具有很多，这里推荐几个在线的Markdown文档编辑器：</p>

<ol>
<li><strong>Dillinger</strong>:       <a href="http://dillinger.io/">http://dillinger.io/</a></li>
<li><strong>StackEdit</strong>:       <a href="https://stackedit.io/">https://stackedit.io/</a></li>
<li><strong>印象笔记</strong>:        <a href="http://maxiang.info/">http://maxiang.info/</a></li>
</ol>

<p>“<a href="http://www.jianshu.com/p/51474fb08d04">免费Markdown写作工具简评</a>”一文提供了有关于Markdown文档编辑器的更多信息。
谷歌浏览器貌似也有<a href="https://github.com/volca/markdown-preview">Markdown的预览插件</a>，这样您就可以用记事本编辑，用浏览器预览了。
印象笔记也有Chrome的扩展，可在商店搜素“马克飞象”。</p>

<p>我们说Markdown是为了书写自由电子书，那么Markdown如何生成pdf或html格式的文档呢？我们可以借助Markdown文档编辑器的功能，StackEdit 就能胜任，使用StackEdit左上角的菜单，&quot;Save As&hellip;&ldquo;就可以做到。</p>

<p>还有2款集编辑与Markdown预览于一身的不错工具 <a href="http://www.everedit.net">Everedit</a> 和 <strong><a href="https://www.zybuluo.com/mdeditor">Cmd Markdown</a></strong>，国产的哦..</p>

<p>最后，你可以在Github上找到这样一篇文章: <a href="https://github.com/Alfred-Sun/Markdown/blob/master/README.md" title="彪悍的人生不需要解释">MARKDOWN是什么</a></p>

<!--http://jianshu.io/p/pgN9Rb-->

<h2>Markdown 各种扩展</h2>

<h3>PHP Markdown Extra</h3>

<p>Markdown的php解析与实现，并且增加了许多有用的扩展。<a href="https://michelf.ca/projects/php-markdown/extra/">PHP Markdown Extra</a>其中几个比较重要的改进有：</p>

<ul>
<li>支持在html块元素中插入markdown语法</li>
<li>支持为一些元素添加id或class，比如为header添加id属性，用带锚点的链接导航。例如：</li>
</ul>

<div class="highlight"><pre><code class="language-html" data-lang="html">[Link back to header 1](#header1)

Header 1               {#header1}
========

## Header 2 ##         {#header2}</code></pre></div>

<p>支持元素包括<code>header</code>、<code>code block</code>、<code>link</code>、<code>image</code></p>

<ul>
<li>支持将代码块用`或者~包起来，这样可以避免一些二义，还可以为代码块添加id或class</li>
</ul>

<div class="highlight"><pre><code class="language-html" data-lang="html">~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.html #example-1}
<span class="nt">&lt;p&gt;</span>paragraph <span class="nt">&lt;b&gt;</span>emphasis<span class="nt">&lt;/b&gt;</span>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code></pre></div>

<ul>
<li>支持手写的表格</li>
</ul>

<div class="highlight"><pre><code class="language-html" data-lang="html">| Function name | Description                    |
| ------------- | ------------------------------ |
| `help()`      | Display the help window.       |
| `destroy()`   | **Destroy your computer!**     |</code></pre></div>

<ul>
<li>支持<code>dl</code>和<code>dt</code>在markdown中的对应语法</li>
<li>支持脚注引用</li>
</ul>

<pre><code>That's some text with a footnote.[&#94;1]

[&#94;1&#93;: And that's the footnote.
</code></pre>

<ul>
<li>支持专有名词<code>abbr</code></li>
<li>避免下划线出现在单词中间，导致斜体输出</li>
</ul>

<h3>Maruku</h3>

<p>在 &quot;始作俑者 PHP Markdown Extra&rdquo; 后，很多基于 Ruby 的 Markdown 解释器开始浮现。其中，<a href="https://github.com/bhollis/maruku">Maruku</a> 号称：</p>

<ul>
<li>支持原生Markdown</li>
<li>支持所有PHP Markdown Extra的特性</li>
<li>支持新的元数据语法，实际上就是给元素添加属性的能力</li>
<li>支持<a href="https://github.com/bhollis/maruku/blob/master/docs/math.md">公式格式</a>输出</li>
<li>支持自动生成 <strong><a href="https://golem.ph.utexas.edu/%7Edistler/maruku/#toc-generation">Table of Contents</a></strong></li>
</ul>

<p>Maruku的语法详见<a href="https://github.com/bhollis/maruku/blob/master/docs/markdown_syntax.md">这里</a></p>

<p>不过，该项目已经停止维护了。</p>

<h3>Kramdown</h3>

<p>同样是ruby开发的解释器，<a href="http://kramdown.gettalong.org/quickref.html">kramdown</a>吸取了Maruku几乎所有的特点，功能更为强大。其中有特点的功能有：</p>

<ol>
<li>改进了一些二义语法</li>
<li>引入EOB标记<code>^</code>作为块元素的分隔符</li>
<li>手写table的语法更加强大一些，支持table中的header和footer</li>
<li>同样支持ALD(Attribute List Definitions属性列表定义)</li>
<li>同样支持 <strong><a href="http://kramdown.gettalong.org/converter/html.html#math-support">LaTeX</a></strong> 编辑显示支持</li>
<li>还支持注释，以及在转化时配置一些转化选项</li>
</ol>

<p><a href="https://help.github.com/articles/migrating-your-pages-site-from-maruku">Github-Page 推荐使用这个解释器</a></p>

<h3>RDiscount</h3>

<p><a href="http://dafoster.net/projects/rdiscount/">RDiscount</a>又是一个基于Ruby开发的解释器，不过它是基于<a href="http://www.pell.portland.or.us/%7Eorc/Code/discount/">Discount</a>的语法移植的，所以语法规则需要参考<a href="http://www.pell.portland.or.us/%7Eorc/Code/discount/#Language.extensions">Discount</a>。其语法支持几种上面没有提到过的特性：</p>

<ul>
<li>文本居中，即输出<code>&lt;center&gt;</code></li>
<li>图片大小定义<code>![dust mite](http://dust.mite =150x150)</code></li>
<li>输出<code>alpha</code>列表：<code>&lt;ol type=&#39;a&#39;&gt;&lt;/ol&gt;</code></li>
</ul>

<h3>Redcarpet</h3>

<p><a href="https://github.com/vmg/redcarpet">Redcarpet</a>是一个转化库，可以在标准Markdown的基础上，配置一些额外的功能：</p>

<ul>
<li>单词中间的<code>_</code>不处理</li>
<li>转化PHP-Markdown风格的手写表格</li>
<li>转化PHP-Markdown风格的带包含的代码块，也可禁用标准markdown的代码块语法</li>
<li>自动link生成</li>
<li>删除线支持：<code>~~good~~</code></li>
<li>高亮标签<code>&lt;mark&gt;&lt;/mark&gt;</code>通过<code>==highlighted==</code>输出</li>
<li>引用标签<code>&lt;q&gt;&lt;/q&gt;</code>通过<code>&quot;quote&quot;</code>输出</li>
<li>转化PHP-Markdown风格脚注</li>
<li>一些二义性的约束支持</li>
</ul>

<h3>Github 支持</h3>

<p>Github Page 对于上述的基于 Ruby 的 markdown 是支持的，从<a href="https://pages.github.com/versions/">这里</a>可以看到。另外，Github 对于 Issue、comments、pull request descriptions 等，还定义了 GFM(<a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown</a>)，其中的语法一般基本来源于上面的提到的东西。除此之外，GitHub 还支持一些额外的特性：</p>

<ul>
<li>支持把列表变成带勾选框的任务列表</li>
</ul>

<div class="highlight"><pre><code class="language-html" data-lang="html">- [x] @mentions, #refs, [links](), **formatting**, and <span class="nt">&lt;del&gt;</span>tags<span class="nt">&lt;/del&gt;</span> are supported 
- [x] list syntax is required (any unordered or ordered list supported) 
- [x] this is a complete item 
- [ ] this is an incomplete item</code></pre></div>

<ul>
<li>站内对分支、问题、用户等对象的直接引用</li>
</ul>

<pre><code>* SHA: <font color="red">a5c3785ed8d6a35868bc169f07e40e889087fd2e</font>
* User@SHA: <font color="yellow">jlord@a5c3785ed8d6a35868bc169f07e40e889087fd2e</font>
* User/Repository@SHA: <font color="red">jlord/sheetsee.js@a5c3785ed8d6a35868bc169f07e40e889087fd2e</font>
* #Num: <font color="yellow">#26</font>
* GH-Num: <font color="red">GH-26</font>
* User#Num: <font color="yellow">jlord#26</font>
* User/Repository#Num: <font color="red">jlord/sheetsee.js#26</font>
</code></pre>

<ul>
<li>表情 <a href="http://www.emoji-cheat-sheet.com/">Emoji</a></li>
<li>支持部分 HTML 标签 (<a href="https://github.com/github/markup/tree/master#html-sanitization">GitHub Markup</a>)</li>
</ul>

<h3>MultiMarkdown</h3>

<p>MMD(<a href="http://fletcherpenney.net/multimarkdown/">MultiMarkdown</a>) 是 C 实现的 Markdown 解析器，支持几乎任何OS平台；<br>
Markdown 语法的超集，不仅加强了 PHP Markdown Extra 一些功能，如对表格、注脚、引用、公式的支持，而且能转换输出更多类型的文档：HTML，LaTeX，PDF，ODF，RTF，甚至是 MS Word。</p>

<p>The many output formats of MultiMarkdown：
<img src="/media/pictures/markdown-syntax-documentation/OPML-MMD-Map.png" alt="multiple output formats" title="Example: MultiMarkdown output formats" style="background-color:#222;"></p>

<blockquote>
<ul>
<li>最初的 MMD(MultiMarkdown v2) 改自 Markdown.pl Perl脚本；<br></li>
<li>MultiMarkdown v3(aka <strong>peg-multimarkdown</strong>) 在 John MacFarlane 的 <a href="https://github.com/jgm/peg-markdown">peg-markdown</a> 基础上构建的，其核心的 PEG(parsing expression grammar) 提高了 MMD 可靠性；<br></li>
<li>最新的 <a href="https://github.com/fletcher/MultiMarkdown-4/">MultiMarkdown v4</a> 性能上做了很多优化，完全重写 MMD v3，仅保留了PEG和部分重要的程序，是目前最出色的版本。</li>
</ul>
</blockquote>

<p>其他的特性：</p>

<ul>
<li>支持自定义输出任何 <a href="http://en.wikipedia.org/wiki/XSLT">XSLT</a> 格式的文档</li>
<li>多文件批处理</li>
<li>支持主要OS上的拖拽操作</li>
<li>支持集成进 <a href="http://macromates.com/">TextMate</a></li>
<li><a href="http://www.omnigroup.com/omnioutliner/">OmniOutliner</a> Plugin 使得本地 OmniOutliner 大纲输出为 MDD 文本文件</li>
<li>MMD QuickLook 生成器实现对 MMD 文本或 OS X Finder 找到的 <a href="http://en.wikipedia.org/wiki/OPML">OPML</a> 文件的预览</li>
</ul>

<h3>Pandoc’s Markdown</h3>

<p>以上扩展，某种意义上来讲，并不是针对写作的。开源界传说中的高富帅社区 - <a href="http://www.haskell.org/">Haskell</a>社区，其作品 <a href="http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown">Pandoc</a> 给了我们更好的选择，在多个方面完败 MMD，参考：<a href="https://github.com/jgm/pandoc/wiki/Pandoc-vs-Multimarkdown">Pandoc vs Multimarkdown</a>。</p>

<p>Haskell是什么？一种编程语言。每位资深的开发者学习它，都会有些不知所措，因为，它的编程思路不同于通常意义上类似于C#、Python、Java这些流行的编程语言。它来自一群高智商的开发者的贡献，据说人人有PHD学位，是<a href="http://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E5%BC%8F%E7%B7%A8%E7%A8%8B">函数式编程语言</a>的典范。<a href="http://johnmacfarlane.net/pandoc/">Pandoc</a> 作者<a href="http://johnmacfarlane.net/">John MacFarlane</a>也不例外。</p>

<p>Pandoc 是一个 Haskell 库，一个标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀”。Pandoc 以命令行形式实现与用户的交互，可支持多种操作系统，支持大量的文本类型的输入输出。</p>

<h4>Pandoc支持的标记语言格式</h4>

<table>
<tbody><tr>
<th width="185px">Pandoc 可读取的源格式</th>
<th>Pandoc 可生成的目标格式</th>
</tr>

<tr><td><ul style="margin-bottom:0px;">
<li><a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a></li>
<li><a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html" title="ReStructuredText">reStructuredText</a></li>
<li><a href="http://redcloth.org/textile" title="Textile">textile</a></li>
<li><a href="http://www.w3.org/TR/html40/" title="HTML">HTML</a></li>
<li><a href="http://www.docbook.org/" title="DocBook">DocBook</a></li>
<li><a href="http://www.latex-project.org/" title="LaTeX">LaTeX</a></li>
<li><a href="http://www.mediawiki.org/wiki/Help:Formatting" title="MediaWiki">MediaWiki markup</a></li>
<li><a href="http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules" title="TWiki">TWiki markup</a></li>
<li><a href="http://dev.opml.org/spec2.html" title="OPML">OPML</a></li>
<li><a href="http://www.gnu.org/software/emacs/" title="Emacs">Emacs</a></li>
<li><a href="http://orgmode.org/" title="Org-模式">Org-Mode</a></li>
<li><a href="http://txt2tags.org/" title="Txt2Tags">Txt2Tags</a></li>
<li><a href="http://www.microsoft.com/interop/openup/openxml/default.aspx" title="Microsoft Word docx">Microsoft Word docx</a></li>
<li><a href="http://en.wikipedia.org/wiki/EPUB" title="EPUB">EPUB</a></li>
<li><a href="http://www.haskell.org/haddock/doc/html/ch03s08.html" title="Haddock">Haddock markup</a></li>
</ul></td>

<td><ul style="margin-bottom:0px;">
<li>HTML格式：包括<a href="http://www.w3.org/TR/xhtml1/">XHTML</a>，<a href="http://www.w3.org/TR/html5/">HTML5</a>及HTML slide shows(<a href="http://www.w3.org/Talks/Tools/Slidy">Slidy</a>, <a href="http://lab.hakim.se/reveal-js/">reveal.js</a>, <a href="http://goessner.net/articles/slideous/">Slideous</a>, <a href="http://meyerweb.com/eric/tools/s5/">S5</a>, or <a href="http://paulrouget.com/dzslides/">DZSlides</a>)</li>
<li>文字处理软件格式：包括Microsoft Word docx、OpenOffice/LibreOffice<a href="http://en.wikipedia.org/wiki/OpenDocument" title="ODT">ODT</a>、<a href="http://opendocument.xml.org/" title="OpenDocument XML">OpenDocument XML</a></li>
<li>电子书Ebooks格式：包括EPUB（第2版及第3版）、<a href="http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1" title="FictionBook">FictionBook2</a></li>
<li>技术文档格式：包括<a href="http://www.docbook.org/" title="DocBook">DocBook</a>、<a href="http://www.gnu.org/software/texinfo/" title="GNU TexInfo">GNU TexInfo</a>、<a href="http://www.gnu.org/software/groff/groff.html" title="手册页">Groff man</a> pages、<a href="http://www.haskell.org/haddock/doc/html/ch03s08.html" title="Haddock">Haddock markup</a></li>
<li>页面布局格式：<a href="https://www.adobe.com/content/dam/Adobe/en/devnet/indesign/cs55-docs/IDML/idml-specification.pdf" title="InDesign ICML">InDesign ICML</a></li>
<li>大纲处理标记语言格式：<a href="http://dev.opml.org/spec2.html" title="OPML">OPML</a></li>
<li>TeX格式：包括LaTeX、<a href="http://www.pragma-ade.nl/" title="ConTeXt">ConTeXt</a>、<a href="http://zh.wikipedia.org/wiki/Beamer_(LaTeX)" title="Beamer (LaTeX)">LaTeX Beamer slides</a></li>
<li><a href="http://en.wikipedia.org/wiki/Portable_Document_Format">PDF</a>格式：需要LaTeX支持</li>
<li>轻量级标记语言格式：包括Markdown、reStructuredText、Textile、Org-Mode、MediaWiki markup、<a href="http://www.methods.co.nz/asciidoc/" title="AsciiDoc">AsciiDoc</a>、<a href="https://www.dokuwiki.org/wiki:syntax">DokuWiki markup</a>、Emacs</li>
<li>自定义格式：可使用<a href="http://www.lua.org/" title="Lua">lua</a>自定义转换规则</li>
</ul></td>
</tr></tbody>
</table>

<p>更详细的格式信息可参见项目主页上的<a href="http://johnmacfarlane.net/pandoc/diagram.png">图示</a></p>

<h4>Pandoc for markdown</h4>

<p>Pandoc Markdown是John Gruber markdown 语法的改进和加强版，包含对脚注、上标、下标、自动引用和参考书目、document metadata (title/author/date)、表格、定义型列表、加强的代码块、删除线、内容目录结构、LaTeX公式、HTML区块内的markdown文本等的支持。<br>
这些强化功能可以通过<code>markdown_strict</code>输入输出格式选项来开启或关闭(单独控制某个功能的启用禁用可以使用<code>+EXTENSION</code>或<code>-EXTENSION</code>)，参看 <a href="http://johnmacfarlane.net/pandoc/README.html#options">Pandoc’s markdown</a>。<br>
这里有一份繁体中文翻译版的 <a href="http://pages.tzengyuxio.me/pandoc/">Pandoc 版本 Markdown 語法</a><br>
另一篇简版说明文档：<a href="http://alfred-sun.github.io/markx-pandoc/" title="pandoc.herokuapp.com">Pandoc Markdown写作规范</a></p>

<p>与多数通过正则表达式实现markdown转HTML的工具不同，Pandoc是模块化设计，对于每个输入输出的格式都有单独的一个模块；它含有一组解析指定文本格式的readers和一组转换为目标文本格式的writers。这样，只需添加一个文本格式的reader或者writer模块，就能增加Pandoc对这个格式文本的输入输出支持。</p>

<p>关于Pandoc的安装使用，不愿看英文Guide的可以看看下面这篇文章，通俗易懂。<br>
<a href="http://www.yangzhiping.com/tech/pandoc.html">Markdown写作进阶：Pandoc入门浅谈</a></p>

<h2>结束语</h2>

<p>Markdown纯文本非常简洁，让笔者注重文字而非排版，值得学习使用。然而，目前Markdown文本的解析工具有很多，虽然都支持标准Markdown语法，但各个解析器间语法各有不同，提供的扩展功能也各有千秋。尽管标准语法已经满足大部分写作需求，但是有些时候确实急需某项高级功能实现，就像博主，目前还只用标准语法，特殊的功能只能通过嵌入HTML文本来实现，不仅麻烦，而且直接违背了Markdown读写趋简的宗旨。既然不想被这么多工具的语法搞晕，又想偶尔能使用高级功能，那么，选择一款扩展功能丰富又满足需求的工具，是一个很好的办法。Pandoc是个不错的选择，尤其适用于文献的写作排版，可以节省大量时间，这也作者的编写这个工具的初衷；而且，博主非常喜欢多种文档间转换这个功能。</p>

<p>有了Pandoc，再找个Pandoc编辑器，比如 <a href="https://github.com/vim-pandoc/vim-pandoc">Pandoc Vim</a>、<a href="http://www.sublimetext.com/">Sublime Text</a>或者<a href="https://github.com/textmate/textmate">TextMate</a>，是不是看起来很有Geek范儿&hellip;</p>

<p>更多Pandoc编辑器、插件请参考：<strong><a href="https://github.com/jgm/pandoc/wiki/Pandoc-Extras">Pandoc-Extras</a></strong></p>

<div class="footnotes">
<hr>
<ol>

<li id="fn1">
<p>这是一个 <em>注脚</em> 的 <strong>文本</strong>。&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p>这是另一个 <em>注脚</em> 的 <strong>文本</strong>。&nbsp;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Liquid API 语法文档]]></title>
    <link href="http://alfred-sun.github.io/blog/2015/01/10/jekyll-liquid-syntax-documentation/"/>
    <updated>2015-01-10T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2015/01/10/jekyll-liquid-syntax-documentation</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>如果你只想快速搭建一个GitHub的静态网站，而暂时没有时间来研究 Jekyll 语法的话，建议直接 Fork 别人的主题源码。</p>

<p>当然，阅读一下之前我记录的一些笔记也可以增长一些知识：</p>

<ul>
<li><strong><a href="/blog/2014/12/05/github-pages/">建立 GitHub Pages 静态博客网站</a></strong> 介绍了使用 Jekyll 搭建的 GitHub Pages 操作</li>
<li><strong><a href="http://alfred-sun.github.io/blog/2014/12/16/github-pages-issue/">GitHub Pages Issue</a></strong> 介绍博主在使用 GitHub Pages 的过程中遇到的问题及解决方法</li>
<li><strong><a href="http://alfred-sun.github.io/blog/2015/01/10/markdown-syntax-documentation/">讲解 Markdown</a></strong> 介绍了标准的 Markdown 语法及相关的扩展语法</li>
</ul>

<p>现在博主想要整理一份相对完整的Jekyll语法，方便以后查阅参考。</p>

<p>具体官方文档地址请参考 <strong><a href="http://jekyllrb.com/docs/home/">Jekyll Documentation</a></strong><br>
这里主要介绍关于 Jekyll 的 API 语法，不是翻译官网内容。</p>

<h2>开始</h2>

<blockquote>
<p><em><strong>Jekyll</strong> is a <u>parsing engine</u> bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc.<br>
Jekyll is known as <strong>&ldquo;a simple, blog aware, static site generator&rdquo;</strong>.</em></p>
</blockquote>

<p><strong>Jekyll 是什么？</strong></p>

<p>Jekyll 是一个静态网站生成器。<br>
Jekyll 通过标记语言 <a href="http://daringfireball.net/projects/markdown/">markdown</a> 或 <a href="http://redcloth.org/textile">textile</a> 和模板引擎 <a href="https://github.com/Shopify/liquid/wiki">liquid</a> 转换生成网页。<br>
<a href="http://pages.github.com/">GitHub Pages</a> 后台运行 Jekyll，为我们提供了一个地方贮存管理博客网页，我们可以使用 Jekyll 做一个自己的网站。</p>

<p>这里不介绍如何在本地安装使用 Jekyll，如果想本地使用，请参考官方文档：<a href="http://jekyllrb.com/docs/installation/">安装教程</a>和<a href="http://jekyllrb.com/docs/usage/">使用教程</a><br>
不过这里可以透漏一下，Jekyll 依赖于 <a href="http://www.ruby-lang.org/en/downloads/">ruby</a> 开发平台。</p>

<!--more-->

<h2>目录结构</h2>

<p>Jekyll 的标准目录结构如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.
├── _config.yml
├── _includes/
|   ├── footer.html
|   └── header.html
├── _layouts/
├── _posts/
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md
|   └── 2014-04-26-what-is-Jekyll.md
├── _drafts/
|   └── begin-with-the-crazy-ideas.md
├── _data/
|   └── members.yml # yaml files(end with &quot;.yml&quot; or &quot;.yaml&quot;)
├── _site/
└── index.html      # =&gt; http://alfred-sun.github.com/
</code></pre></div>
<p>顺便提一下，执行 <code>jekyll new SITENAME</code> 可以快速的生成一个基础的 Jekyll site 网站示例。</p>

<h3>文件介绍</h3>

<p><strong>_config.yml</strong></p>

<p>Jekyll 的全局配置文件。<br>
比如网站的名字，网站的域名，网站的链接格式等等。</p>

<p><strong>_drafts</strong></p>

<p>未发布的 posts 存放的地方，这里的 post 文件名不需要加日期标记。</p>

<p><strong>_includes</strong></p>

<p>该目录下的文件内容是最终要放进模版文件中的一些代码片段。<br>
对于网站的头部，底部，侧栏等公共部分，为了维护方便，我们可能想提取出来单独编写，然后使用的时候包含进去即可。<br>
这时我们可以把那些公共部分放在这个目录下，使用时只需要引入即可。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ % include filename % }
</code></pre></div>
<p><strong>_layouts</strong></p>

<p>存放的一些模版文件，模版是用来包含并装饰 page 或 post 内容的。Jekyll的模版使用 HTML 语法来写，并包含 <a href="http://en.wikipedia.org/wiki/Yaml" title="一个几乎所有编程语言都支持的易读的数据序列化（ Serialization )标准">YAML</a> Front Matter。<br>
所有的模版都可用Liquid来与网站进行交互，都可以使用全局变量 site 和 page 。</p>

<p>site 变量: 包含该网站所有可以接触得到的内容和元数据(meta-data)<br>
page 变量: 包含的是当前渲染的page或post的所有可以接触得到的数据</p>

<p>对于网站的布局，一般会写成模板的形式，这样对于写实质性的内容时，比如文章，只需要专心写文章的内容，然后加个标签指定用哪个模板即可。<br>
对于内容，指定模板了模板后,我们可以称内容是模板的儿子。<br>
为什么这样说呢？  因为这个模板时可以多层嵌套的，内容实际上模板，只不过是叶子节点而已。</p>

<p>在模板中，引入儿子的内容：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { content } }
</code></pre></div>
<p>在儿子中，指定父节点模板：</p>

<blockquote>
<p>注意，必须在子节点的顶部。</p>
</blockquote>
<div class="highlight"><pre><code class="language-text" data-lang="text">---
layout: post
---
</code></pre></div>
<p><strong>_posts</strong></p>

<p>发布的内容，比如博客文章，常放在这里面，而且一般作为叶子节点。<br>
文件的命名必须遵循：<code>YEAR-MONTH-DAY-title.MARKUP</code>。</p>

<p>另外，所有放在根目录下并且不以下划线开头的文件夹中有格式的文件都会被 Jekyll 处理成 page。<br>
这里说的有格式是指含有 YAML Front Matter 头部的文件。</p>

<p>所有的 post 和 page 都要用 markdown 或者 texile 或者 HTML 语法来写，可以包含 Liquid 模版的语法。而且必须要有 YAML Front Matter 头部( Jekyll 只处理具有 YAML Front Matter 的文件)。</p>

<p>YAML Front Matter 必须放在文件的开头，一对 <code>---</code> 之间，用户可在这一对 <code>---</code> 间设置预先定义的变量或用户自己的数据。具体看下面的<a href="#frontmatter">说明</a>。</p>

<p><strong>_data</strong></p>

<p>Jekyll 支持从该目录中加载 YAML、 JSON、 和 CSV 格式（<code>.yml</code>、<code>yaml</code>、<code>json</code> 或 <code>csv</code> 扩展名）的文件数据。用于配置一些全局变量，不过数据比较多，所以放在这里。<br>
比如，多人参与网站开发，我们通常会在这里面定义一个 <em>members.yml</em> 文件。</p>

<p>例如文件内容为：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Tom Preston-Werner</span>
  <span class="l-Scalar-Plain">github</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mojombo</span>

<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Parker Moore</span>
  <span class="l-Scalar-Plain">github</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">parkr</span>
</code></pre></div>
<p>然后在模板中我们就可以通过 <code>site.data.members</code> (注意：文件名决定变量名)使用这些数据。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul&gt;</span>
{ % for member in site.data.members % }
  <span class="nt">&lt;li&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://github.com/{ { member.github } }&quot;</span><span class="nt">&gt;</span>
      { { member.name } }
    <span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
{ % endfor % }
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div>
<p><strong>_site</strong></p>

<p>Jekyll 生成的网页默认输出的地方，一般需要在 <code>.gitignore</code> 中屏蔽掉这个目录。</p>

<p><strong>index.html</strong></p>

<p>主页文件，后缀有时也用 index.md 等。<br>
这个需要根据自己的需要来写，因为不同的格式之间在某些情况下还是有一些细微的差别的。</p>

<p><strong>其他静态资源</strong></p>

<p>对于其他静态资源，可以直接放在根目录或任何其他目录，然后路径和平常的网站一样，按路径来找链接中的文件。</p>

<h2>配置全局变量</h2>

<p>虽然全局变量都有自己的<a href="http://jekyllrb.com/docs/configuration/">默认配置</a>，但是我们往往会手动配置为自己心中最好的效果。<br>
另外，一些全局变量既可以在配置文件中设置，也可以在命令行选项参数里指定。</p>

<blockquote>
<p>注意，配置不用使用 tab，否则可能会忽略那条命令。</p>
</blockquote>

<h3>源代码的位置</h3>

<p>这个一般不配置，默认即可。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">source: DIR
</code></pre></div>
<p>当然编译的时候也可以指定，但是使用 github 我们是不能指定参数的。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">-s, --source DIR
</code></pre></div>
<h3>输出网站位置</h3>

<p>这个一般也是默认。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 编译参数 -d, --destination DIR
destination: DIR #配置语法
</code></pre></div>
<h3>Safe 开关</h3>

<p>官方文档上就一句话：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Disable custom plugins, and ignore symbolic links.
</code></pre></div>
<p>大概意思是禁用常用的插件，忽略符号链接。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 编译参数  --safe
safe: BOOL
</code></pre></div>
<h3>Base URL</h3>

<p>将 Jekyll 生成的网站内容放置在域名的子路径下面。</p>

<p>我们经常需要在多个地方运行 Jekyll，如发布到 GitHub Pages 前在本地预览下网站。<code>--baseurl</code> 标记就是为此而生的。</p>

<p>首先在 <code>_config.yml</code> 文件添加 <code>baseurl</code>，然后在网站各个链接的地方加前缀 <code>{{site.baseurl}}</code>。<br>
当 <code>jekyll serve</code> 预览本地网站时，在本地域名后追加 <code>--baseurl</code> 的值（类似 <code>/</code> 这样的路径）。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># baseurl: &quot;/blog&quot;  编译参数: --baseurl URL
baseurl: URL
</code></pre></div>
<p>注意：所有的 page 和 post 的 URL 都是以斜线 <code>/</code> 领头，那么当 <code>site.baseurl=/</code> 时，连接的 URL 会出现两个重复的 <code>/</code> 而破坏超链接。因此，建议只在 <code>baseurl</code> 有具体值时才使用 <code>site.baseurl</code> 给 URL 加前缀。</p>

<h3>忽略文件</h3>

<p>这个很有用，有时候你写了一个文件，里面的一个东西可能会被 Jekyll 处理，但是你不想让 Jekyll 处理的话，就使用这个语法忽略那些文件。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">exclude: [DIR, FILE, ...]
</code></pre></div>
<h3>强制处理文件</h3>

<p>有时候我们的一些文件的名字由于不在 Jekyll 处理的文件名字范围内，这时候就需要强制处理这些文件了。比如 <code>.htaccess</code> 文件。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># include: [&quot;.htaccess&quot;]
include: [DIR, FILE, ...]
</code></pre></div>
<h3>时区</h3>

<p>模板中经常会对时间进行转换，这个时候如果至指定时区的话，可能得到的时间会和我们想要的时间错几个小时。在<a href="http://en.wikipedia.org/wiki/List_of_tz_database_time_zones">这里</a>能查看到可用的值。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># timezone: Asia/Shanghai
timezone: TIMEZONE
</code></pre></div>
<h3>编码</h3>

<p>大家都是程序员，就不用多说了。<br>
执行 <code>ruby -e &#39;puts Encoding::list.join(&quot;\n&quot;)&#39;</code> 可列出本地 Ruby 可用的编码。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># encoding : utf-8
encoding: ENCODING
</code></pre></div>
<h3>文章链接格式</h3>

<p>我们可以自定义 Post 的 URL 格式，通过 <code>permalink</code> 来配置。比如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 设定 permalink 取值
permalink: /:year/:month/:day/:title.html
# 那么 post: 2014-10-19-slap-chop.md 最终输出的路径 URL 变成
# /2014/10/19/slap-chop.html

permalink: /:month-:day-:year/:title  # =&gt; /04-29-2009/slap-chop/index.html

permalink: pretty    # =&gt; /2009/04/29/slap-chop/index.html
</code></pre></div>
<p>另外，还有3种内置的链接格式可以使用：</p>

<table><thead>
<tr>
<th>PERMALINK STYLE</th>
<th>URL TEMPLATE</th>
</tr>
</thead><tbody>
<tr>
<td><strong>date</strong></td>
<td><code>/:categories/:year/:month/:day/:title.html</code></td>
</tr>
<tr>
<td><strong>pretty</strong></td>
<td><code>/:categories/:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td><strong>none</strong></td>
<td><code>/:categories/:title.html</code></td>
</tr>
</tbody></table>

<h3>分页</h3>

<p>通常我们都不想把所有的 Post 都放在一页显示，而是要分成多页显示。好在 Jekyll 支持分页显示，通过 <code>paginate</code> 和 <code>paginate_path</code> 两个变量来设置每页显示的数量和分页 HTML 的 URL 路径。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">paginate: 5
paginate_path: &quot;blog/page:num/&quot;
</code></pre></div>
<p>根据上面的配置，Jekyll 会读取 <code>blog/index.html</code> 文件，把每页赋值给全局变量 <code>paginator</code>，并输出 HTML 分页文件，如：第2页为 <code>blog/page2/index.html</code>。其中，“page” 是字符常量，变量 <code>:num</code> 是分页的页码，自动<strong>从 2 开始编码</strong>，因此在罗列所有页面页码及它们的超链接时要注意一下，首页链接没有中间的 “page1” 路径。<br>
通过 <code>paginator</code> 的<a href="#pagination"><strong>相关属性</strong></a>我们可以实现在不同页间切换。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- This loops through the paginated posts --&gt;</span>
{% for post in paginator.posts %}
  <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ post.url }}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
  <span class="nt">&lt;p&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;date&quot;</span><span class="nt">&gt;</span>{{ post.date }}<span class="nt">&lt;/span&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
    {{ post.content }}
  <span class="nt">&lt;/div&gt;</span>
{% endfor %}

<span class="c">&lt;!-- Pagination links --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pagination&quot;</span><span class="nt">&gt;</span>
  {% if paginator.previous_page %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ paginator.previous_page_path }}&quot;</span> <span class="na">class=</span><span class="s">&quot;previous&quot;</span><span class="nt">&gt;</span>Previous<span class="nt">&lt;/a&gt;</span>
  {% else %}
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;previous&quot;</span><span class="nt">&gt;</span>Previous<span class="nt">&lt;/span&gt;</span>
  {% endif %}
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;page_number &quot;</span><span class="nt">&gt;</span>Page: {{ paginator.page }} of {{ paginator.total_pages }}<span class="nt">&lt;/span&gt;</span>
  {% if paginator.next_page %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ paginator.next_page_path }}&quot;</span> <span class="na">class=</span><span class="s">&quot;next&quot;</span><span class="nt">&gt;</span>Next<span class="nt">&lt;/a&gt;</span>
  {% else %}
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;next &quot;</span><span class="nt">&gt;</span>Next<span class="nt">&lt;/span&gt;</span>
  {% endif %}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<h3>默认值设定</h3>

<p>设置 YAML Front Matter 变量的默认值。<br>
写 post 时，经常需要在每篇文章的 YAML 头部设定一些相同的变量使用，比如：<code>author</code>、<code>layout</code>等。为了避免这些不必要的重复性操作，我们可以在配置文件中设定他们的默认值；<br>
同时在必要的时候，还可以对具体文件设定头部变量，覆盖其默认值。下面很快就会说这点。</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># In _config.yml, set the layout and author for files where the type is &quot;posts&quot;.</span>
<span class="c1"># And any html files that exist in the &quot;projects/&quot; folder will use the &quot;project&quot; layout, if it exists.</span>
<span class="nn">...</span>
<span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
  <span class="p-Indicator">-</span>
    <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>      <span class="c1"># an empty string here means all files in the project</span>
      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="s">&quot;posts&quot;</span> <span class="c1"># previously `post` in Jekyll 2.2.</span>
    <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="s">&quot;post&quot;</span>
      <span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span> <span class="s">&quot;Alfred</span><span class="nv"> </span><span class="s">Sun&quot;</span>
  <span class="p-Indicator">-</span>
    <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&quot;projects&quot;</span>
      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="s">&quot;pages&quot;</span>     <span class="c1"># previously `page` in Jekyll 2.2.</span>
    <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="s">&quot;project&quot;</span> <span class="c1"># overrides previous default layout</span>
</code></pre></div>
<h2>Jekyll 模板、变量</h2>

<p>Jekyll 模板实际上分两部分：一部分是头部定义，另一部分是 <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">Liquid 语法</a>。</p>

<p><span id="frontmatter"></span></p>

<h3>头部定义</h3>

<p>主要用于指定模板(layout)和定义一些变量，比如：标题(title)、描述(description)、标签(tags)、分类(category/categories)、是否发布(published)，以及其他自定义的变量。</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span>     <span class="l-Scalar-Plain">post</span>   <span class="c1"># 指定使用的模板文件，“_layout” 目录下的模板文件名决定变量名</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>      <span class="l-Scalar-Plain">title</span>  <span class="c1"># 文章的标题</span>
<span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span>       <span class="l-Scalar-Plain">date</span>   <span class="c1"># 覆盖文章名中的日期</span>
<span class="l-Scalar-Plain">category</span><span class="p-Indicator">:</span>   <span class="l-Scalar-Plain">blog</span>   <span class="c1"># 文章的类别</span>
<span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">description</span>
<span class="l-Scalar-Plain">published</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">true</span>   <span class="c1"># default true 设置 “false” 后，文章不会显示</span>
<span class="l-Scalar-Plain">permalink</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">/:categories/:year/:month/:day/:title.html</span>  <span class="c1"># 覆盖全局变量设定的文章发布格式</span>
<span class="nn">---</span>
</code></pre></div>
<p>注意：如果文本文件使用的是 <code>utf-8</code> 编码，那么必须确保文件中不存在 <code>BOM</code> 头部字符，尤其是当 Jekyll 运行在 Windows 平台上。</p>

<h3>使用变量</h3>

<p>关于 Jekyll 的变量，可以参考<a href="http://jekyllrb.com/docs/variables/">官方说明</a><br>
上面文章页面中定义的头部变量，需要使用下面的语法获得：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">page.title
</code></pre></div>
<p>这些自定义的变量将会被传递给 Liquid 模板引擎用于转换文本文件，例如，你可以用上面定义的 &ldquo;title&rdquo; 变量在 layout 中设置页面的标题：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE HTML&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>{{ page.title }}<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
   ...
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>所有的变量都是一个树节点，比如：page 就是当前页面的根节点。</p>

<p>其中全局根结点有：</p>

<ul>
<li><strong>site</strong>： <code>_config.yml</code> 中配置的信息</li>
<li><strong>page</strong>： 页面的配置信息，包括 YAML 中定义的变量</li>
<li><strong>content</strong>： 用在模板文件中，该变量包含页面的子视图，用于引入子节点的内容；不能在 post 和 page 文件中使用</li>
<li><strong>paginator</strong>： 分页信息，需要事先设定 site 中的 <code>paginate</code> 值，参考 <a href="http://jekyllrb.com/docs/pagination/">Pagination</a></li>
</ul>

<p>注意：<code>post</code> 变量仅作用于 <code>for</code> 循环内部，如 <code>{ % for post in site.posts % }</code> 。假如需要访问当前正在渲染的文章页面的变量，就要用 <code>page</code> 变量代替 post 对象。比如，post 的 title 变量，要通过 <code>page.title</code> 来访问。</p>

<h4>site 下的变量</h4>

<table><thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>site.time</td>
<td>当前的时间(运行 Jekyll 时的时间)</td>
</tr>
<tr>
<td>site.pages</td>
<td>所有页面列表</td>
</tr>
<tr>
<td>site.posts</td>
<td>按时间逆序排列的所有文章列表</td>
</tr>
<tr>
<td>site.related_posts</td>
<td>如果当前被处理的页面是一个 post 文件，那这个变量是一个包含了最多10篇相关的文章列表</td>
</tr>
<tr>
<td>site.static_files</td>
<td>所有静态文件的列表(如：没有被 Jekyll 处理的文件)，每个文件有3个属性：<code>path</code>、<code>modified_time</code> 和 <code>extname</code></td>
</tr>
<tr>
<td>site.html_pages</td>
<td>所有 HTML 页面列表</td>
</tr>
<tr>
<td>site.collections</td>
<td>自定义的对象集合列表，参考 <a href="http://jekyllrb.com/docs/collections/">Collections</a></td>
</tr>
<tr>
<td>site.data</td>
<td>_data 目录下 YAML 文件的数据列表</td>
</tr>
<tr>
<td>site.documents</td>
<td>所有 Collections 里面的文档列表</td>
</tr>
<tr>
<td>site.categories.CATEGORY</td>
<td>所有在 CATEGORY 类别下的 post 列表</td>
</tr>
<tr>
<td>site.tags.TAG</td>
<td>所有在 TAG 标签下的 post 列表</td>
</tr>
<tr>
<td>site.[CONFIGURATION_DATA]</td>
<td>其他自定义的变量</td>
</tr>
</tbody></table>

<h4>page 下的变量</h4>

<table><thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>page.content</td>
<td>页面的内容</td>
</tr>
<tr>
<td>page.title</td>
<td>页面的标题</td>
</tr>
<tr>
<td>page.excerpt</td>
<td>未渲染的摘要</td>
</tr>
<tr>
<td>page.url</td>
<td>不带域名的页面链接，如：<code>/2008/12/14/my-post.html</code></td>
</tr>
<tr>
<td>page.date</td>
<td>指定每一篇 post 的时间，可在 post 的 front matter 里覆盖这个值，格式是：<code>date: YYYY-MM-DD HH:MM:SS</code></td>
</tr>
<tr>
<td>page.id</td>
<td>每一篇 post 的唯一标示符(在RSS中非常有用)，如：<code>/2008/12/14/my-post</code></td>
</tr>
<tr>
<td>page.categories</td>
<td>post 隶属的一个分类列表，可在 YAML 头部指定</td>
</tr>
<tr>
<td>page.tags</td>
<td>post 隶属的一个标签列表，可在 YAML 头部指定</td>
</tr>
<tr>
<td>page.path</td>
<td>页面的源码地址</td>
</tr>
<tr>
<td>page.next</td>
<td>按时间顺序排列的下一篇文章</td>
</tr>
<tr>
<td>page.previous</td>
<td>按时间顺序排列的上一篇文章</td>
</tr>
</tbody></table>

<p><span id="pagination"></span></p>

<h4>paginator 下的变量</h4>

<p>分页只在 index 页面中有效，index 页面可以在子目录里，比如：主页在 <code>/blog/index.html</code>，那么通过配置 <code>paginate_path: &quot;blog/page:num/&quot;</code>，主页里面放不下的其他内容就可以设定在第 2 页 <code>blog/page2/index.html</code> 以及后面的页面中。</p>

<table><thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead><tbody>
<tr>
<td>paginator.per_page</td>
<td>每一页的 post 数量</td>
</tr>
<tr>
<td>paginator.posts</td>
<td>当前页面上可用的 post 列表</td>
</tr>
<tr>
<td>paginator.total_posts</td>
<td>所有 post 的数量</td>
</tr>
<tr>
<td>paginator.total_pages</td>
<td>分页总数</td>
</tr>
<tr>
<td>paginator.page</td>
<td>当前页的页码，或者 <code>nil</code></td>
</tr>
<tr>
<td>paginator.previous_page</td>
<td>上一页的页码，或者 <code>nil</code></td>
</tr>
<tr>
<td>paginator.previous_page_path</td>
<td>上一页的路径，或者 <code>nil</code></td>
</tr>
<tr>
<td>paginator.next_page</td>
<td>下一页的页码，或者 <code>nil</code></td>
</tr>
<tr>
<td>paginator.next_page_path</td>
<td>下一页的路径，或者 <code>nil</code></td>
</tr>
</tbody></table>

<h2>Liquid 语法</h2>

<p><a href="https://github.com/Shopify/liquid/wiki">Liquid</a> 是 Ruby 的一个模版引擎库，Jekyll中用到的Liquid标记有两种：<strong>输出</strong>和<strong>标签</strong>。</p>

<ul>
<li>Output 标记：变成文本输出，被2层成对的花括号包住，如：<code>{{ content }}</code></li>
<li>Tag 标记：执行命令，被成对的花括号和百分号包住，如：<code>{% command %}</code></li>
</ul>

<h3>Jekyll 输出 Output</h3>

<p>示例：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Hello {{name}}
Hello {{user.name}}
Hello {{ &#39;tobi&#39; }}
</code></pre></div>
<p>Output 标记可以使用过滤器 Filters 对输出内容作简单处理。<br>
多个 Filters 间用竖线隔开，从左到右依次执行，Filter 左边总是输入，返回值为下一个 Filter 的输入或最终结果。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid">Hello <span class="p">{{</span><span class="w"> </span><span class="s1">&#39;tobi&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">upcase</span><span class="w"> </span><span class="p">}}</span><span class="w">  </span><span class="nf">#</span><span class="w"> </span>转换大写输出
Hello tobi has <span class="p">{{</span><span class="w"> </span><span class="s1">&#39;tobi&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">size</span><span class="w"> </span><span class="p">}}</span><span class="w"> </span><span class="nf">letters!</span><span class="w">  </span>#<span class="w"> </span>字符串长度
Hello <span class="p">{{</span><span class="w"> </span><span class="s1">&#39;*tobi*&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">markdownify</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">upcase</span><span class="w"> </span><span class="p">}}</span><span class="w">  </span><span class="nf">#</span><span class="w"> </span>将Markdown字符串转成HTML大写文本输出
Hello <span class="p">{{</span><span class="w"> </span><span class="s1">&#39;now&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s2">&quot;%Y %h&quot;</span><span class="w"> </span><span class="p">}}</span><span class="w">  </span><span class="nf">#</span><span class="w"> </span>按指定日期格式输出当前时间
</code></pre></div>
<h3>标准过滤器 Filters</h3>

<p>下面是常用的过滤器方法，更多的API需要查阅源代码（有注释）才能看到。  </p>

<p>源码主要看两个 Ruby Plugin 文件：<code>filters.rb</code>(Jekyll) 和 <code>standardfilters.rb</code>(Liquid)。  </p>

<p>（这也是博主刚开始使用Jekyll的时候，比较头疼的问题。由于官方没有给出详细API的说明，只能去源代码那里看啦，好在代码的注释比较详细）</p>

<hr>

<ul>
<li><code>date</code> - 将时间戳转化为另一种格式 (<a href="http://docs.shopify.com/themes/liquid-documentation/filters/additional-filters#date" title="Liquid Documentation">syntax reference</a>)</li>
<li><code>capitalize</code> - 输入字符串首字母大写 e.g. <code>{{ &#39;capitalize me&#39; | capitalize }} # =&gt; &#39;Capitalize me&#39;</code></li>
<li><code>downcase</code> - 输入字符串转换为小写</li>
<li><code>upcase</code> - 输入字符串转换为大写</li>
<li><code>first</code> - 返回数组中第一个元素</li>
<li><code>last</code> - 返回数组数组中最后一个元素</li>
<li><code>join</code> - 用特定的字符将数组连接成字符串输出</li>
<li><code>sort</code> - 对数组元素排序</li>
<li><code>map</code> - 输入数组元素的一个属性作为参数，将每个元素的属性值映射为字符串</li>
<li><code>size</code> - 返回数组或字符串的长度 e.g. <code>{{ array | size }}</code></li>
<li><code>escape</code> - 将字符串转义输出 e.g. <code>{{ &quot;&lt;p&gt;test&lt;/p&gt;&quot; | escape }} # =&gt; &lt;p&gt;test&lt;/p&gt;</code></li>
<li><code>escape_once</code> - 返回转义后的HTML文本，不影响已经转义的HTML实体</li>
<li><code>strip_html</code> - 删除 HTML 标签</li>
<li><code>strip_newlines</code> - 删除字符串中的换行符(<code>\n</code>)</li>
<li><code>newline_to_br</code> - 用HTML <code>&lt;br/&gt;</code> 替换换行符 <code>\n</code></li>
<li><code>replace</code> - 替换字符串中的指定内容 e.g. <code>{{ &#39;foofoo&#39; | replace:&#39;foo&#39;,&#39;bar&#39; }} # =&gt; &#39;barbar&#39;</code></li>
<li><code>replace_first</code> - 查找并替换字符串中第一处找到的目标子串 e.g. <code>{{ &#39;barbar&#39; | replace_first:&#39;bar&#39;,&#39;foo&#39; }} # =&gt; &#39;foobar&#39;</code></li>
<li><code>remove</code> - 删除字符串中的指定内容 e.g. <code>{{ &#39;foobarfoobar&#39; | remove:&#39;foo&#39; }} # =&gt; &#39;barbar&#39;</code></li>
<li><code>remove_first</code> - 查找并删除字符串中第一处找到的目标子串 e.g. <code>{{ &#39;barbar&#39; | remove_first:&#39;bar&#39; }} # =&gt; &#39;bar&#39;</code></li>
<li><code>truncate</code> - 截取指定长度的字符串，第2个参数追加到字符串的尾部 e.g. <code>{{ &#39;foobarfoobar&#39; | truncate: 5, &#39;.&#39; }} # =&gt; &#39;foob.&#39;</code></li>
<li><code>truncatewords</code> - 截取指定单词数量的字符串</li>
<li><code>prepend</code> - 在字符串前面添加字符串 e.g. <code>{{ &#39;bar&#39; | prepend:&#39;foo&#39; }} # =&gt; &#39;foobar&#39;</code></li>
<li><code>append</code> - 在字符串后面追加字符串 e.g. <code>{{ &#39;foo&#39; | append:&#39;bar&#39; }} # =&gt; &#39;foobar&#39;</code></li>
<li><code>slice</code> - 返回字符子串指定位置开始、指定长度的子串 e.g. <code>{{ &quot;hello&quot; | slice: -4, 3 }} # =&gt; ell</code></li>
<li><code>minus</code> - 减法运算 e.g. <code>{{ 4 | minus:2 }} # =&gt; 2</code></li>
<li><code>plus</code> - 加法运算 e.g. <code>{{ &#39;1&#39; | plus:&#39;1&#39; }} #=&gt; &#39;11&#39;, {{ 1 | plus:1 }} # =&gt; 2</code></li>
<li><code>times</code> - 乘法运算 e.g <code>{{ 5 | times:4 }} # =&gt; 20</code></li>
<li><code>divided_by</code> - 除法运算 e.g. <code>{{ 10 | divided_by:2 }} # =&gt; 5</code></li>
<li><code>split</code> - 根据匹配的表达式将字符串切成数组 e.g. <code>{{ &quot;a~b&quot; | split:&quot;~&quot; }} # =&gt; [&#39;a&#39;,&#39;b&#39;]</code></li>
<li><code>modulo</code> - 求模运算 e.g. <code>{{ 7 | modulo:4 }} # =&gt; 3</code></li>
</ul>

<h3>Jekyll 标签 Tag</h3>

<p>标签用于模板中的执行语句。目前 Jekyll/Liquid 支持的标准标签库有：</p>

<table><thead>
<tr>
<th>Tags</th>
<th>说明</th>
</tr>
</thead><tbody>
<tr>
<td><strong>assign</strong></td>
<td>为变量赋值</td>
</tr>
<tr>
<td><strong>capture</strong></td>
<td>用捕获到的文本为变量赋值</td>
</tr>
<tr>
<td><strong>case</strong></td>
<td>条件分支语句 case&hellip;when&hellip;</td>
</tr>
<tr>
<td><strong>comment</strong></td>
<td>注释语句</td>
</tr>
<tr>
<td><strong>cycle</strong></td>
<td>通常用于在某些特定值间循环选择，如颜色、DOM类</td>
</tr>
<tr>
<td><strong>for</strong></td>
<td>循环语句</td>
</tr>
<tr>
<td><strong>if</strong></td>
<td>if/else 语句</td>
</tr>
<tr>
<td><strong>include</strong></td>
<td>将另一个模板包进来，模板文件在 <code>_includes</code> 目录中</td>
</tr>
<tr>
<td><strong>raw</strong></td>
<td>禁用范围内的 Tag 命令，避免语法冲突</td>
</tr>
<tr>
<td><strong>unless</strong></td>
<td>if 语句的否定语句</td>
</tr>
</tbody></table>

<h4>1. Comments</h4>

<p>仅起到注释 Liquid 代码的作用。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid">We made 1 million dollars <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> in losses </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span> this year.
</code></pre></div>
<h4>2. Raw</h4>

<p>临时禁止执行 Jekyll Tag 命令，在生成的内容里存在冲突的语法片段的情况下很有用。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">raw</span><span class="w"> </span>%<span class="w"> </span>}
  In Handlebars, <span class="p">{{</span><span class="w"> </span><span class="nv">this</span><span class="w"> </span><span class="p">}}</span> will be HTML-escaped, but <span class="p">{{</span><span class="err">{</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="p">}}</span>} will not.
<span class="p">{%</span><span class="w"> </span><span class="nt">endraw</span><span class="w"> </span>%<span class="w"> </span>}
</code></pre></div>
<h4>3. If / Else</h4>

<p>条件语句，可以使用关键字有：<code>if</code>、<code>unless</code>、<code>elsif</code>、<code>else</code>。</p>

<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="lineno"> 1</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno"> 2</span>   Hello <span class="p">{{</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="p">}}</span>
<span class="lineno"> 3</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> # Same as above
<span class="lineno"> 6</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="nv">null</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno"> 7</span>   Hello <span class="p">{{</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="p">}}</span>
<span class="lineno"> 8</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno"> 9</span> 
<span class="lineno">10</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">&#39;tobi&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">11</span>   Hello tobi
<span class="lineno">12</span> <span class="p">{%</span><span class="w"> </span><span class="kr">elsif</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">&#39;bob&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">13</span>   Hello bob
<span class="lineno">14</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">15</span> 
<span class="lineno">16</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="err">==</span><span class="w"> </span><span class="s1">&#39;tobi&#39;</span><span class="w"> </span><span class="nv">or</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">&#39;bob&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">17</span>   Hello tobi or bob
<span class="lineno">18</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">19</span> 
<span class="lineno">20</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="err">==</span><span class="w"> </span><span class="s1">&#39;bob&#39;</span><span class="w"> </span><span class="nv">and</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">45</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">21</span>   Hello old bob
<span class="lineno">22</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">23</span> 
<span class="lineno">24</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">&#39;tobi&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">25</span>   Hello non-tobi
<span class="lineno">26</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">27</span> 
<span class="lineno">28</span> # Same as above
<span class="lineno">29</span> <span class="p">{%</span><span class="w"> </span><span class="kr">unless</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">&#39;tobi&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">30</span>   Hello non-tobi
<span class="lineno">31</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endunless</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">32</span> 
<span class="lineno">33</span> # Check for the size of an array
<span class="lineno">34</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">payments</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">empty</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">35</span>    you never paid !
<span class="lineno">36</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">37</span> 
<span class="lineno">38</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">payments</span><span class="p">.</span><span class="nv">size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w">  </span><span class="p">%}</span>
<span class="lineno">39</span>    you paid !
<span class="lineno">40</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">41</span> 
<span class="lineno">42</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">user</span><span class="p">.</span><span class="nv">age</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">43</span>    Login here
<span class="lineno">44</span> <span class="p">{%</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">45</span>    Sorry, you are too young
<span class="lineno">46</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">47</span> 
<span class="lineno">48</span> # array = 1,2,3
<span class="lineno">49</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">array</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">50</span>    array includes 2
<span class="lineno">51</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">52</span> 
<span class="lineno">53</span> # string = &#39;hello world&#39;
<span class="lineno">54</span> <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">string</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">&#39;hello&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="lineno">55</span>    string includes &#39;hello&#39;
<span class="lineno">56</span> <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span></code></pre></div>

<h4>4. Case 语句</h4>

<p>适用于当条件实例很多的情况。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="kr">case</span><span class="w"> </span><span class="nv">template</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">when</span><span class="w"> </span><span class="s1">&#39;label&#39;</span><span class="w"> </span><span class="p">%}</span>
     // <span class="p">{{</span><span class="w"> </span><span class="nv">label</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">when</span><span class="w"> </span><span class="s1">&#39;product&#39;</span><span class="w"> </span><span class="p">%}</span>
     // <span class="p">{{</span><span class="w"> </span><span class="nv">product</span><span class="p">.</span><span class="nv">vendor</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">link_to_vendor</span><span class="w"> </span><span class="p">}}</span><span class="w"> </span><span class="nf">/</span><span class="w"> </span>{{<span class="w"> </span>product.title<span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">%}</span>
     // <span class="p">{{</span><span class="nv">page_title</span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endcase</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<h4>5. Cycle</h4>

<p>经常需要在相似的任务间选择时，可以使用 <code>cycle</code> 标签。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>

# =&gt;

one
two
three
one
</code></pre></div>
<p>如果要对循环作分组处理，可以指定分组的名字：</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;group 1&#39;</span>:<span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;group 1&#39;</span>:<span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;group 2&#39;</span>:<span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">cycle</span><span class="w"> </span><span class="s1">&#39;group 2&#39;</span>:<span class="w"> </span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;three&#39;</span><span class="w"> </span><span class="p">%}</span>

# =&gt;
one
two
one
two
</code></pre></div>
<h4>6. For loops</h4>

<p>循环遍历数组：</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>item<span class="w"> </span>in<span class="w"> </span>array<span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="w"> </span><span class="nv">item</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<p>循环迭代 Hash散列，<code>item[0]</code> 是键，<code>item[1]</code> 是值：</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>item<span class="w"> </span>in<span class="w"> </span>hash<span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="w"> </span><span class="nv">item</span><span class="err">[</span><span class="mi">0</span><span class="err">]</span><span class="w"> </span><span class="p">}}</span>: <span class="p">{{</span><span class="w"> </span><span class="nv">item</span><span class="err">[</span><span class="mi">1</span><span class="err">]</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<p>每个循环周期，提供下面几个可用的变量：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">forloop.length      # =&gt; length of the entire for loop
forloop.index       # =&gt; index of the current iteration
forloop.index0      # =&gt; index of the current iteration (zero based)
forloop.rindex      # =&gt; how many items are still left ?
forloop.rindex0     # =&gt; how many items are still left ? (zero based)
forloop.first       # =&gt; is this the first iteration ?
forloop.last        # =&gt; is this the last iteration ?
</code></pre></div>
<p>还有几个属性用来限定循环过程：</p>

<p><code>limit:int</code>： 限制循环迭代次数<br>
<code>offset:int</code>： 从第n个item开始迭代<br>
<code>reversed</code>： 反转循环顺序</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"># array = [1,2,3,4,5,6]
<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>item<span class="w"> </span>in<span class="w"> </span>array<span class="w"> </span><span class="na">limit</span><span class="o">:</span><span class="mi">2</span><span class="w"> </span><span class="na">offset</span><span class="o">:</span><span class="mi">2</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="w"> </span><span class="nv">item</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
# results in 3,4

<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>item<span class="w"> </span>in<span class="w"> </span>collection<span class="w"> </span>reversed<span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="nv">item</span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>

<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>post<span class="w"> </span>in<span class="w"> </span>site.posts<span class="w"> </span><span class="na">limit</span><span class="o">:</span><span class="mi">20</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<p>允许自定义循环迭代次数，迭代次数可以用常数或者变量说明：</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"># if item.quantity is 4...
<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>i<span class="w"> </span>in<span class="w"> </span>(<span class="mi">1</span>..item.quantity)<span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="w"> </span><span class="nv">i</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
# results in 1,2,3,4
</code></pre></div>
<h4>7. Variable Assignment</h4>

<p>为变量赋值，用于输出或者其他 Tag：</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="na">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="na">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;freestyle&#39;</span><span class="w"> </span><span class="p">%}</span>

<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>t<span class="w"> </span>in<span class="w"> </span>collections.tags<span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">t</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">name</span><span class="w"> </span><span class="p">%}</span>
  &lt;p&gt;Freestyle!&lt;/p&gt;
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>


# 变量是布尔类型
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="na">freestyle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">%}</span>

<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>t<span class="w"> </span>in<span class="w"> </span>collections.tags<span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">t</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">&#39;freestyle&#39;</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="na">freestyle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>

<span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">freestyle</span><span class="w"> </span><span class="p">%}</span>
  &lt;p&gt;Freestyle!&lt;/p&gt;
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<p><code>capture</code> 允许将大量字符串合并为单个字符串并赋值给变量，而不会输出显示。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">attribute_name</span><span class="w"> </span><span class="p">%}{{</span><span class="w"> </span><span class="nv">item</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">handleize</span><span class="w"> </span><span class="p">}}</span><span class="nf">-{{</span><span class="w"> </span>i<span class="w"> </span><span class="p">}}</span><span class="nf">-color{%</span><span class="w"> </span>endcapture<span class="w"> </span>%}

&lt;label for=&quot;<span class="p">{{</span><span class="w"> </span><span class="nv">attribute_name</span><span class="w"> </span><span class="p">}}</span>&quot;&gt;Color:&lt;/label&gt;
&lt;select name=&quot;attributes[<span class="p">{{</span><span class="w"> </span><span class="nv">attribute_name</span><span class="w"> </span><span class="p">}}</span>]&quot; id=&quot;<span class="p">{{</span><span class="w"> </span><span class="nv">attribute_name</span><span class="w"> </span><span class="p">}}</span>&quot;&gt;
  &lt;option value=&quot;red&quot;&gt;Red&lt;/option&gt;
  &lt;option value=&quot;green&quot;&gt;Green&lt;/option&gt;
  &lt;option value=&quot;blue&quot;&gt;Blue&lt;/option&gt;
&lt;/select&gt;
</code></pre></div>
<hr>

<h2>其他模板语句</h2>

<h3>字符转义</h3>

<p>有时候想输出 <code>{</code> 了，怎么办？ 使用反斜线 <code>\</code> 转义即可</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">\{ =&gt; {
</code></pre></div>
<h3>格式化时间</h3>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">time</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date_to_xmlschema</span><span class="w"> </span><span class="p">}}</span><span class="w">     </span><span class="nf">#</span><span class="w"> </span>=&gt;<span class="w"> </span><span class="na">2008-11-07T13</span><span class="o">:</span><span class="na">07</span><span class="o">:</span><span class="na">54-08</span><span class="o">:</span><span class="mi">00</span>
<span class="p">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">time</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date_to_rfc822</span><span class="w"> </span><span class="p">}}</span><span class="w">        </span><span class="nf">#</span><span class="w"> </span>=&gt;<span class="w"> </span>Mon<span class="p">,</span><span class="w"> </span><span class="mi">07</span><span class="w"> </span>Nov<span class="w"> </span><span class="mi">2008</span><span class="w"> </span><span class="na">13</span><span class="o">:</span><span class="na">07</span><span class="o">:</span><span class="mi">54</span><span class="w"> </span>-<span class="mi">0800</span>
<span class="p">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">time</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date_to_string</span><span class="w"> </span><span class="p">}}</span><span class="w">        </span><span class="nf">#</span><span class="w"> </span>=&gt;<span class="w"> </span><span class="mi">07</span><span class="w"> </span>Nov<span class="w"> </span><span class="mi">2008</span>
<span class="p">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">time</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date_to_long_string</span><span class="w"> </span><span class="p">}}</span><span class="w">   </span><span class="nf">#</span><span class="w"> </span>=&gt;<span class="w"> </span><span class="mi">07</span><span class="w"> </span>November<span class="w"> </span><span class="mi">2008</span>
</code></pre></div>
<h3>代码语法高亮</h3>

<p>安装好 <strong>pygments.rb</strong> 的 gem 组件和 Python 2.x 后，配置文件添加：<code>highlighter: pygments</code>，就可以使用语法高亮命令了，支持语言多达 100 种以上。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">highlight</span><span class="w"> </span>ruby<span class="w"> </span>linenos<span class="w"> </span><span class="p">%}</span>
# some ruby code
<span class="p">{%</span><span class="w"> </span><span class="nt">endhighlight</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<p>上面的示例中，使用 <code>highlight</code> 语句来处理代码块；并设定第一个参数 <code>ruby</code> 来指定高亮的语言 Ruby，第二个参数 <code>linenos</code> 来开启显示代码行号的功能。</p>

<p>为了给代码着色，需要配置相应的样式文件，参考 <a href="https://github.com/mojombo/tpw/tree/master/css/syntax.css">syntax.css</a>；<br>
为了更好的显示行号，可以在上面的 CSS 文件添加 <code>.lineno</code> 样式类。</p>

<p>可用的语言识别符缩写，从 <a href="http://pygments.org/docs/lexers/"><strong>Pygments’ Lexers Page</strong></a> 查阅。<br>
如果从 Pygments 的 <a href="http://pygments.org/languages/">Supported Languages</a> 清單，能發現明明有列出該語言名稱，而 pygments.rb 确无法识别该语言，這時候必須到 <a href="http://pygments.org/docs/lexers/">Available Lexers</a> 查詢；如果在程序語言的說明中有一行“ <strong>New in version 1.5.</strong> ”，那就表示只要將 <strong>Pygments</strong> 更新到 1.5 版， 即可支持该程序语言。</p>

<h3>链接同域内的 post</h3>

<p>使用 <code>post_url</code> Tag 可以自动生成网站内的某个 post 超链接。<br>
这个命令语句以相关 post 的文件名为参数，在引入同域的 post 链接时，非常有用。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"># 自动生成某篇文章的链接地址
<span class="p">{%</span><span class="w"> </span><span class="nt">post_url</span><span class="w"> </span><span class="mi">2010</span>-<span class="mi">07</span>-<span class="mi">21</span>-name-of-post<span class="w"> </span><span class="p">%}</span>

# 引入该文章的链接
[Name of Link](<span class="p">{%</span><span class="w"> </span><span class="nt">post_url</span><span class="w"> </span><span class="mi">2010</span>-<span class="mi">07</span>-<span class="mi">21</span>-name-of-post<span class="w"> </span><span class="p">%}</span>)
</code></pre></div>
<h3>Gist 命令</h3>

<p>嵌入 GitHub Gist，也可以指定要显示的 gist 的文件名。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">gist</span><span class="w"> </span>parkr/<span class="mi">931</span>c<span class="mi">1</span>c<span class="mi">8</span>d<span class="mi">465</span>a<span class="mi">04042403</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">gist</span><span class="w"> </span>parkr/<span class="mi">931</span>c<span class="mi">1</span>c<span class="mi">8</span>d<span class="mi">465</span>a<span class="mi">04042403</span><span class="w"> </span>jekyll-private-gist.markdown<span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<h3>生成摘要</h3>

<p>配置文件中设定 <code>excerpt_separator</code> 取值，每篇 post 都会自动截取从开始到这个值间的内容作为这篇文章的摘要 <code>post.excerpt</code> 使用。<br>
如果要禁用某篇文章的摘要，可以在该篇文章的 YAML 头部设定 <code>excerpt_separator: &quot;&quot;</code> 。</p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid">{ % for post in site.posts % }
  &lt;a href=&quot;{ { post.url } }&quot;&gt;{ { post.title } }&lt;/a&gt;
  { { post.excerpt | remove: &#39;test&#39; } }
{ % endfor % }
</code></pre></div>
<h3>删除 HTML 标签</h3>

<p>这个在摘要作为 <code>head</code> 标签里的 <code>meta=&quot;description&quot;</code> 内容输出时很有用</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { post.excerpt | strip_html } }
</code></pre></div>
<h3>删除指定文本</h3>

<p>过滤器 <code>remove</code> 可以删除变量中的指定内容</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { post.url | remove: &#39;http&#39; } }
</code></pre></div>
<h3>CGI Escape</h3>

<p>通常用于将 URL 中的特殊字符转义为 <code>%xx</code> 形式</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { &quot;foo,bar;baz?&quot; | cgi_escape } }  # =&gt; foo%2Cbar%3Bbaz%3F
</code></pre></div>
<h3>排序</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Sort an array. Optional arguments for hashes:
#   1. property name
#   2. nils order (&#39;first&#39; or &#39;last&#39;)

{ { site.pages | sort: &#39;title&#39;, &#39;last&#39; } }
</code></pre></div>
<h3>搜索指定 Key</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Select all the objects in an array where the key has the given value.
{ { site.members | where:&quot;graduation_year&quot;,&quot;2014&quot; } } 
</code></pre></div>
<h3>To JSON 格式</h3>

<p>将 Hash 散列或数组转换为 JSON 格式</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { site.data.projects | jsonify } }
</code></pre></div>
<h3>序列化</h3>

<p>把一个数组变成一个字符串</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { page.tags | array_to_sentence_string } }  # =&gt; foo, bar, and baz
</code></pre></div>
<h3>单词的个数</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">{ { page.content | number_of_words } }
</code></pre></div>
<h2>内容名字规范</h2>

<p>对于博客 post，文件命名规则必须是 <code>YEAR-MONTH-DAY-title.MARKUP</code> 的格式。<br>
使用 <code>rake post</code> 会自动将 post 文件合适命名。</p>

<p>比如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">2014-11-06-memcached-code.md
2014-11-06-memcached-lib.md
2014-11-06-sphinx-config-and-use.md
2014-11-07-memcached-hash-table.md
2014-11-07-memcached-string-hash.md
</code></pre></div>
<h2>Assets 样式文件</h2>

<p>Jekyll 支持 Sass 和 CoffeeScript，通过新建 <code>.sass</code>、<code>.scss</code> 或 <code>.coffee</code> 格式的文件，并在开头添加一对 <code>---</code> 来使用这个功能。</p>

<p>关于详细的使用，请参看<a href="http://jekyllrb.com/docs/assets/">官方说明</a>，这里就不再做介绍了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS自定义浏览器滚动条样式]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/24/scrollbar-customized-with-css-style/"/>
    <updated>2014-12-24T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/24/scrollbar-customized-with-css-style</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>浏览器默认的滚动条看久了，不免有些审美疲劳，想得自己动手整整。网上查阅一番后，总结一下。<br>
IE浏览器有几个设置滚条的样式，不过只能设置颜色之类的，而且webkit下面也不支持。无意间看到网易邮箱的滚动条样子很好看，一开始以为是用div模拟的，结果一看，利用的CSS来设置的，而且是webkit浏览器。</p>

<p><img src="/media/pictures/scrollbar-customized-with-css-style/webkit_css.jpg" alt="webkit scrollbar"></p>

<p>得好好研究这几个属性下。</p>

<!--more-->

<h2>WebKit浏览器CSS设置滚动条</h2>

<p>主要有下面7个属性:</p>

<ol>
<li><strong>::-webkit-scrollbar</strong>              滚动条整体部分，可以设置宽度啥的</li>
<li><strong>::-webkit-scrollbar-button</strong>       滚动条两端的按钮</li>
<li><strong>::-webkit-scrollbar-track</strong>        外层轨道</li>
<li><strong>::-webkit-scrollbar-track-piece</strong>  内层轨道，滚动条中间部分（除去）</li>
<li><strong>::-webkit-scrollbar-thumb</strong>        拖动条，滑块</li>
<li><strong>::-webkit-scrollbar-corner</strong>       边角</li>
<li><strong>::-webkit-resizer</strong>                定义右下角拖动块的样式</li>
</ol>

<p>具体所指如下图:</p>

<p><img src="/media/pictures/scrollbar-customized-with-css-style/webkit_scrollbar.png" alt="webkit scrollbar"></p>

<p>上面是滚动条的主要设置属性，还有更详尽的CSS属性伪类，可以更丰富滚动条样式。</p>

<p><strong>:horizontal</strong> 水平方向的滚动条<br>
<strong>:vertical</strong> 垂直方向的滚动条<br>
<strong>:decrement</strong> 应用于按钮和内层轨道(track piece)。它用来指示按钮或者内层轨道是否会减小视窗的位置(比如，垂直滚动条的上面，水平滚动条的左边)<br>
<strong>:increment</strong> 和decrement类似，用来指示按钮或内层轨道是否会增大视窗的位置(比如，垂直滚动条的下面和水平滚动条的右边)<br>
<strong>:start</strong> 也应用于按钮和滑块。它用来定义对象是否放到滑块的前面。<br>
<strong>:end</strong> 类似于start伪类，标识对象是否放到滑块的后面。<br>
<strong>:double-button</strong> 该伪类以用于按钮和内层轨道。用于判断一个按钮是不是放在滚动条同一端的一对按钮中的一个。对于内层轨道来说，它表示内层轨道是否紧靠一对按钮。<br>
<strong>:single-button</strong> 类似于double-button伪类。对按钮来说，它用于判断一个按钮是否自己独立的在滚动条的一段。对内层轨道来说，它表示内层轨道是否紧靠一个single-button。<br>
<strong>:no-button</strong> 用于内层轨道，表示内层轨道是否要滚动到滚动条的终端，比如，滚动条两端没有按钮的时候。<br>
<strong>:corner-present</strong> 用于所有滚动条轨道，指示滚动条圆角是否显示。<br>
<strong>:window-inactive</strong> 用于所有的滚动条轨道，指示应用滚动条的某个页面容器(元素)是否当前被激活。(在webkit最近的版本中，该伪类也可以用于::selection伪元素。webkit团队有计划扩展它并推动成为一个标准的伪类)</p>

<p>另外，<strong>:enabled</strong>、<strong>:disabled</strong>、<strong>:hover</strong> 和 <strong>:active</strong> 等伪类同样可以用于滚动条中。</p>

<p>值得一提的是，WebKit伪类和伪元素的实现很强大，虽然类目有些多，但是我们可以把滚动条当成一个页面元素来定义，也差不多可以用上一些高级的CSS3属性，比如渐变、圆角、RGBA等等，当然有些地方也可以用图片，然后图片也可以转换成Base64，总之，可以尽情发挥了。</p>

<p>写个实例 <strong><a href="/media/demo/webkit_css_scrollbar.html">Demo</a></strong>（请在webkit浏览器下观看）。</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="c">/* 设置滚动条的样式 */</span>
<span class="o">:</span><span class="nd">:-webkit-scrollbar</span> <span class="p">{</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 滚动槽 */</span>
<span class="o">:</span><span class="nd">:-webkit-scrollbar-track</span> <span class="p">{</span>
    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">6px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 滚动条滑块 */</span>
<span class="o">:</span><span class="nd">:-webkit-scrollbar-thumb</span> <span class="p">{</span>
    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">background</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">inset</span> <span class="m">0</span> <span class="m">0</span> <span class="m">6px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">);</span>
<span class="p">}</span>
<span class="o">:</span><span class="nd">:-webkit-scrollbar-thumb:window-inactive</span> <span class="p">{</span>
    <span class="k">background</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">4</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h2>IE下面CSS设置滚动条</h2>

<p>IE下面就比较简单了，自定义的属性比较少，全是颜色。</p>

<ol>
<li><strong>scrollbar-arrow-color</strong>: color; /<em>三角箭头的颜色</em>/</li>
<li><strong>scrollbar-face-color</strong>: color; /<em>立体滚动条的颜色（包括箭头部分的背景色）</em>/</li>
<li><strong>scrollbar-3dlight-color</strong>: color; /<em>立体滚动条亮边的颜色</em>/</li>
<li><strong>scrollbar-highlight-color</strong>: color; /<em>滚动条的高亮颜色（左阴影？）</em>/</li>
<li><strong>scrollbar-shadow-color</strong>: color; /<em>立体滚动条阴影的颜色</em>/</li>
<li><strong>scrollbar-darkshadow-color</strong>: color; /<em>立体滚动条外阴影的颜色</em>/</li>
<li><strong>scrollbar-track-color</strong>: color; /<em>立体滚动条背景颜色</em>/</li>
<li><strong>scrollbar-base-color</strong>:color; /<em>滚动条的基色</em>/</li>
</ol>

<p>大概就这些，也可以定义cursor来定义滚动条的鼠标手势。</p>

<h2>Firefox浏览器滚动条样式插件</h2>

<p>吐槽下，作为三大浏览器的火狐居然没有相关CSS。</p>

<p><a href="http://www.firefoxfan.com/Firefox-Stylish/297.html" target="_blank" title="清新漂亮的圆角蓝色火狐滚动条样式"><img src="/media/pictures/scrollbar-customized-with-css-style/firefox_scrollbar.png" alt="webkit scrollbar" align="right"></a></p>

<p>火狐不支持滚动条样式调整，火狐浏览器未开放针对滚动条样式的设定。且也不支持css代码关于这些浏览器属性的控制。如果非要样式效果，只能滚动效果用JS来做，使用图片代替按钮。</p>

<p>不过博主发现，本地的Firefox可以通过安装<a href="https://addons.mozilla.org/zh-CN/firefox/addon/stylish/" title="Firefox Stylish">Stylish</a>扩展定制滚动条样式，下面分享个效果图给大家看（见右图）。</p>

<p>你可以下载这个样式<a href="/media/documents/firefox_stylish_scrollbar.css" target="_blank" title="Download"><i class="icon-file-text" style="display: inline;
margin-left: 5px;color:#111;"></i> <strong>Stylesheet</strong></a>，粘贴到Firefox Stylish里面体验下效果。</p>

<!--[![webkit scrollbar](/media/pictures/scrollbar-customized-with-css-style/firefox_scrollbar.png)]()-->

<h2>滚动条(兼容Firefox、IE、Chrome)[修改jsScrollbar]</h2>

<p>发现一个不错的完全<code>JS+CSS</code>定制的Scrollbar，兼容三大浏览器，出自<a href="http://lullabyus.iteye.com/blog/1314957" title="滚动条(兼容火狐、IE、chrome)">这里</a>；只不过，假如页面很复杂的话，这个就不如浏览器原生的流畅。代码如下。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
<span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="nt">&gt;</span>

<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;title&gt;</span>无标题文档<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="o">*</span><span class="p">{</span> <span class="k">margin</span><span class="o">:</span><span class="m">0px</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span> <span class="k">list-style</span><span class="o">:</span><span class="k">none</span><span class="p">;}</span>
<span class="nc">.box</span> <span class="p">{</span> <span class="k">width</span><span class="o">:</span><span class="m">500px</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span><span class="m">0</span> <span class="k">auto</span><span class="p">;</span> <span class="k">position</span><span class="o">:</span><span class="k">relative</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span><span class="m">100px</span><span class="p">;</span>  <span class="p">}</span>
<span class="nc">.Container</span> <span class="p">{</span> <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span><span class="m">0px</span><span class="p">;</span> <span class="k">left</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#EEE</span><span class="p">;</span> <span class="p">}</span>
<span class="nf">#Scroller-1</span> <span class="p">{</span>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span> <span class="p">}</span>
<span class="nf">#Scroller-1</span> <span class="nt">p</span> <span class="p">{</span> <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span> <span class="k">font-family</span><span class="o">:</span> <span class="n">Verdana</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">11px</span><span class="p">;</span> <span class="k">text-indent</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span> <span class="m">#777</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.Scroller-Container</span> <span class="p">{</span> <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span> <span class="k">left</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.Scrollbar-Track</span> <span class="p">{</span> <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span> <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span> <span class="k">right</span><span class="o">:</span><span class="m">0px</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#EEE</span><span class="p">;</span> <span class="k">cursor</span><span class="o">:</span><span class="k">pointer</span><span class="p">;</span>  <span class="p">}</span>
<span class="nc">.Scrollbar-Handle</span> <span class="p">{</span> <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span> <span class="k">left</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#CCC</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
<span class="kd">var</span> <span class="nx">scroller</span>  <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">scrollbar</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">scroller</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">jsScroller</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;Scroller-1&quot;</span><span class="p">),</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
  <span class="nx">scrollbar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jsScrollbar</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Container&quot;</span><span class="p">),</span> <span class="nx">scroller</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
<span class="p">}</span>


<span class="kd">function</span> <span class="nx">jsScroller</span> <span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Scroller-Container&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">o</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="c1">// 以 o 为对象，将对象包含的class名为Scroller-Container的元素付给 对象 o           </span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">//Private methods</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_setPos</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">viewableWidth</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">totalWidth</span><span class="p">)</span> 
            <span class="nx">x</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">viewableWidth</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">totalWidth</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">viewableHeight</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">totalHeight</span><span class="p">)</span> 
            <span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">viewableHeight</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">totalHeight</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
        <span class="kd">with</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">left</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span>
            <span class="nx">top</span>  <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="c1">//Public Methods</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">reset</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">totalHeight</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">totalWidth</span>  <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kd">with</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">left</span> <span class="o">=</span> <span class="s2">&quot;0px&quot;</span><span class="p">;</span>
            <span class="nx">top</span>  <span class="o">=</span> <span class="s2">&quot;0px&quot;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">scrollBy</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_setPos</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">+</span> <span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">scrollTo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_setPos</span><span class="p">(</span><span class="o">-</span><span class="nx">x</span><span class="p">,</span> <span class="o">-</span><span class="nx">y</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">stopScroll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scrollTimer</span><span class="p">)</span> <span class="nb">window</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scrollTimer</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">startScroll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stopScroll</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">scrollTimer</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setInterval</span><span class="p">(</span>
            <span class="kd">function</span><span class="p">(){</span> <span class="nx">self</span><span class="p">.</span><span class="nx">scrollBy</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span> <span class="p">},</span> <span class="mi">40</span>
        <span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">swapContent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">o</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Scroller-Container&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">o</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">w</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">viewableWidth</span>  <span class="o">=</span> <span class="nx">w</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">viewableHeight</span> <span class="o">=</span> <span class="nx">h</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
    <span class="p">};</span>

    <span class="c1">//variables</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">viewableWidth</span>  <span class="o">=</span> <span class="nx">w</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">viewableHeight</span> <span class="o">=</span> <span class="nx">h</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">totalWidth</span>  <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">totalHeight</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">scrollTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
<span class="p">};</span>


<span class="kd">function</span> <span class="nx">jsScrollbar</span> <span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">reset</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">//Arguments that were passed</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_parent</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_src</span>    <span class="o">=</span> <span class="nx">s</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">auto</span>    <span class="o">=</span> <span class="nx">a</span> <span class="o">?</span> <span class="nx">a</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">eventHandler</span> <span class="o">=</span> <span class="nx">ev</span> <span class="o">?</span> <span class="nx">ev</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{};</span>
        <span class="c1">//Component Objects</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_up</span>   <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_findComponent</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Up&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_down</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_findComponent</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Down&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_yTrack</span>  <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_findComponent</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Track&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_findComponent</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Handle&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_yTrack</span><span class="p">);</span>
        <span class="c1">//Height and position properties</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_trackTop</span> <span class="o">=</span> <span class="nx">findOffsetTop</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_yTrack</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_trackHeight</span>  <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_yTrack</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_handleHeight</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="c1">//Misc. variables</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_scrollDist</span>  <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_scrollTimer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_selectFunc</span>  <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_grabPoint</span>   <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_tempTarget</span>  <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_tempDistX</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_tempDistY</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_disabled</span>    <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_ratio</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">totalHeight</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">viewableHeight</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_trackHeight</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_handleHeight</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">ondragstart</span>  <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">;};</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">onmousedown</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">;};</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">event</span><span class="p">){</span> 
            <span class="k">this</span><span class="p">.</span><span class="nx">_addEvent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="s2">&quot;mousewheel&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarWheel</span><span class="p">);</span>          
        <span class="p">}</span><span class="c1">//W3C </span>
        <span class="k">else</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_addEvent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="s2">&quot;DOMMouseScroll&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarWheel</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_removeEvent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">,</span> <span class="s2">&quot;mousedown&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarClick</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_addEvent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">,</span> <span class="s2">&quot;mousedown&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarClick</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
        <span class="kd">with</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">top</span>  <span class="o">=</span> <span class="s2">&quot;0px&quot;</span><span class="p">;</span>
            <span class="nx">left</span> <span class="o">=</span> <span class="s2">&quot;0px&quot;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_moveContent</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">totalHeight</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">viewableHeight</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="s2">&quot;hidden&quot;</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">auto</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="s2">&quot;hidden&quot;</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="s2">&quot;visible&quot;</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_parent</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span>  <span class="o">=</span> <span class="s2">&quot;visible&quot;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_addEvent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="nx">o</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">)</span> <span class="nx">o</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;on&#39;</span><span class="o">+</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">f</span><span class="p">);</span>
        <span class="k">else</span> <span class="nx">o</span><span class="p">[</span><span class="s1">&#39;on&#39;</span><span class="o">+</span> <span class="nx">t</span><span class="p">]</span> <span class="o">=</span> <span class="nx">f</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_removeEvent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">)</span> <span class="nx">o</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">detachEvent</span><span class="p">)</span> <span class="nx">o</span><span class="p">.</span><span class="nx">detachEvent</span><span class="p">(</span><span class="s1">&#39;on&#39;</span><span class="o">+</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">f</span><span class="p">);</span>
        <span class="k">else</span> <span class="nx">o</span><span class="p">[</span><span class="s1">&#39;on&#39;</span><span class="o">+</span> <span class="nx">t</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_findComponent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">kids</span> <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">kids</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">kids</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span> <span class="o">&amp;&amp;</span> <span class="nx">kids</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span> <span class="o">==</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">kids</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="c1">//Thank you, Quirksmode</span>
    <span class="kd">function</span> <span class="nx">findOffsetTop</span> <span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">offsetParent</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">offsetParent</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">t</span> <span class="o">+=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">offsetTop</span><span class="p">;</span>
                <span class="nx">o</span>  <span class="o">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">offsetParent</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">t</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarClick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_disabled</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>

        <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">?</span> <span class="nx">e</span> <span class="o">:</span> <span class="nx">event</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">srcElement</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Up&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_scrollUp</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Down&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_scrollDown</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Track&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_scrollTrack</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;Scrollbar-Handle&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_scrollHandle</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>

        <span class="nx">self</span><span class="p">.</span><span class="nx">_tempTarget</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">_selectFunc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">onselectstart</span><span class="p">;</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">onselectstart</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="kc">false</span><span class="p">;};</span>

        <span class="nx">self</span><span class="p">.</span><span class="nx">eventHandler</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span> <span class="s2">&quot;mousedown&quot;</span><span class="p">);</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">_addEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="s2">&quot;mouseup&quot;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_stopScroll</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarDrag</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">?</span> <span class="nx">e</span> <span class="o">:</span> <span class="nx">event</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_trackTop</span><span class="p">;</span>
        <span class="kd">with</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">v</span> <span class="o">&gt;=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_trackHeight</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_handleHeight</span> <span class="o">+</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_grabPoint</span><span class="p">)</span>
                <span class="nx">top</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_trackHeight</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_handleHeight</span> <span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">v</span> <span class="o">&lt;=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_grabPoint</span><span class="p">)</span> <span class="nx">top</span> <span class="o">=</span> <span class="s2">&quot;0px&quot;</span><span class="p">;</span>
            <span class="k">else</span> <span class="nx">top</span> <span class="o">=</span> <span class="nx">v</span> <span class="o">-</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_grabPoint</span> <span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">_y</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">top</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nx">self</span><span class="p">.</span><span class="nx">_moveContent</span><span class="p">();</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarWheel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">?</span> <span class="nx">e</span> <span class="o">:</span> <span class="nx">event</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">wheelDelta</span> <span class="o">&gt;=</span> <span class="mi">120</span><span class="p">)</span> <span class="nx">dir</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">wheelDelta</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="mi">120</span><span class="p">)</span> <span class="nx">dir</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span> <span class="o">&gt;=</span><span class="mi">3</span><span class="p">)</span> <span class="nx">dir</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span> <span class="o">&lt;=-</span><span class="mi">3</span><span class="p">)</span> <span class="nx">dir</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

        <span class="nx">self</span><span class="p">.</span><span class="nx">scrollBy</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">dir</span> <span class="o">*</span> <span class="mi">20</span><span class="p">);</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_startScroll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_tempDistX</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_tempDistY</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_scrollTimer</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">scrollBy</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_tempDistX</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_tempDistY</span><span class="p">);</span> 
        <span class="p">},</span> <span class="mi">40</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_stopScroll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">_removeEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="s2">&quot;mousemove&quot;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_scrollbarDrag</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">_removeEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="s2">&quot;mouseup&quot;</span><span class="p">,</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_stopScroll</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_selectFunc</span><span class="p">)</span> <span class="nb">document</span><span class="p">.</span><span class="nx">onselectstart</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_selectFunc</span><span class="p">;</span>
        <span class="k">else</span> <span class="nb">document</span><span class="p">.</span><span class="nx">onselectstart</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">};</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_scrollTimer</span><span class="p">)</span> <span class="nb">window</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_scrollTimer</span><span class="p">);</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">eventHandler</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_tempTarget</span><span class="p">,</span> <span class="s2">&quot;mouseup&quot;</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollUp</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_startScroll</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">_scrollDist</span><span class="p">);};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollDown</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_startScroll</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollDist</span><span class="p">);};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollTrack</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">curY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_scroll</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">curY</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_trackTop</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_handleHeight</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scrollHandle</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">curY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span> <span class="o">+</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_grabPoint</span> <span class="o">=</span> <span class="nx">curY</span> <span class="o">-</span> <span class="nx">findOffsetTop</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_addEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="s2">&quot;mousemove&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarDrag</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_scroll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_trackHeight</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_handleHeight</span><span class="p">)</span> 
            <span class="nx">y</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_trackHeight</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_handleHeight</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_yHandle</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_moveContent</span><span class="p">();</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_moveContent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">scrollTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">_ratio</span><span class="p">));</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">scrollBy</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_scroll</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">_y</span> <span class="o">+</span> <span class="nx">y</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">_ratio</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">scrollTo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_scroll</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">y</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">_ratio</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">swapContent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 判断浏览器</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">event</span><span class="p">){</span> 
            <span class="k">this</span><span class="p">.</span><span class="nx">_removeEvent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="s2">&quot;mousewheel&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarWheel</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="p">}</span><span class="c1">//W3C </span>
        <span class="k">else</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_removeEvent</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="s2">&quot;DOMMouseScroll&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_scrollbarWheel</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">_src</span><span class="p">.</span><span class="nx">swapContent</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
    <span class="p">};</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span>
<span class="p">};</span>

<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;box&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;Container&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;Scroller-1&quot;</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;left: 0px; top: -596px;&quot;</span> <span class="na">class=</span><span class="s">&quot;Scroller-Container&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec
     iaculis, ante et congue feugiat, elit wisi commodo metus, ut commodo 
    ligula enim ac justo. Pellentesque id ligula. Class aptent taciti 
    sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. 
    Phasellus vitae mi a elit dictum volutpat. Pellentesque nec arcu. Etiam 
    blandit. Phasellus egestas dolor ut lacus. Sed enim justo, sagittis ut, 
    condimentum non, ullamcorper eu, neque. In hac habitasse platea 
    dictumst. Integer ipsum risus, sagittis ac, imperdiet ac, interdum sed, 
    libero. Praesent commodo. Mauris congue, urna eget hendrerit elementum, 
    dolor ligula ultrices neque, in elementum ante erat et elit.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>Vivamus vehicula. Integer cursus massa et nisl. Morbi pretium 
    sem eget risus. Vestibulum nec est. Donec feugiat purus et ligula. 
    Quisque semper. Sed eu ante. Curabitur suscipit porttitor libero. Nam 
    eros leo, sollicitudin eget, tincidunt vitae, facilisis a, dui. Proin 
    neque. Aliquam erat volutpat. Pellentesque felis.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>Aliquam consequat. Proin feugiat ultricies dui. Suspendisse 
    mollis dui nec nunc. Nam tristique, ante vitae imperdiet vestibulum, 
    elit nulla rhoncus nisl, vitae tincidunt dolor dui eu mi. In hac 
    habitasse platea dictumst. Nunc blandit dolor vel mauris. Proin wisi. 
    Nam pharetra ultrices tellus. Sed arcu. Lorem ipsum dolor sit amet, 
    consectetuer adipiscing elit. Nullam ultricies semper wisi. Sed nisl. 
    Donec blandit. Nunc vitae urna sed nisl mattis ornare.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec
     iaculis, ante et congue feugiat, elit wisi commodo metus, ut commodo 
    ligula enim ac justo. Pellentesque id ligula. Class aptent taciti 
    sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. 
    Phasellus vitae mi a elit dictum volutpat. Pellentesque nec arcu. Etiam 
    blandit. Phasellus egestas dolor ut lacus. Sed enim justo, sagittis ut, 
    condimentum non, ullamcorper eu, neque. In hac habitasse platea 
    dictumst. Integer ipsum risus, sagittis ac, imperdiet ac, interdum sed, 
    libero. Praesent commodo. Mauris congue, urna eget hendrerit elementum, 
    dolor ligula ultrices neque, in elementum ante erat et elit.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>Vivamus vehicula. Integer cursus massa et nisl. Morbi pretium 
    sem eget risus. Vestibulum nec est. Donec feugiat purus et ligula. 
    Quisque semper. Sed eu ante. Curabitur suscipit porttitor libero. Nam 
    eros leo, sollicitudin eget, tincidunt vitae, facilisis a, dui. Proin 
    neque. Aliquam erat volutpat. Pellentesque felis.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>Aliquam consequat. Proin feugiat ultricies dui. Suspendisse 
    mollis dui nec nunc. Nam tristique, ante vitae imperdiet vestibulum, 
    elit nulla rhoncus nisl, vitae tincidunt dolor dui eu mi. In hac 
    habitasse platea dictumst. Nunc blandit dolor vel mauris. Proin wisi. 
    Nam pharetra ultrices tellus. Sed arcu. Lorem ipsum dolor sit amet, 
    consectetuer adipiscing elit. Nullam ultricies semper wisi. Sed nisl. 
    Donec blandit. Nunc vitae urna sed nisl mattis ornare.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;visibility: visible;&quot;</span> <span class="na">id=</span><span class="s">&quot;Scrollbar-Container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;Scrollbar-Track&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;top: 70px; left: 0px; visibility: visible;&quot;</span> <span class="na">class=</span><span class="s">&quot;Scrollbar-Handle&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>


<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>其效果图如下所示：</p>

<div style="width:85%;height:200px;margin:auto;display:block;">
<iframe width="100%" height="200px" allowTransparency="true" frameborder="0" scrolling="no" src="/media/demo/scrollbar_customized.html"></iframe>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[window.location 属性]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/21/window-location/"/>
    <updated>2014-12-21T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/21/window-location</id>
    <content type="html"><![CDATA[<p>window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。<br>
<strong>Note</strong>: window.location 对象在编写时可不使用 window 这个前缀。</p>

<h2>Window Location 对象</h2>

<p>原生 JavaScript window.location 对象所包含的属性:</p>

<table><thead>
<tr>
<th style="text-align: left">属性</th>
<th style="text-align: center">描述</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">hash</td>
<td style="text-align: center">从井号 (#) 开始的 URL（锚）</td>
</tr>
<tr>
<td style="text-align: left">host</td>
<td style="text-align: center">主机名和当前 URL 的端口号</td>
</tr>
<tr>
<td style="text-align: left">hostname</td>
<td style="text-align: center">当前 URL 的主机名</td>
</tr>
<tr>
<td style="text-align: left">href</td>
<td style="text-align: center">完整的 URL</td>
</tr>
<tr>
<td style="text-align: left">pathname</td>
<td style="text-align: center">当前 URL 的路径部分</td>
</tr>
<tr>
<td style="text-align: left">port</td>
<td style="text-align: center">当前 URL 的端口号</td>
</tr>
<tr>
<td style="text-align: left">protocol</td>
<td style="text-align: center">当前 URL 的协议</td>
</tr>
<tr>
<td style="text-align: left">search</td>
<td style="text-align: center">从问号 (?) 开始的 URL(查询部分)</td>
</tr>
</tbody></table>

<!--more-->

<p><strong>1. window.location.hash</strong></p>

<p>要使用 JS 定位锚点，完全可以使用 window.hash 配合元素 ID 完成。比如快速定位到页面的某条评论，则直接使用如下代码即可：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;#comment-5981&quot;</span><span class="p">;</span>
</code></pre></div>
<p>另外 Twitter、Facebook、Google 等已经开始大量使用 #! 这种形式的 hash 方法处理异步交互页面的 URL 可回溯功能。</p>

<p><strong>2. window.location.search</strong></p>

<p>如果有这样一个 URL 地址：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">http://www.google.com.hk/search?hl=zh-CN&amp;source=hp&amp;biw=1400&amp;bih=935&amp;q=%E8%8A%92%E6%9E%9C%E5%B0%8F%E7%AB%99&amp;aq=f&amp;aqi=&amp;aql=&amp;oq=
</code></pre></div>
<p>要利用 JS 脚本捕获页面 GET 方式请求的诸参数？可直接使用 <code>window.location.search</code> 获得，然后通过 split 方法结合循环遍历，组织数据格式。</p>

<p>另外，如果根据用户的搜索条件刷新页面，只需直接设置 <code>window.location.search</code> 即可。</p>

<h2>location.hash 属性介绍</h2>

<p>location是javascript里边管理地址栏的内置对象，比如location.href管理页面的url，用<code>location.href=url</code>就可以直接将页面重定向url。而location.hash则可以用来获取或设置页面的标签值。比如<code>http://domain/#admin</code>的location.hash=&ldquo;#admin&quot;。利用这个属性值可以做一个非常有意义的事情。</p>

<p>很多人都喜欢收藏网页，以便于以后的浏览。不过对于Ajax页面来说的话，一般用一个页面来处理所有的事务，也就是说，如果你浏览到一个Ajax页面里边有意思的内容，想将它收藏起来，可是地址只有一个呀，下次你打开这个地址，还是得像以往一样不断地去点击网页，找到你钟情的那个页面。另外的话，浏览器上的“前进”“后退”按钮也会失效，这对于很多习惯了传统页面的用户来说，是一个很大的使用障碍。</p>

<p>那么，怎么用location.hash来解决这两个问题呢？其实一点也不神秘。</p>

<p>比如，某管理系统，主要功能有三个：普通搜索、高级搜索、后台管理，我分别给它们分配一个hash值：#search、#advsearch、#admin，在页面初始化的时候，通过<code>window.location.hash</code>来判断用户需要访问的页面，然后通过javascript来调整显示页面。比如：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">hash</span><span class="p">;</span>
<span class="nx">hash</span><span class="o">=</span><span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span><span class="o">?</span><span class="s2">&quot;#search&quot;</span><span class="o">:</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">;</span> 
<span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="o">=</span><span class="nx">hash</span><span class="p">;</span> 
  <span class="c1">//调整地址栏地址，使前进、后退按钮能使用 </span>
<span class="k">switch</span><span class="p">(</span><span class="nx">hash</span><span class="p">){</span>   
<span class="k">case</span> <span class="s2">&quot;#search&quot;</span><span class="o">:</span>  
    <span class="nx">selectPanel</span><span class="p">(</span><span class="s2">&quot;pnlSearch&quot;</span><span class="p">);</span>   <span class="c1">//显示普通搜索面板  </span>
    <span class="k">break</span><span class="p">;</span>    
<span class="k">case</span> <span class="s2">&quot;#advsearch&quot;</span><span class="o">:</span>    
    <span class="p">...</span>
<span class="k">case</span> <span class="s2">&quot;#admin&quot;</span><span class="o">:</span>  
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div>
<p>通过<code>window.location.hash=hash</code>这个语句来调整地址栏的地址，使得浏览器里边的“前进”、“后退”按钮能正常使用（实质上欺骗了浏览器）。然后再根据hash值的不同来显示不同的面板（用户可以收藏对应的面板了），这就使得Ajax页面的浏览趋于传统化了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python IDE 开发工具]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/21/python-ide/"/>
    <updated>2014-12-21T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/21/python-ide</id>
    <content type="html"><![CDATA[<h2>Python IDE</h2>

<ul>
<li><strong>Eclipse</strong>，用 Python 做大项目的时候一直用它，装上 <strong>Pydev</strong> 即可用，优点是很稳定，缩进不出错</li>
<li><strong>IDLE</strong>，Windows 下安装 Python 自带的，偶尔用它的 ctrl+M-打开模块，出现 IndentationErrorr 的时候，用它来救命</li>
<li><strong>Emeditor</strong>，速度很快的编辑器，写小段代码的时候用，而且可以方便的打开命令行窗口，同时 cd 到当前文件所在目录，方便执行代码</li>
<li><strong>Sublime Text2</strong>，新锐作品，插件很多</li>
<li><strong>Pycharm</strong>，收费软件，网上评价很高，安装之后发现，慢，丑，挫，10 秒钟删除</li>
<li><strong>Ulipad</strong>，使用过一次，没有特别好感，删除</li>
</ul>

<!--more-->

<h2>Python 各种编辑器常见的问题</h2>

<ul>
<li><p>缩进混乱
没有办法，各个编辑器对于 tab 和空格的配置都不同意，写代码的适合经常会遇到IndentationError，然后只能很窝心的一行一行调整</p></li>
<li><p>代码智能提示
各家都没有这个功能，无解，忍了</p></li>
</ul>

<p>综合评估，目前我推荐的 python 编辑器是：sublime text2，加上 <strong>File navigator</strong> 插件之后，非常好用。</p>

<hr>

<h2>Others:</h2>

<p>Pycharm、 eric5、 EPD Canopy、 Komodo、 VS+PTVS</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox Issues and Solutions]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/19/firefox-related-issues/"/>
    <updated>2014-12-19T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/19/firefox-related-issues</id>
    <content type="html"><![CDATA[<p>List some issues about firefox when working with it, and would update all the time.</p>

<ul>
<li>I1: Profile Missing</li>
<li>I2: </li>
<li>I3: </li>
<li>I4: </li>
<li>I5: </li>
<li>I6: </li>
<li>I7: </li>
</ul>

<!--more-->

<h2>I1: Profile Missing</h2>

<p>Windows 7环境下Install Firefox后，启动Firefox报错：</p>

<blockquote>
<p>&ldquo;Your Firefox profile cannot be loaded. It may be missing or inaccessible.&rdquo;</p>
</blockquote>

<p><img src="/media/pictures/firefox-related-issues/f1.png" alt="Profile Missing"></p>

<p><strong>原因</strong>：排除权限问题外，基本是跟<code>Profiles.ini</code>文件相关。</p>

<p>之前安装Firefox和Firefox Developer Edition，感觉Developer版本还不错，就Uninstall前者。但用过一段时间后，发现Developer Edition问题太多，实在无法接受，于是就重新用Stable版本。然后就出现问题了。</p>

<p>当时Uninstall的时候，记得清掉了它相应的Profile目录（对应下面ini文件中Profile0.Path的值），但Profiles.ini文件未改；那么再Install Firefox并启动，依然读取旧的ini配置文件，而配置文件中改版本的Firefox目录一清除，因此报错。</p>

<p>Old Profiles.ini:</p>

<pre>
[General]
StartWithLastProfile=1

[Profile0]
Name=default
IsRelative=1
Path=Profiles<font color="fuchsia">/r8gi0ws7.default</font>
Default=1

[Profile1]
Name=dev-edition-default
IsRelative=1
Path=Profiles/86xqzf6m.dev-edition-default
</pre>

<p>因为清掉了Profile0中的Path值对应的路径，所以Launch Firefox失败。</p>

<p><strong>解决办法</strong>: 要么删掉ini文件中的Profile0代码块，要么在Profiles目录下面New个Profile0.Path对应的目录。</p>

<p>下面这个是删除Profile0，再启动Firefox重新配置的结果。前后对比，只有Profile0的Path值变化。（Win7环境，Profiles.ini文件可以通过开始菜单，执行<code>%APPDATA%\Mozilla\Firefox</code>找到。）</p>

<p>New Profiles.ini:</p>

<pre>
[General]
StartWithLastProfile=1

[Profile0]
Name=default
IsRelative=1
Path=Profiles<font color="cyan">/3rv0l2m8.default</font>
Default=1

[Profile1]
Name=dev-edition-default
IsRelative=1
Path=Profiles/86xqzf6m.dev-edition-default
</pre>

<p><strong>Further learing</strong>: Profile Manager</p>

<p>Mozilla applications store your personal settings, added extensions and themes, and user data such as bookmarks, passwords, cookies and mail in a &ldquo;<a href="http://kb.mozillazine.org/Profile_folder">profile</a>&rdquo;.</p>

<p>The Profile Manager allows you create and manage profiles.</p>

<p>A new profile is useful for troubleshooting since it allows the application to run without extensions, themes, or customized settings. If you have multiple profiles you can use the Profile Manager to switch profiles.</p>

<p>Accessing the <a href="http://kb.mozillazine.org/Profile_Manager#Accessing_the_Profile_Manager">Profile Manager</a>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Windows: &quot;Start&quot; menu --&gt; &quot;Run&quot;
    firefox.exe -profilemanager
    firefox.exe -P

Linux: 
    ./firefox -profilemanager

Mac OS X:
    /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager
</code></pre></div>
<h2>I2:</h2>

<hr>

<p>Continue&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是时候放弃 PageRank 了]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/18/it-is-time-to-ignore-pagerank/"/>
    <updated>2014-12-18T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/18/it-is-time-to-ignore-pagerank</id>
    <content type="html"><![CDATA[<p>2014 年 11 月 24 日，Google 官方发言人 John Mueller 再 Video Hangouts 中表示，Google 已经决定放弃 PageRank，同时，也建议各位 SEO 不要再采用 PageRank 作为参考。其实 John Mueller 早在去年，就曾表示今后不太可能更新 PageRank。</p>

<p><img src="http://i2.tietuku.com/68a8223dd79de1c0.png" alt="John Mueller"></p>

<!--more-->

<blockquote>
<p>I wouldn&rsquo;t use PageRank or links as a metric. We&rsquo;ve last updated PageRank more than a year ago (as far as I recall) and have no plans to do further updates. Think about what you want users to do on your site, and consider an appropriate metric for that.<br>
<a href="http://googlewebmastercentral.blogspot.ch/2011/06/beyond-pagerank-graduating-to.html">http://googlewebmastercentral.blogspot.ch/2011/06/beyond-pagerank-graduating-to.html</a></p>
</blockquote>

<p>Forum discussion at <a href="https://productforums.google.com/forum/#!msg/webmasters/dKPZID4N3v0/tKI43QpLUWsJ">Google Webmaster Help</a></p>

<p>PageRank是Google专有的算法，用于衡量特定网页相对于搜索引擎索引中的其他网页而言的重要程度。它由Larry Page 和 Sergey Brin在20世纪90年代后期发明。PageRank实现了将链接价值概念作为排名因素。</p>

<p>关于 PageRank 的详细介绍：</p>

<ul>
<li><a href="http://zh.wikipedia.org/wiki/PageRank">http://zh.wikipedia.org/wiki/PageRank</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages Issue]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/16/github-pages-issue/"/>
    <updated>2014-12-16T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/16/github-pages-issue</id>
    <content type="html"><![CDATA[<h2>1. Fork 别人的 Pages 代码库不工作</h2>

<p>在 GitHub 上面 Fork 别人的网站代码库后，通过自己账户下的 URL 路径无法访问网站。<br>
这时，必须手动更新一下从人家那里 Fork 来的代码，然后提交一次；之后，一般自己账户下的网站就能正常工作了。</p>

<p>如果还是不行，试试点击 GitHub 仓库的 <strong>“Settings”</strong> 中的 <strong>“GitHub Pages”</strong> 条目下的 URL 看，而先不要直接在浏览器地址栏输入网站 URL。</p>

<h2>2. Not found “_site” directory destination</h2>

<p><font color="red"><b>“It&rsquo;s missing, and don&rsquo;t know why&hellip;”</b></font></p>

<p>根据 Jekyll 的工作机制，本地运行 Jekyll build，默认将生成的静态网站文件放在根目录下的 <code>_site</code> 目录。而 GitHub Pages 后端以 Jekyll 作为渲染引擎，解析处理网站源文件，那么也要缓存静态文件到某个地方。<br>
现在情况是，博主没有在网站 Repo 里面找到这样的结果目录，那么 GitHub 把生成的静态文件放到哪里了呢？  </p>

<p>以前，一直以为一定会放在 Repo 下面，所以当注意到没有这个 <code>_site</code> 目录时，就认为 GitHub 丢失了它；亦或是隐藏起来。</p>

<p>因为想不通原因，所以干脆发 Email 问 GitHub 的员工，这才明白，原来所有的 GitHub Pages 生成的静态文件都被统一起来集中管理，并非在每个 Repo 单设一个 destination。<br>
按照 GitHub Pages 的 URL 说明，同一用户下面所有的项目页面应该位于用户页面的根目录下（路径名即为各个项目页的目录），我想这也是以用户名作为网页域名的原因了。</p>

<blockquote>
<p>“<em>You should not include the <strong>&#95;site</strong> directory in your repository. We run a Jekyll build on the contents of your repository and publish the result (usually generated to the <strong>&#95;site</strong> directory when running locally) to our <strong>GitHub Pages infrastructure</strong>.</em>” &emsp;&emsp;&emsp;&emsp;   &ndash; From: James Dennes <em>(GitHub Staff)</em></p>
</blockquote>

<hr>

<h4>后记</h4>

<p>后来自己琢磨了一会儿，貌似懂了，就没再去多想，但好想遗漏了点东西。<br>
直到某天，偶然看 Git 的教程时，看到 Git hook 这个东西，顿时想起 Jekyll 文档也有这方面的介绍。然后又是好奇地回头看了看 Jekyll，此时联想到了这个问题。</p>

<p>大胆猜测下，GitHub 的后端服务器用到了 <strong>“Git post-receive hook”</strong> 这样一个 Git 功能，它能够监听来自客户端 Git 操作触发的事件，在服务端执行一些脚本。也就是说，我们每次 Push 代码后，GitHub 服务端监听到了这个事件，然后运行脚本进行 Jekyll 后台编译更新代码库的输出内容，出现问题就发送 Email。<br>
至于，Jekyll 输出到哪里了，正如那位兄弟所说，集中到某个地方统一管理了。</p>

<p>这就是之前“遗漏”的点了，终于想通了。<br>
同时这就是解释了上面第一个问题，Fork 他人代码后，并没有触发事件，GitHub 后台也就不会执行 Jekyll 编译网站，所有这个网站无法访问。</p>

<p>Jekyll 里面关于 Git hook 的说明参考 <a href="http://jekyllrb.com/docs/deployment-methods/#automated-methods"><strong>Automated methods</strong></a>。</p>

<h2>3. Windows 平台安装 Ruby</h2>

<!--more-->

<p>不要忘记安装下面这个东西，Jekyll 依赖的某些组件可能需要 DevKit 本地进行编译。<br>
另外，安装 Ruby 过程中一定要将 Ruby 的执行目录添加到 Windows 当前用户的 <code>PATH</code> 环境变量中：<strong>“Add Ruby executables to your PATH”</strong>。</p>

<p>- <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">RubyInstaller Development Kit</a><br>
- <a href="http://rubyinstaller.org/add-ons/devkit">DevKit Overview</a></p>

<h2>4. Liquid Exception: cannot load such file &ndash; yajl/2.0/yajl</h2>

<p>windows下如果以pygments.rb为高亮plugin，并使用Ruby 2.0及以上版本，会出现如下错误：</p>

<p><img src="/media/pictures/github-pages-issue/yajl_load_error.gif" alt="yajl load error" title="cannot load yajl"></p>

<p>原因是install的预编译 yajl-ruby gems <code>x86-mingw32</code> 无法兼容 Ruby 2.0<br>
下面是 <a href="https://groups.google.com/d/msg/rubyinstaller/mg5ailNICvM/QbBfNByec-0J">RubyInstaller announcement for Ruby 2.0.0 release</a>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">* Existing pre-compiled gems are not Ruby 2.0 compatible 

Ruby 2.0 introduces ABI breakage which means compiled C extensions with previous 
1.9.3 will work with Ruby 2.0. 

DO NOT install Ruby 2.0 on top of existing Ruby 1.9.3, or try to use compiled 
extensions with it. 

You will be required to force compilation of those gems: 

    gem install &lt;name&gt; --platform=ruby 

This will require you have the extra dependencies required for that gem to 
compile. Look at the gem documentation for the requirements. 
</code></pre></div>
<p>解决方法，要么改用1.9.x的 Ruby ，要么下载要求的<a href="http://rubygems.org/gems/yajl-ruby/versions/1.1.0">.gem</a>文件(not the pre-compiled one)，重新安装<code>yajl</code>。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem uninstall yajl-ruby
<span class="c"># 删除存在的问题 gems (x86-mingw32)</span>
gem install yajl-ruby -v 1.1.0 --platform<span class="o">=</span>ruby
<span class="c"># 安装要求的gem文件(必需指定version，pygments.rb 0.6.0 只依赖 yajl-ruby 1.1.0)</span>
bundle check
</code></pre></div>
<p><strong>Note:</strong><br>
Bundler will keep attempting to install x86-mingw32, so you will need to be careful when doing <code>bundle install</code> or <code>bundle update</code>.</p>

<p>或者也可以试试下载<a href="http://rubygems.org/gems/yajl-ruby/versions/1.1.0">.gem</a>文件，本地编译（注意，version必须指定为 <strong>1.1.0</strong>），不过windows下面可能还有点问题，因为没有<code>make</code> <code>gcc</code>命令（默认Git Shell不会安装Linux的编译指令），所以需要下载安装native Win32下的GNU开发环境<a href="http://www.mingw.org/">MinGW</a>或者<a href="http://www.cygwin.com/">Cygwin</a>。</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c"># build it yourself by installing rubyinstaller, the devkit and running:</span>
gem install gem-compiler
gem fetch yajl-ruby --platform<span class="o">=</span>ruby -v 1.1.0
gem compile yajl-ruby-1.1.0.gem

<span class="c"># to use the binary gem:</span>
gem uninstall yajl-ruby
gem install yajl-ruby-1.1.0.gem
</code></pre></div>
<p>相关的 yajl-ruby issue:<br>
- <a href="https://github.com/brianmario/yajl-ruby/issues/116">brianmario/yajl-ruby#116</a><br>
- <a href="https://github.com/jekyll/jekyll-help/issues/50">jekyll/jekyll-help#50</a></p>

<h2>5. Liquid Exception: No such file or directory - python C:/Ruby193/lib/ruby/gems/1.9.1/gems/pygments.rb-0.5.0/lib/pygments/mentos.py</h2>

<p>Check your <code>PATH</code> environment variable, like <code>;C:\python27</code>;<br>
Make sure that have installed Python 2.x and set env path for pygments.rb call.</p>

<p>相关的 Jekyll issue:<br>
- <a href="https://github.com/jekyll/jekyll/issues/2551">jekyll/jekyll#2551</a></p>

<p><strong>Note:</strong><br>
之所以要安裝 Python 是因為 代码高亮 plugin &ndash; <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a>，是基于 Python 的代码高亮工具 <a href="http://pygments.org/">Pygments</a> 的一个 Ruby wrapper，内嵌 Python 解释器，兼容 Python 2.5、Python 2.6 和 Python 2.7。旧版的解释是，还需安装 RubyPython 调用 Python Pygments 包；雖然 Pygments 支援 Python 2 版和 3 版，不過由於 Ruby 和 Python 之間的橋接是用 RubyPython 完成，而 <a href="http://www.rubydoc.info/gems/rubypython/0.6.3/frames#Requirements">rubypython</a> 目前只支援 Python 2。所以還是乖乖安裝 2 版吧！（<a href="https://github.com/tmm1/pygments.rb/blob/master/README.md">见pygments.rb</a>的<code>README.md</code>）</p>

<h2>6. Jekyll 强制 Categories 单词小写</h2>

<p><code>post</code> 可以定义 categories 和 tags，但是 Jekyll 解析 post 时会自行将 <code>categories</code> 转成小写单词输出，而 <code>tags</code> 不会转换。<br>
比如，post的YAML front matter 是：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
<span class="l-Scalar-Plain">category</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Mathematica//Math-Experiment</span>
<span class="l-Scalar-Plain">Tags</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Formula Periodic Sequence</span>
<span class="nn">---</span>
</code></pre></div>
<p>而 Jekyll 会将 category 转换为 <code>mathematica//math-experiment</code> 输出。<br>
如果不想 Jekyll 输出小写 category，可以变通下让单词首字母大写显示，但无法还原 post 定义的样式。<br>
而如果 GitHub 上面 deploy 的是 <code>_site</code> 文件，那么可以 local 更改源码 post.rb 文件让其输出最初定义的格式，不过这样可能有潜在的问题(可以规避)。具体见下面的 issue 链接。</p>

<pre><code>{% for tag in page.categories %}
&lt;a href="{{ site.url }}/categories/index.html#{{ page.categories | cgi_encode }}" data-toggle="tooltip" title="Other posts from the {{ <font color="red">tag | capitalize</font> }} category" rel="tag"&gt;{{ <font color="red">tag | capitalize</font> }}&lt;/a&gt;
{% unless forloop.last %}&amp;nbsp;&amp;bull;&amp;nbsp;
{% endunless %}
{% endfor %}
</code></pre>

<p>相关的 Jekyll issue:<br>
- <a href="http://stackoverflow.com/questions/19074064/why-jekyll-convert-my-capital-words-into-lowercase-in-categories">Why Jekyll convert my Capital words into lowercase in Categories</a><br>
- <a href="https://github.com/jekyll/jekyll/issues/842">jekyll/jekyll#842</a></p>

<h2>7. warning: cannot close fd before spawn; &lsquo;which&rsquo; is not recognized as an internal or external command, operable program or batch file</h2>

<p>Windows环境下使用<code>pygments.rb</code>高亮code，即使plugin正常运行，但目前还存在这个麻烦的问题。因为是warning，所以本地运行Jekyll，一般可以忽略。<br>
然而博主由于强迫症猝发，本着追求完美的心态，就仔细追查了这个问题的根源。<br>
其实还是由Windows和Linux的系统环境造成的，确实比较麻烦。虽说解决方法有几个，目前 pygments.rb 0.6.0 仍然未得到解决。</p>

<p><img src="/media/pictures/github-pages-issue/cannot_close_fd.png" alt="cannot close fd before spawn" title="&quot;cannot close fd before spawn&quot;"></p>

<p>如图中所示，&#39;which&#39; not found 是因为Windows Shell环境找不到这个命令（Cygwin和MinGW是可以找到的）。<br>
问题实质不在posix-spawn上，它没有调用<code>which</code>，而是pygments.rb调用<code>which</code>查询Windows下面Python的路径。由于pygments.rb要求Python 2.x，而Python 2.x和3.x可能同时在系统中存在，不同于Linux的是，Windows下无法判断<code>which</code>寻找到的<code>python</code>指令的版本，因而没有合适的处理这里。<br>
此处的详细代码逻辑见<a href="https://github.com/koron/pygments.rb/commit/edf6665506b57b333c5f8838d86a9f7ab3016517">这里</a>。</p>

<p>规避这个warning有两个变通的方法:<br>
a. 上面链接的commit是其一，可以直接修改本地的 <a href="https://github.com/koron/pygments.rb/commit/edf6665506b57b333c5f8838d86a9f7ab3016517">popen.rb</a> 代码;</p>

<pre># Detect a suitable Python binary to use. We can't just use `python2`
# because apparently some old versions of Debian only have `python` or
# something like that.
def python_binary
    <font color="cyan">if RUBY_PLATFORM =~ /(mswin|mingw|cygwin|bccwin)/
        return 'python'
    end</font>
    @python_binary ||= begin
        `which python2`
        $?.success? ? "python2" : "python"
    end
end</pre>

<p>b. 另一方法见<a href="https://github.com/hickford/pygments.rb/commit/c6554620e34f3b73c1915b287ac59cc9d977a20a">Fix Python hunting logic on Windows</a>。(需要注意的是，这个方法需要安装<a href="https://docs.python.org/3.3/using/windows.html#python-launcher-for-windows">Python Launcher</a>，目的是利用<code>py -2</code>调用Python 2.x解释器)</p>

<p>相关的 GitHub Issue:<br>
- <a href="https://github.com/tmm1/pygments.rb/pull/90">tmm1/pygments.rb#90</a><br>
- <a href="https://github.com/tmm1/pygments.rb/pull/138">tmm1/pygments.rb#138</a><br>
- <a href="https://github.com/rtomayko/posix-spawn/issues/61">rtomayko/posix-spawn#61</a><br>
- <a href="https://github.com/jekyll/jekyll/issues/2789">jekyll/jekyll#2789</a><br>
- <a href="https://github.com/jekyll/jekyll/issues/2052">jekyll/jekyll#2052</a></p>

<h2>8. 在 Windows下使用 Jekyll 出现中文字符集错误</h2>

<p>在 windows 下使用 Jekyll 时经常会遇到字符集错误，比如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Liquid error: incompatible character encodings: UTF-8 and GBK
</code></pre></div>
<p>这里介绍几种解决方案。</p>

<ul>
<li><p><strong>修改 bash 的字符集</strong><br>
在 <code>C:\Documents and Settings\用户名</code>下，找到文件 <code>.bash_profile</code>，后面加两行：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">set </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
<span class="nb">set </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</code></pre></div></li>
<li><p><strong>所有文档使用 utf-8 无 BOM 格式</strong><br>
在 Windows 下新建的文本文件默认是 <strong>ANSI</strong> 格式的，而 Jekyll 只认 utf-8。如果遇到 ANSI 格式编码的文件，可以在 Notepad++ 中转换</p></li>
<li><p><strong>使用 Unix 换行符</strong><br>
可以在 Notepad++ 中转换，开启<strong>“显示所有字符”</strong>选项，这样就可以看出文档用的是 Windows 的换行符还是 Unix 的换行符。<br>
在这种模式下，Windows 的换行符显示的是 <code>CR</code>，Unix 的换行符显示的是 <code>LF</code>。</p></li>
<li><p><strong>Notepad++ 新建文档配置首选项</strong><br>
在<strong>设置&ndash;&gt;首选项</strong>里，如下设置：<br>
<img src="/media/pictures/github-pages-issue/utf-8_no_bom.png" alt="转换为utf-8编码"></p></li>
<li><p><strong>注意 YAML 头部的格式</strong><br>
模板文件的元数据以 YAML 的格式展现，YAML 头部经常会出现三个问题：<br>
(1) 三短线前面不能有空格；<br>
(2) <strong>“名: 值”对</strong>里冒号后面要有空格；<br>
(3) 回车后不要有 Tab 符；<br>
(4) 表示<strong>数组成员</strong>开始的 <code>-</code> 号后面要有空格<br>
在 Notepad++ 中开启<strong>“显示所有字符”</strong>选项后，就可以看清空格和 Tab 符了</p></li>
</ul>

<p>除此之外，假如 post 文件名中含有中文，或者任何<strong>非 ASCII 编码的字符</strong>，那么 Jekyll 新版本依然能正常编译，只是本地预览时无法正常显示；不用担心，推送到 GitHub 上后是可以访问的。</p>

<p><img src="/media/pictures/github-pages-issue/encode_error.jpg" alt="URL Encodeing Error"></p>

<p>这是 Jekyll 本身问题，如果将生成的静态文件放到其他 <strong>Web 容器</strong>，比如 <strong>Apache</strong>、<strong>Nginx</strong>等，此时也是可以访问的。这类问题也可以扩展到 <strong>URL 路径中存在中文字符</strong>的情形。由于 Jekyll 对 utf-8 编码的处理的比较好，所以我们新建 page 或 post 时尽量使用英文命名。</p>

<h2>9. Markdown 中的代码块高亮</h2>

<p>Jekyll 原生提供 <code>{% highlight language %}</code> 命令来格式代码块，进行语法高亮。除此之外，基本主流 Markdown 解析器（包含 GitHub Flavored Markdown）还支持用一对3个反引号 <code>```</code> 的符号来标记代码块，简化上面的命令代码。</p>

<p>博主在使用 Markdown 语法的过程中发现，对于第二种方式，只有 <code>redcarpet</code> 和 <code>kramdown</code> 这两个解析器能够识别并格式代码块为 Html 文本格式；而常用的 <code>rdiscount</code> 解析器不能识别这种标记，无法添加 Html 标签和 CSS 类来转换代码块。</p>

<p>3 个解析器及相关 gem 组件的版本为：</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">gems</span>
    <span class="p">{</span>
      <span class="c1"># Jekyll</span>
      <span class="s2">&quot;jekyll&quot;</span>                <span class="o">=&gt;</span> <span class="s2">&quot;2.4.0&quot;</span><span class="p">,</span>
      <span class="s2">&quot;jekyll-coffeescript&quot;</span>   <span class="o">=&gt;</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
      <span class="s2">&quot;jekyll-sass-converter&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1.2.0&quot;</span><span class="p">,</span>

      <span class="c1"># Converters</span>
      <span class="s2">&quot;kramdown&quot;</span>              <span class="o">=&gt;</span> <span class="s2">&quot;1.3.1&quot;</span><span class="p">,</span>
      <span class="s2">&quot;maruku&quot;</span>                <span class="o">=&gt;</span> <span class="s2">&quot;0.7.0&quot;</span><span class="p">,</span>
      <span class="s2">&quot;rdiscount&quot;</span>             <span class="o">=&gt;</span> <span class="s2">&quot;2.1.7&quot;</span><span class="p">,</span>
      <span class="s2">&quot;redcarpet&quot;</span>             <span class="o">=&gt;</span> <span class="s2">&quot;3.1.2&quot;</span><span class="p">,</span>
      <span class="s2">&quot;RedCloth&quot;</span>              <span class="o">=&gt;</span> <span class="s2">&quot;4.2.9&quot;</span><span class="p">,</span>

      <span class="c1"># Liquid</span>
      <span class="s2">&quot;liquid&quot;</span>                <span class="o">=&gt;</span> <span class="s2">&quot;2.6.1&quot;</span><span class="p">,</span>

      <span class="c1"># Highlighters</span>
      <span class="s2">&quot;pygments.rb&quot;</span>           <span class="o">=&gt;</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">,</span>

      <span class="c1"># Plugins</span>
      <span class="s2">&quot;jemoji&quot;</span>                <span class="o">=&gt;</span> <span class="s2">&quot;0.3.0&quot;</span><span class="p">,</span>
      <span class="s2">&quot;jekyll-mentions&quot;</span>       <span class="o">=&gt;</span> <span class="s2">&quot;0.1.3&quot;</span><span class="p">,</span>
      <span class="s2">&quot;jekyll-redirect-from&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;0.6.2&quot;</span><span class="p">,</span>
      <span class="s2">&quot;jekyll-sitemap&quot;</span>        <span class="o">=&gt;</span> <span class="s2">&quot;0.6.0&quot;</span><span class="p">,</span>
    <span class="p">}</span>
<span class="k">end</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll 中用 Highlight.js]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/15/use-highlight.js-for-jekyll/"/>
    <updated>2014-12-15T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/15/use-highlight.js-for-jekyll</id>
    <content type="html"><![CDATA[<p>前面试用过语法高亮JS插件 <a href="/blog/2014/12/15/Use-Syntaxhighlighter-for-Jekyll/">SyntaxHighlighter</a> 和 <a href="/blog/2014/12/15/Use-google-code-prettify-for-jekyll/">Google-Code-Prettify</a>，感觉要么就是加载太慢点开页面需要等，要么就是太过灵活以至总是会出现奇怪的着色问题。归根结底都没有 <a href="http://pygments.org">Pygments</a> 用起来方便。后来，博主又看到另一个语法高亮工具 - <strong><a href="https://highlightjs.org/" title="Syntax highlighting for the Web">highlight.js</a></strong>，不仅支持的语言远超前2两个，有可配置的参数，而且加载运行快，着色效果又出色，还有官方提供很多主题选择。最重要的是，它非常适应 Markdown 的代码块解析后的结构，不需要另外设置代码块的CSS样式类。这个JS插件可以说是除了Pygments外最出色的了吧。</p>

<h2>Version 8.4 特色</h2>

<p>Highlight.js 是基于 Javascript 的语法高亮工具，工作于浏览器端和服务器端，并且不依赖任何框架，能够自动探测相当多的语言类型。</p>

<blockquote>
<ul>
<li>112 languages and 49 styles (<a href="/media/demo/codeHighlight/highlight.js/live_demo.html">live demo</a>)</li>
<li>automatic language detection</li>
<li>multi-language code highlighting</li>
<li>available for node.js</li>
<li>works with any markup</li>
<li>compatible with any js framework</li>
</ul>
</blockquote>

<!--more-->

<h2>Getting Started</h2>

<p>最简单的用法就是在网页里面链接相关js库和css主题样式，然后执行 <code>initHighlightingOnLoad</code>:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/path/to/styles/default.css&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/path/to/highlight.pack.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span><span class="nx">hljs</span><span class="p">.</span><span class="nx">initHighlightingOnLoad</span><span class="p">();</span><span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>它会查找<code>&lt;pre&gt;&lt;code&gt;</code> tags 内的高亮代码，并尝试识别代码语言。如果识别失败，我们还可以用class属性指定语言类型：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre&gt;&lt;code</span> <span class="na">class=</span><span class="s">&quot;html&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div>
<p>其中，支持的语言 class <a href="http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html" title="CSS classes reference">参考这里</a><br>
Class属性值即语言标示符, 也可以加上这两种前缀(<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-code-element">recommended in the HTML Living Standard</a>): <code>language-</code> 或 <code>lang-</code>, 这个 class 可以用在 <code>&lt;code&gt;</code> 元素上，也可用在 <code>&lt;pre&gt;</code> 元素上。这个特点兼容 Markdown 文本的代码语法，不需要额外设置 class ，使用<code>` ` `cpp</code>就可以直接标记语言为 <strong>C++</strong></p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre&gt;&lt;code</span> <span class="na">class=</span><span class="s">&quot;language-cpp&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div>
<p>完全禁用 highlighting 可以用这个 class - <code>no-highlight</code>:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre&gt;&lt;code</span> <span class="na">class=</span><span class="s">&quot;no-highlight&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div>
<p>虽然官方文档没有提及，这里还是说下，<code>hljs.initHighlightingOnLoad()</code>可以放在任意地方，不需要一定放在<code>window.onload</code>或者<code>$(document).ready</code>，<code>initHighlightingOnLoad</code>内部有相关处理。</p>

<h2>Custom Initialization</h2>

<p>使用 <code>highlightBlock</code> 和 <code>configure</code> 来设定 highlight.js 几个配置参数，控制语法高亮的执行过程。<br>
可以使用jQuery调用 <code>initHighlightingOnLoad</code> :</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pre code&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">block</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">hljs</span><span class="p">.</span><span class="nx">highlightBlock</span><span class="p">(</span><span class="nx">block</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p>允许使用<code>highlightBlock</code>动态高亮网页代码块，但是一定确保不要对已经高亮过的代码使用该函数。</p>

<p><code>configure(options)</code>说明：</p>

<blockquote>
<ul>
<li><strong>tabReplace</strong>: a string used to replace TAB characters in indentation</li>
<li><strong>useBR</strong>: a flag to generate <code>&lt;br&gt;</code> tags instead of new-line characters in the output, useful when code is marked up using a non-&lt;pre&gt; container</li>
<li><strong>classPrefix</strong>: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets</li>
<li><strong>languages</strong>: an array of language names and aliases restricting auto detection to only these languages</li>
</ul>
</blockquote>

<p>例如，可以使用任何HTML标签代替<code>&lt;pre&gt;&lt;code&gt;</code>作为高亮代码的标记。假如没有使用像<code>&lt;pre&gt;</code>一样可以保留换行符的HTML容器，那么就要配置 highlight.js 使用 <code>&lt;br&gt;</code> tag 作为输出:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">hljs</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span><span class="nx">useBR</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>

<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.code&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">block</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">hljs</span><span class="p">.</span><span class="nx">highlightBlock</span><span class="p">(</span><span class="nx">block</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>也可以：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">hljs</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span>
  <span class="nx">tabReplace</span><span class="o">:</span> <span class="s1">&#39;    &#39;</span><span class="p">,</span> <span class="c1">// 4 spaces</span>
  <span class="c1">// ... or</span>
  <span class="c1">// tabReplace = &#39;&lt;span class=&quot;indent&quot;&gt;\t&lt;/span&gt;&#39;;</span>
  <span class="nx">classPrefix</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>     <span class="c1">// don&#39;t append class prefix</span>
                      <span class="c1">// … other options aren&#39;t changed</span>
<span class="p">})</span>
<span class="nx">hljs</span><span class="p">.</span><span class="nx">initHighlighting</span><span class="p">();</span>
</code></pre></div>
<h2>Node.js &amp; AMD</h2>

<p>Highlight.js 还可以用于 node.js 和 AMD loader。详细的说明见<a href="https://github.com/isagalaev/highlight.js/tree/jade">这里</a></p>

<h2>- 结束语 -</h2>

<p>最后提一下，最初设计 highlight.js 是不支持代码块显示行号的，看 <a href="http://highlightjs.readthedocs.org/en/latest/line-numbers.html" title="Line numbers - &#39;Evil&#39;">Ivan Sagalaev的解释</a>。
但是，GitHub上面还是有<a href="https://github.com/isagalaev/highlight.js/tree/line-numbers">&ldquo;line-numbers&rdquo;</a>这个branch的，默认的css主题开启显示行号。有兴趣的话，可以自己下载源码看下效果，也可以看本文最前面给的demo链接里面的效果。<br>
其他主题css，添加下面样式，即可显示行号：</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">pre</span> <span class="p">{</span>
  <span class="k">counter-reset</span><span class="o">:</span> <span class="n">lines</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">pre</span> <span class="nc">.line</span> <span class="p">{</span>
  <span class="k">counter-increment</span><span class="o">:</span> <span class="n">lines</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">pre</span> <span class="nc">.line</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>

  <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
  <span class="n">user</span><span class="o">-</span><span class="n">select</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>

  <span class="k">content</span><span class="o">:</span> <span class="n">counter</span><span class="p">(</span><span class="n">lines</span><span class="p">);</span> <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
  <span class="k">padding-right</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span> <span class="k">margin-right</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="k">color</span><span class="o">:</span> <span class="m">#BBB</span><span class="p">;</span> <span class="k">border-right</span><span class="o">:</span> <span class="k">solid</span> <span class="m">1px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>另外，具体 API 文档和其他 topics 请移步 <a href="http://highlightjs.readthedocs.org" title="highlight.js developer documentation"><strong>Docs Library</strong></a></p>

<hr>

<h2>Awesome Prism</h2>

<p>注：最近发现一个类似的语法高亮工具 - <a href="http://prismjs.com">Prism</a>，虽然CSS主题只有6个，但提供的功能Plugins相当多。</p>

<blockquote>
<p><em>Prism is a lightweight, extensible syntax highlighter, built with modern web standards in mind. It’s a spin-off from <a href="http://dabblet.com">Dabblet</a>.</em></p>
</blockquote>

<p>使用方法很简单，去<a href="http://prismjs.com/download.html">download page</a>获取需要的JS和CSS文件，放进自己网页。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;themes/prism.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;prism.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p>再为标记的代码块添加语言类型(language-{LANGUAGE_NAME})：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre&gt;</span>
  <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">&#39;language-javascript&#39;</span><span class="nt">&gt;</span>
    if( awesome ){
      console.log(&#39;This is Awesome&#39;);
    }else{
      $(&#39;body&#39;).addClass(&#39;give-me-awesome&#39;);
    }
  <span class="nt">&lt;/code&gt;</span>
<span class="nt">&lt;pre&gt;</span>
</code></pre></div>
<p>如果要阻止对某个代码块语法高亮，对<code>&lt;code&gt;</code>使用这个class:<code>language-none</code>；而如果要禁用JS自动高亮代码块，那么就在<code>&lt;script&gt;</code>上添加属性：<code>data-manual</code>：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;prism.js&quot;</span> <span class="na">data-manual</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p>详细的用法和Plugins介绍点<a href="http://prismjs.com/#basic-usage">这里</a>。博主自己也测试了下(<a href="/media/demo/codeHighlight/prism_cpp.html">Demo</a>)，发现代码片段非常多时，其渲染页面速度相比 highlight.js 要快些。另外，Prism 受制于浏览器版本，对最近的浏览器支持比较好。</p>

<p>Reference:</p>

<ul>
<li><a href="http://lea.verou.me/2012/07/introducing-prism-an-awesome-new-syntax-highlighter/#more-1841" title="Introducing Prism: An awesome new syntax highlighter">Why another syntax highlighter ?</a></li>
<li><a href="http://gmurphey.com/2012/08/09/jekyll-plugin-syntax-highlighting-with-prism.html" title="Jekyll: Replacing Pygments Highlighting With Prism.js">Jekyll Plugin: Syntax Highlighting With Prism</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll 中用 Google Code Prettify]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/15/Use-google-code-prettify-for-jekyll/"/>
    <updated>2014-12-15T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/15/Use-google-code-prettify-for-jekyll</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本站博客在搭建过程中，试用过多个JS代码高亮工具，之前讲过的<a href="http://alfred-sun.github.io/blog/2014/12/15/Use-Syntaxhighlighter-for-Jekyll/">SyntaxHighlighter</a>虽然漂亮，但是加载渲染太慢，果断放弃。<br>
本文中介绍的这个<a href="https://code.google.com/p/google-code-prettify/">google-code-prettify</a>就不同了，支持的语言数量比较多、比较全，支持自动识别代码语言，不需要手动指定，渲染效果也不错。最重要的是，非常轻巧，加载速度远比SyntaxHighlighter快得多，而且，可以直接使用 Markdown 的语法写代码。<br>
只有一点在Jekyll解析时不方便，就是当需要指定语言时，Markdown 解析出来的HTML代码class样式名称跟google-code-prettify要求的不同。不过博主目前还没有发现，指定语言的参数的有用之处。因为google-code-prettify自动识别语言和指定语言高亮代码的效果基本一样。</p>

<p>在本文中简称 google-code-prettify 的渲染引擎为：<strong>Prettyprinter</strong></p>

<!--more-->

<h2>Prettyprinter 用法</h2>

<h3>Prettyprinter 脚本加载</h3>

<p>google-code-prettify有两种加载方式：</p>

<h4>a. Auto-Loader</h4>

<p>直接通过URL加载Prettyprinter用到的JS和CSS文件，在页面加载的过程中执行Prettyprinter。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=css&amp;skin=sunburst&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p>上面的链接指定<code>lang</code>加载<code>CSS</code>语言的扩展，指定<code>skin</code>加载<code>sunburst</code>样式。此外，还可以为 Prettyprinter 指定其他 CGI 参数，如下表：</p>

<table><thead>
<tr>
<th>CGI 参数</th>
<th>默认值</th>
<th>含义</th>
</tr>
</thead><tbody>
<tr>
<td>autoload=(true &#124; false)</td>
<td>true</td>
<td>run automatically on page load</td>
</tr>
<tr>
<td>lang=&hellip;</td>
<td>none</td>
<td>Loads the language handler for the given language which is usually the file extension for source files for that language. See the <a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src">index of language handlers</a>. If specified multiple times (?lang=css&amp;lang=ml) then all are loaded.</td>
</tr>
<tr>
<td>skin=&hellip;</td>
<td>none</td>
<td>See the <a href="/media/demo/codeHighlight/google-code-prettify.html">skin gallery</a> . If specified multiple times, the first one to successfully load is used.</td>
</tr>
<tr>
<td>callback=js_ident</td>
<td></td>
<td>window.exports[&ldquo;js_ident&rdquo;] will be called when prettyprinting finishes. If specified multiple times, all are called.</td>
</tr>
</tbody></table>

<h4>b. Serving your own JS &amp; CSS</h4>

<p>下载必要的JS和CSS文件，包进HTML页面，调用方法<code>prettyPrint</code>运行Prettyprinter。比如下面这样，在页面加载完毕后高亮代码：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;prettify.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;prettify.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
...
<span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">&quot;prettyPrint()&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<h3>标记代码块</h3>

<p>Prettyprinter 通过在代码块上添加样式，高亮代码，不需要从左到右解析代码块。</p>

<p>Prettyprinter会查找带有 &ldquo;<strong>prettyprint</strong>&rdquo; class的 <code>&lt;pre&gt;</code> <code>&lt;code&gt;</code> <code>&lt;xmp&gt;</code>元素，然后通过另外添加 <code>&lt;span&gt;</code>s 来给关键字、运算符、字符串、数字、注释等标识符着色，即高亮代码。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint&quot;</span><span class="nt">&gt;</span>
source code here
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>如果使用Markdown或其他HTML生成器，需要手动给元素添加要求的CSS class，使用JS动态添加CSS class是一种方法；不过Prettyprinter 提供了一种简单的方式，只需像这样在HTML代码前面加一行命令<code>&lt;?prettify?&gt;</code>：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;?prettify?&gt;</span>
<span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint&quot;</span><span class="nt">&gt;</span>
code here
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>而鉴于在Markdown文本无法识别上面的标签，我们可以用注释的方式来添加class；下面代码中注释指给代码块标签添加了3个class：prettyprint、linenums、lang-go.<br>
后两个class的意思是要求 Prettyprinter 显示行号和指定代码块是 Go 语言。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!--?prettify lang=go linenums=true?--&gt;</span>
<span class="nt">&lt;pre</span> <span class="na">style=</span><span class="s">&quot;border:4px solid #88c&quot;</span><span class="nt">&gt;</span>
    package main
    import (&quot;math&quot;)
    func distance(x1, y1, x2, y2 float64) float64 {
        a := x2 – x1
        b := y2 – y1
        return math.Sqrt(a*a + b*b)
    }
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>如果想禁止对某句或某段代码着色，可以在相关元素上添加<code>nocode</code>class来阻止代码高亮。如下面那样，标识注释中的一句话<em>&ldquo;This is not code&rdquo;</em>不进行高亮处理：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">prettyprint</span><span class="nt">&gt;</span>
int x = foo();  /* This is a comment  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;nocode&quot;</span><span class="nt">&gt;</span>This is not code<span class="nt">&lt;/span&gt;</span>
  Continuation of comment */
int y = bar();
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<h3>语言识别、指定</h3>

<p>Prettyprinter 能够猜测语言类型，尤其适用于类C和类HTML语言。对于其他语言，可以通过指定的语言类型进行特殊处理：在 prettyprint class后面追加 language extension（详细的语言识别符需要读源码JS文件才能知道）。例如，使用 <code>lang-scm</code> 提示代码语言是 Scheme code。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint lang-scm&quot;</span><span class="nt">&gt;</span>(friends &#39;of &#39;(parentheses))<span class="nt">&lt;/pre&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;?prettify lang=scm?&gt;</span>
<span class="nt">&lt;pre&gt;</span>(friends &#39;of &#39;(parentheses))<span class="nt">&lt;/pre&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint lang-html&quot;</span><span class="nt">&gt;</span>
  The lang-* class specifies the language file extensions.
  File extensions supported by default include
    &quot;bsh&quot;, &quot;c&quot;, &quot;cc&quot;, &quot;cpp&quot;, &quot;cs&quot;, &quot;csh&quot;, &quot;cyc&quot;, &quot;cv&quot;, &quot;htm&quot;, &quot;html&quot;,
    &quot;java&quot;, &quot;js&quot;, &quot;m&quot;, &quot;mxml&quot;, &quot;perl&quot;, &quot;pl&quot;, &quot;pm&quot;, &quot;py&quot;, &quot;rb&quot;, &quot;sh&quot;,
    &quot;xhtml&quot;, &quot;xml&quot;, &quot;xsl&quot;.
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>You may also use the <a href="http://dev.w3.org/html5/spec-author-view/the-code-element.html#the-code-element">HTML 5</a> convention of embedding a code element inside the PRE and using language-java style classes. E.g.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint&quot;</span><span class="nt">&gt;&lt;code</span> <span class="na">class=</span><span class="s">&quot;language-java&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div>
<hr>

<p>Prettyprinter 可识别的语言：</p>

<p>适用于大多数语言，包括 C 和类 C 语言：Java, Python, Bash, SQL, HTML, XML, CSS, Javascript, Makefiles, Rust.<br>
也可以用于高亮 Ruby, PHP, VB, Awk，以及部分 Perl 和 Ruby。   但是因为注解约定，不能工作于 Smalltalk。</p>

<p>经由扩展支持的语言有：</p>

<table><thead>
<tr>
<th style="text-align: center">1</th>
<th style="text-align: center">2</th>
<th style="text-align: center">3</th>
<th style="text-align: center">4</th>
<th style="text-align: center">5</th>
<th style="text-align: center">6</th>
<th style="text-align: center">7</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-apollo.js">Apollo</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-basic.js">Basic</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-clj.js">Clojure</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-css.js">CSS</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-dart.js">Dart</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-erlang.js">Erlang</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-go.js">Go</a></td>
</tr>
<tr>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-hs.js">Haskell</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-lisp.js">Lisp, Scheme</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-llvm.js">Llvm</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-lua.js">Lua</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-matlab.js">Matlab</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-ml.js">MLs:F#, Ocaml,SML</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-mumps.js">Mumps</a></td>
</tr>
<tr>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-n.js">Nemerle</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-pascal.js">Pascal</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-proto.js">Protocol buffers</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-r.js">R, S</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-rd.js">RD</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-scala.js">Scala</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-sql.js">SQL</a></td>
</tr>
<tr>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-tcl.js">TCL</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-tex.js">Latek</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-vb.js">Visual Basic</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-vhdl.js">CHDL</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-wiki.js">Wiki</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-xq.js">XQ</a></td>
<td style="text-align: center"><a href="http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-yaml.js">YAML</a></td>
</tr>
</tbody></table>

<h3>启用行号</h3>

<p>使用 <code>linenums</code> class 显示代码块行号，它会在每行代码插入<code>ol</code>和<code>li</code>元素设置行号。默认是每5行显示行号1次。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint linenums&quot;</span><span class="nt">&gt;</span>
Many
lines
of
code
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>假如代码不是从第一行开始，可以自定义起始行号。例如：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyprint linenums:40&quot;</span><span class="nt">&gt;</span>lots of code<span class="nt">&lt;/pre&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;?prettify linenums=40?&gt;</span>
<span class="nt">&lt;pre&gt;</span>lots of code<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p><code>linenums:40</code> 表明代码从第40行开始，这在引用大文件中某一小段代码的情况下很有用。</p>

<h2>在 Jekyll 中使用 Prettyprinter</h2>

<p>首先需要两个文件，prettify.js和prettify.css，去官网下载。把这两个放到模板head中，如下：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;/assets/google-code-prettify/prettify.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/assets/google-code-prettify/prettify.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>
<p>google-code-prettify提供了5个css主题可供选择，而且支持自定义style。相关的demo及style文件参见<a href="/media/demo/codeHighlight/google-code-prettify.html">这里</a>。</p>

<p>考虑到加载速度，最好js写到文档末尾，body闭合标签之前，css写到头部之后，还需要在合适位置（如：$(document).ready）添加如下代码，用于识别并高亮代码块，这个需要使用jQuery：</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">prettyPrint</span> <span class="o">&amp;&amp;</span> <span class="nx">prettyPrint</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div>
<p>现在，就可以使用<code>&lt;pre&gt;&lt;/pre&gt;</code>标签进行高亮了。<br>
Google 的高亮插件使用比较方便，只需要在<code>&lt;pre&gt;</code>的标签上加入<code>prettyprint</code>即可。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;prettyPrint&quot;</span><span class="nt">&gt;</span>
// code here
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>如果用Markdown来生成HTML的话，需事先给相关的标签追加必要的class；Markdown产生的代码块必然含义<code>&lt;pre&gt;</code>元素，那么可以用jQuery在Prettyprinter运行前处理下HTML样式：</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pre&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;prettyprint linenums&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;overflow:auto&#39;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>这样就没有问题了，可以直接用markdown的前置4空格来写代码了。其中<code>addClass(&#39;prettyprint linenums&#39;)</code>的linenums是添加行号的意思。默认只显示第5、10、15…行，可以在css文件中li的格式添加<code>list-style-type: decimal;</code>，以显示全部行号</p>

<p>另外，如果博客中有用Bootstrap，其中对pre有如下几句：</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">white-space</span><span class="nd">:pre</span><span class="o">;</span><span class="nt">white-space</span><span class="nd">:pre-wrap</span><span class="o">;</span><span class="nt">word-break</span><span class="nd">:break-all</span><span class="o">;</span><span class="nt">word-wrap</span><span class="nd">:break-word</span><span class="o">;</span>
</code></pre></div>
<p>这会使得pre中的代码自动换行，而不是溢出形成滚动条。如果不希望如此，可以注释掉。看个人喜好。<br>
如果是滚动条，默认的滚动太难看而且还有个Bug（stripe的高亮背景色无法固定，随着滚动条位置改变而改变，可以考虑去掉stripe，或者禁用横向滚动条），可以修改一下样式，看一下这篇文章<a href="http://alfred-sun.github.io/blog/2014/12/24/scrollbar-customized-with-css-style/">CSS设置滚动条样式</a></p>

<p>最后，如果使用过程中遇到其他问题，可以去官网看看有没有解决方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll 中用 SyntaxHighlighter]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/15/Use-Syntaxhighlighter-for-Jekyll/"/>
    <updated>2014-12-15T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/15/Use-Syntaxhighlighter-for-Jekyll</id>
    <content type="html"><![CDATA[<p>前几天把博客里的代码高亮改成<a href="http://alexgorbatchev.com/SyntaxHighlighter">SyntaxHighligher</a>了，感觉好了很多，看着也舒服，复制代码方便许多。下面就来简短介绍下这个工具。</p>

<blockquote>
<p><em>SyntaxHighligher is an open source Java Script client side code syntax highlighter.</em></p>
</blockquote>

<p>将它安装在 &ldquo;<strong>home page, blog, CMS, documentation CD or any other web page</strong>&quot;，用来美化你的代码。</p>

<h2>Installation</h2>

<ol>
<li>引入基本的文件： shore.js</li>
<li>添加需要的笔刷JS（如：Javascript代码使用 shBrushJScript.js；可用的笔刷列表见<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/brushes/">这里</a>）</li>
<li>引入CSS样式：shCore.css、shThemeDefault.css</li>
<li>用<code>&lt;pre /&gt;</code>或者<code>&lt;script /&gt;</code>创建代码块</li>
<li>执行JS方法：<code>SyntaxHighlighter.all()</code></li>
</ol>

<p>在Jekyll的模板页里的head里面，添加如下代码，选自己需要的语言的刷子。</p>

<!--more-->
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;/static/css/syntaxhighlighter/shCore.css&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;/static/css/syntaxhighlighter/shThemeDefault.css&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shCore.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="c">&lt;!-- The Following is styles for different language  --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushCpp.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushJava.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushJScript.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushPhp.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushPython.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushRuby.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;/static/js/syntaxhighlighter/shBrushPerl.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
  <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>其中，src里面是文件的目录，把从官网上下载的对应的js文件和css文件放到对应的目录即可。其实也可以直接引用官网的js文件，比如这样（<a href="http://alexgorbatchev.com/SyntaxHighlighter/hosting.html">参考网址</a>）</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;http://alexgorbatchev.com/pub/sh/current/styles/shCore.css&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;http://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css&#39;</span> <span class="na">rel=</span><span class="s">&#39;stylesheet&#39;</span> <span class="na">type=</span><span class="s">&#39;text/css&#39;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCpp.js&#39;</span> <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
    <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>做好以上准备后，就可以写代码了。SyntaxHighlighter搜索带有特殊CSS类属性的 <code>&lt;pre /&gt;</code> 标签，然后对这段代码块着色。这个属性需要设定笔刷的参数，它的值是笔刷的别名。</p>

<p>另外，Markdown 写代码的时候，不要用其代码区块的语法，直接用pre标签包起来就好。<br>
下面是个Sample（点这里看<a href="/media/demo/codeHighlight/syntaxhighlighter/shAutoloader.html">Demo</a>效果）：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;brush: csharp&quot;</span><span class="nt">&gt;</span>
public IEnumerator<span class="nt">&lt;String&gt;</span> GetEnumerator()// 注意：返回什么，泛型就为什么类型
{
    for (int i = 0; i<span class="ni">&amp;lt;</span>arr_Course.Length; i++)
    {
        Course course = arr_Course[i];
        yield return &quot;选修：&quot; + course.Name;
        yield return Environment.NewLine;// 两个 yield return
    }
}
<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<p>Jekyll Serve启动<code>localhost:4000</code>来写博客预览代码语法的高亮效果。这个比pygments更好看, 不过加载渲染比较慢。</p>

<p>注意：所有的右方括号必须是<strong>html 转义字符</strong>，例如代码块里面的 <code>&lt;</code> 必须用 <code>&amp;lt;</code> 来替换。</p>

<h2>Configuration &amp; CSS Themes</h2>

<h3>CSS Themes</h3>

<p>新版 SyntaxHighligher 支持自定义主题并提供了8个可选的官方标准主题。<br>
注意：在源码styles目录里面，还有另外的CSS文件，是把shCore.css和其他主题CSS合并在一起的CSS样式文件。如：<code>shCoreEclipse.css == shCore.css + shThemeEclipse.css</code></p>

<table><thead>
<tr>
<th>Name</th>
<th>File</th>
</tr>
</thead><tbody>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html">Default</a></td>
<td>shThemeDefault.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme1">Django</a></td>
<td>shThemeDjango.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme2">Eclipse</a></td>
<td>shThemeEclipse.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme3">Emacs</a></td>
<td>shThemeEmacs.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme4">Fade To Grey</a></td>
<td>shThemeFadeToGrey.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme5">MDUltra</a></td>
<td>shCoreMDUltra.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme6">Midnight</a></td>
<td>shThemeMidnight.css</td>
</tr>
<tr>
<td><a href="/media/demo/codeHighlight/syntaxhighlighter/syntaxhighlighter_themes.html#theme7">RDark</a></td>
<td>shThemeRDark.css</td>
</tr>
</tbody></table>

<h3>Configured in 3 different ways</h3>

<h4>1. SyntaxHighlighter.config</h4>

<p>对语法高亮全局参数设置，主要包括：</p>

<table><thead>
<tr>
<th>Name</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>bloggerMode</td>
<td>false</td>
<td>与blogger.com集成时，必须开启该选项</td>
</tr>
<tr>
<td><a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/configuration/strings.html">strings</a></td>
<td>Object</td>
<td>设定默认的显示信息,可用的信息参数包含: expandSource / help / alert / noBrush / brushNotHtmlScript / viewSource / copyToClipboard / copyToClipboardConfirmation / print 等</td>
</tr>
<tr>
<td>stripBrs</td>
<td>false</td>
<td>忽略代码块中的<code>&lt;br /&gt;</code></td>
</tr>
<tr>
<td>tagName</td>
<td>&quot;pre&rdquo;</td>
<td>自定义需要高亮的代码块的标签tag</td>
</tr>
</tbody></table>

<p>Example: </p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
    <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">strings</span><span class="p">.</span><span class="nx">viewSource</span> <span class="o">=</span> <span class="s2">&quot;view my source!!!!&quot;</span><span class="p">;</span>
    <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">bloggerMode</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<h4>2. SyntaxHighlighter.defaults</h4>

<p>对单个代码块语法高亮参数进行设置，支持的选项有：</p>

<table><thead>
<tr>
<th>Name</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>auto-links</td>
<td>true</td>
<td>自动识别超链接，使得代码块中的URL可点击进入</td>
</tr>
<tr>
<td>class-name</td>
<td>&ldquo;</td>
<td>对代码块添加CSS类，自定义样式</td>
</tr>
<tr>
<td>collapse</td>
<td>false</td>
<td>强制初始代码块收起</td>
</tr>
<tr>
<td>first-line</td>
<td>1</td>
<td>定义代码块的起始行号</td>
</tr>
<tr>
<td>gutter</td>
<td>true</td>
<td>显示行号</td>
</tr>
<tr>
<td>highlight</td>
<td>null</td>
<td>高亮代码块中的某几行，传入的值可以是高亮多行的整型数组([1,3,7])，或仅高亮单行的数值</td>
</tr>
<tr>
<td>html-script</td>
<td>false</td>
<td>允许对HTML/XML和脚本混合代码着色，开启后必须加载<code>shBrushXml.js</code>脚本</td>
</tr>
<tr>
<td>smart-tabs</td>
<td>true</td>
<td>灵活处理代码块中的Tab字符</td>
</tr>
<tr>
<td>tab-size</td>
<td>4</td>
<td>设定显示Tab的长度</td>
</tr>
<tr>
<td>toolbar</td>
<td>true</td>
<td>代码块上显示工具栏</td>
</tr>
</tbody></table>

<p>Example: </p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">defaults</span><span class="p">[</span><span class="s1">&#39;gutter&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">defaults</span><span class="p">[</span><span class="s1">&#39;smart-tabs&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">...</span>
<span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
</code></pre></div>
<h4>3. Parameters</h4>

<p>同 defaults 参数类似，可以针对单个代码块做高亮配置。相关的 Key/Value 对要跟 brush 参数一起放进 class 属性中，可以使用上面 defaults 表里面的任意属性进行配置。</p>

<p>Example: </p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;brush: js; ruler: true; first-line: 10; highlight: [2, 4, 6]&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/pre&gt;</span>
</code></pre></div>
<h2>动态加载 Javascript</h2>

<p>由于每次都需要加载所有的js文件，加载速度比较慢。可以利用动态加载js来实现针对不同的语言加载不同的语法分析文件，从而提高js文件的加载速度。废话不多说，上代码：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&#39;javascript&#39;</span><span class="nt">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">stdname</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;bash&#39;</span><span class="o">:</span> <span class="s1">&#39;Bash&#39;</span><span class="p">,</span>
            <span class="s1">&#39;sh&#39;</span><span class="o">:</span> <span class="s1">&#39;Bash&#39;</span><span class="p">,</span>
            <span class="s1">&#39;c&#39;</span><span class="o">:</span> <span class="s1">&#39;Cpp&#39;</span><span class="p">,</span>
            <span class="s1">&#39;cpp&#39;</span><span class="o">:</span> <span class="s1">&#39;Cpp&#39;</span><span class="p">,</span>
            <span class="s1">&#39;cs&#39;</span><span class="o">:</span> <span class="s1">&#39;CSharp&#39;</span><span class="p">,</span>
            <span class="s1">&#39;css&#39;</span><span class="o">:</span> <span class="s1">&#39;Css&#39;</span><span class="p">,</span>
            <span class="s1">&#39;java&#39;</span><span class="o">:</span> <span class="s1">&#39;Java&#39;</span><span class="p">,</span>
            <span class="s1">&#39;js&#39;</span><span class="o">:</span> <span class="s1">&#39;JScript&#39;</span><span class="p">,</span>
            <span class="s1">&#39;php&#39;</span><span class="o">:</span> <span class="s1">&#39;Php&#39;</span><span class="p">,</span>
            <span class="s1">&#39;py&#39;</span><span class="o">:</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span>
            <span class="s1">&#39;python&#39;</span><span class="o">:</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span>
            <span class="s1">&#39;rb&#39;</span><span class="o">:</span> <span class="s1">&#39;Ruby&#39;</span><span class="p">,</span>
            <span class="s1">&#39;sql&#39;</span><span class="o">:</span> <span class="s1">&#39;Sql&#39;</span><span class="p">,</span>
            <span class="s1">&#39;vb&#39;</span><span class="o">:</span> <span class="s1">&#39;Vb&#39;</span><span class="p">,</span>
            <span class="s1">&#39;xml&#39;</span><span class="o">:</span> <span class="s1">&#39;Xml&#39;</span><span class="p">,</span>
            <span class="s1">&#39;html&#39;</span><span class="o">:</span> <span class="s1">&#39;Xml&#39;</span><span class="p">,</span>
            <span class="s1">&#39;perl&#39;</span><span class="o">:</span> <span class="s1">&#39;Perl&#39;</span>
        <span class="p">};</span>
        <span class="kd">var</span> <span class="nx">used</span> <span class="o">=</span> <span class="p">{};</span>
        <span class="kd">var</span> <span class="nx">$t</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;pre[class^=brush]&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">$t</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="err">&#39;</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/static/js/syntaxhighlighter/shCore.js&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span><span class="nt">&lt;/script&gt;</span>&#39;);
        }
        $t.each(function() {
            var lang = stdname[$.trim($(this).attr(&#39;class&#39;).substring(6))];
            if (used[lang]) {
                return;
            }
            used[lang] = true;
            $(&#39;body&#39;).append(&#39;<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/static/js/syntaxhighlighter/shBrush&#39; + lang + &#39;.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>&#39;);
        });
        if ($t.length &gt; 0) {
            $(&#39;body&#39;).append(&#39;<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span><span class="nt">&gt;</span><span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span><span class="nt">&lt;/script&gt;</span>&#39;);
        }
    });
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>把以上这段代码放在Jekyll模板页的body的最后面即可。</p>

<p>这段代码需要jQuery，1.4.2测试没问题。此外，shCore.css，shThemeDefault.css文件不是动态加载，所以，这两个文件仍然需要直接放在模板页的头部。</p>

<h2>JS Autoloader</h2>

<p>SyntaxHighlighter着色过程中，针对不同的语言需要根据适合的脚本刷子来着色，这样造成你在页面上不得不预先加载所有可能用到的brush.js。上述的动态加载方法是自己写的，同样SyntaxHighlighter官方也提供了相应的解决方案： <a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/api/autoloader.html">shAutoloader.js</a>(v3.0.83) 正是为解决此问题而生，它会根据待着色代码块所使用到的笔刷配置来动态创建<code>&lt;script&gt;</code>节点以加载适合的JavaScript文件，不会造成载入多余资源的浪费。</p>

<h3>a. Dynamic Brush Loading</h3>

<p>Version 3 支持动态加载 brushes 文件，无需在同一页面加载所有 JS 。看下面的示例来说明如何使用 autoloader 脚本 - <strong>&quot;shAutoloader.js&rdquo;</strong>：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;shCore.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;shAutoloader.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
<span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">autoloader</span><span class="p">(</span>
<span class="s1">&#39;js jscript javascript  /js/shBrushJScript.js&#39;</span><span class="p">,</span>
<span class="s1">&#39;applescript            /js/shBrushAppleScript.js&#39;</span>
<span class="p">);</span>

<span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>解释下上面的意思：任何使用 js, jscript, javascript 和 applescript 笔刷的代码块，都会触发这个脚本，动态加载相应的JS文件。</p>

<h3>b. API</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">SyntaxHighlighter.autoloader(brushes)
</code></pre></div>
<p>brushes 参数说明</p>

<ul>
<li>Array: [ &lsquo;alias1 alias2 /full/path/to/brush.js&rsquo;, &hellip; ]<br>
以空白符为分隔符的字符串数组，字符串的最后一个值是笔刷JS文件的路径，其他值是brush别名</li>
<li>Array: [ [ &lsquo;alias1&rsquo;, &lsquo;alias2&rsquo;, &lsquo;/full/path/to/brush.js&rsquo; ], &hellip; ]<br>
字符串组成的二维数组，数组中最后一个字符串值是JS路径，其他字符串值是brush别名</li>
</ul>

<h3>c. Example 示例</h3>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="kd">function</span> <span class="nx">path</span><span class="p">()</span>
<span class="lineno"> 2</span> <span class="p">{</span>
<span class="lineno"> 3</span> <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
<span class="lineno"> 4</span>  <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
<span class="lineno"> 5</span>  
<span class="lineno"> 6</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
<span class="lineno"> 7</span>  <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">,</span> <span class="s1">&#39;/pub/sh/current/scripts/&#39;</span><span class="p">));</span>
<span class="lineno"> 8</span>   
<span class="lineno"> 9</span> <span class="k">return</span> <span class="nx">result</span>
<span class="lineno">10</span> <span class="p">};</span>
<span class="lineno">11</span> 
<span class="lineno">12</span> <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">autoloader</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">path</span><span class="p">(</span>
<span class="lineno">13</span> <span class="s1">&#39;applescript            @shBrushAppleScript.js&#39;</span><span class="p">,</span>
<span class="lineno">14</span> <span class="s1">&#39;actionscript3 as3      @shBrushAS3.js&#39;</span><span class="p">,</span>
<span class="lineno">15</span> <span class="s1">&#39;bash shell             @shBrushBash.js&#39;</span><span class="p">,</span>
<span class="lineno">16</span> <span class="s1">&#39;coldfusion cf          @shBrushColdFusion.js&#39;</span><span class="p">,</span>
<span class="lineno">17</span> <span class="s1">&#39;cpp c                  @shBrushCpp.js&#39;</span><span class="p">,</span>
<span class="lineno">18</span> <span class="s1">&#39;c# c-sharp csharp      @shBrushCSharp.js&#39;</span><span class="p">,</span>
<span class="lineno">19</span> <span class="s1">&#39;css                    @shBrushCss.js&#39;</span><span class="p">,</span>
<span class="lineno">20</span> <span class="s1">&#39;delphi pascal          @shBrushDelphi.js&#39;</span><span class="p">,</span>
<span class="lineno">21</span> <span class="s1">&#39;diff patch pas         @shBrushDiff.js&#39;</span><span class="p">,</span>
<span class="lineno">22</span> <span class="s1">&#39;erl erlang             @shBrushErlang.js&#39;</span><span class="p">,</span>
<span class="lineno">23</span> <span class="s1">&#39;groovy                 @shBrushGroovy.js&#39;</span><span class="p">,</span>
<span class="lineno">24</span> <span class="s1">&#39;java                   @shBrushJava.js&#39;</span><span class="p">,</span>
<span class="lineno">25</span> <span class="s1">&#39;jfx javafx             @shBrushJavaFX.js&#39;</span><span class="p">,</span>
<span class="lineno">26</span> <span class="s1">&#39;js jscript javascript  @shBrushJScript.js&#39;</span><span class="p">,</span>
<span class="lineno">27</span> <span class="s1">&#39;perl pl                @shBrushPerl.js&#39;</span><span class="p">,</span>
<span class="lineno">28</span> <span class="s1">&#39;php                    @shBrushPhp.js&#39;</span><span class="p">,</span>
<span class="lineno">29</span> <span class="s1">&#39;text plain             @shBrushPlain.js&#39;</span><span class="p">,</span>
<span class="lineno">30</span> <span class="s1">&#39;py python              @shBrushPython.js&#39;</span><span class="p">,</span>
<span class="lineno">31</span> <span class="s1">&#39;ruby rails ror rb      @shBrushRuby.js&#39;</span><span class="p">,</span>
<span class="lineno">32</span> <span class="s1">&#39;sass scss              @shBrushSass.js&#39;</span><span class="p">,</span>
<span class="lineno">33</span> <span class="s1">&#39;scala                  @shBrushScala.js&#39;</span><span class="p">,</span>
<span class="lineno">34</span> <span class="s1">&#39;sql                    @shBrushSql.js&#39;</span><span class="p">,</span>
<span class="lineno">35</span> <span class="s1">&#39;vb vbnet               @shBrushVb.js&#39;</span><span class="p">,</span>
<span class="lineno">36</span> <span class="s1">&#39;xml xhtml xslt html    @shBrushXml.js&#39;</span>
<span class="lineno">37</span> <span class="p">));</span>
<span class="lineno">38</span> <span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span></code></pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何高效利用GitHub]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/13/How-to-Use-GitHub-Effectively/"/>
    <updated>2014-12-13T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/13/How-to-Use-GitHub-Effectively</id>
    <content type="html"><![CDATA[<p>正是Github，让社会化编程成为现实。本文尝试谈谈GitHub的文化、技巧与影响。</p>

<ul>
<li>Q1：GitHub是什么</li>
<li>Q2：GitHub风格</li>
<li>Q3: 在GitHub，如何跟牛人学习</li>
<li>Q4: 享受纯粹的写作与演讲</li>
<li>Q5: 代码帮你找工作</li>
<li>Q6: GitHub还在影响一些什么</li>
<li>Q7: 除了GitHub，还可以选择什么？</li>
</ul>

<h2>Q1：GitHub是什么</h2>

<h2>A1：一家公司</h2>

<p>位于旧金山，由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。</p>

<!--more-->

<p><img src="http://www.yangzhiping.com/images/tech/Octocat.png" alt="GitHub"></p>

<p>在此之前，它是由Tom与Chris 在本地程序员聚会中，开始的一个用于托管git的项目。正如每个伟大的传奇都开始于一场冒险，Tom在这篇文章<a href="http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html">我如何辞掉微软30万年薪邀约，创办GitHub</a>中谈到：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">当我老去，回顾一生，我想说，“哇，那是一场冒险“；而不是，“哇，我真的很安稳。“
</code></pre></div>
<p>另一位创始人Chris也详细描述了GitHub初创的前因后果，他说道：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Do whatever you want.
</code></pre></div>
<p>于是，在2008年4月10号这一天，GitHub正式成立。</p>

<p>目前看来，GitHub这场冒险已经胜出。根据来自维基百科关于GitHub的描述，我们可以形象地看出GitHub的增长速度：</p>

<p><img src="http://www.yangzhiping.com/images/tech/github-repos.png" alt="GitHub"></p>

<p>今天，GitHub已是：</p>

<ul>
<li>一个拥有143万开发者的社区。其中不乏Linux发明者Torvalds这样的顶级黑客，以及Rails创始人DHH这样的年轻极客。</li>
<li>这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如：BootStrap、Node.js、CoffeScript等。</li>
<li>alexa全球排名414的网站。</li>
</ul>

<h2>Q2：GitHub风格</h2>

<h2>A2: GitHub只是GitHub</h2>

<p>强调敏捷开发与快速原型，而又的确成功的创业团队，常具备一个重要气质：有自己的文化风格。如GitHub，又如37signals。通过他们的快速开发，向用户证明了团队在技术上的能力，并且时常有惊喜。同时，通过强调特立独行的文化，将对半衰期过短的产品族群的信任转为对GitHub团队的信任。</p>

<p>Gravatars的创始人（对，就是互联网最流行的头像托管系统）、Jekyll（对，它就是我近几年用的博客系统）作者、GitHub创始人，现任CTO Tom在GitHub第一年学到的10大教训、创业学校演讲中谈到GitHub文化的方方面面。我尝试将这种风格总结为以下要点：</p>

<ul>
<li>专注创作，高创意</li>
<li>运营良好与较高的内外满意度</li>
<li>高利润，较低的融资额或零融资</li>
<li>创业公司多半死在钱上，就让我们先从钱谈起：</li>
</ul>

<h3>高利润，较低的融资额或者零融资</h3>

<p>类似于GitHub这样的公司，拿到风险投资很难吗？恰恰相反，创始人PJ Hyett 在Hacker News的一篇评论中提到，自从GitHub创办以来，已与几十个VC沟通过。但是，直到今天，GitHub的融资额还是为零，并引以为豪。让我们看看GitHub官网的自我介绍：</p>

<p><img src="http://www.yangzhiping.com/images/github/vc.png" alt="GitHub"></p>

<h3>运营良好与较高的内外满意度</h3>

<p>在Quora上有人问道，GitHub是否寻找被收购？，还是PJ Hyett ，他的回答是：No。</p>

<p>GitHub从一开始就运营良好，员工拥有较高满意度，看看这些不太一样的做法：</p>

<ul>
<li>每一位GitHub公司的新员工，官方博客将发表文章欢迎。</li>
<li>在GitHub内部，没有经理，需求内容与优先级由项目组自行决策。</li>
<li>选择自己的工作时间、工作地点。</li>
<li>员工来自开源社区。</li>
<li>能开源的尽可能开源。</li>
</ul>

<p>富有激情、创意的员工使得GitHub得到了社区的广泛认同，从而拥有极高的客户满意度，并从创业一开始就盈利。一份早期的调查表明，GitHub很快成为Git托管首选。</p>

<h3>专注创作，高创意</h3>

<p>GitHub59名全职员工仅有29名员工在本地工作！不仅仅是工作地点的安排富有创意，GitHub员工Holman, 详细介绍了GitHub的工作方式：</p>

<ul>
<li>时间并不能说明什么</li>
<li>异步工作方式</li>
<li>创造力很重要</li>
</ul>

<h2>Q3:在GitHub，如何跟牛人学习</h2>

<h2>A3:在学习区刻意练习</h2>

<h3>追随牛人，与他们一起修行</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">修行之道：
关注大师的言行，
跟随大师的举动，
和大师一并修行，
领会大师的意境，
成为真正的大师。
</code></pre></div>
<p>正如这首禅诗所言，与其在墙内仰望牛人，不如直接在GitHub：</p>

<ul>
<li>watch、fork牛人们</li>
<li>对他们的项目提交pull request</li>
<li>主动给牛人们的项目写wiki或提交测试用例，或者问题</li>
<li>还可以帮他们翻译中文</li>
</ul>

<p>GitHub本身建构在git之上，git成为勾搭大师们的必要工具，以下读物成为首选：</p>

<ul>
<li>git大白话入门，木有高深内容</li>
<li>为什么git胜过X&hellip;</li>
</ul>

<p>如果希望进一步深入，可以阅读已有中文翻译版的材料：</p>

<ul>
<li>progit：GitHub公司传道士schacon所作，已翻译成多国语言，当然，有中文版。</li>
<li>Git Magic：已有志愿者翻译中文版。</li>
</ul>

<p>同样，如果希望了解更多GitHub自身的知识，GitHub官方文档值得推荐：</p>

<ul>
<li>The GitHub Hep</li>
</ul>

<h3>牛人在哪里？</h3>

<ul>
<li>GitHub上的代码库本身：尤其是：Explore、热门关注信息库两个栏目</li>
<li>GitHub官方推荐：GitHub自身的官方博客与GitHub员工们的个人博客推荐的项目与开发者</li>
<li>各类社交媒体上提到的的GitHub库：尤其是Hacker News上提到的GitHub库。</li>
</ul>

<p>关于学习的心理学研究，常常会谈到一个术语：元认知、元学习、元知识。是的，关于认知的认知、关于学习的学习、关于知识的知识，你对这些信息的偏好与熟练掌握，会让你在学习一门新东西时更加轻车熟路。对一手信息进行回溯，比如作者、创始人、最初文献出处，总是会让你更容易理解知识。</p>

<h3>在学习区刻意练习：借助GitStats进行项目统计</h3>

<p>在如何学习一门新的编程语言？——在学习区刻意练习中，我已谈过：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">学习编程最好的方式是在学习区刻意练习。
</code></pre></div>
<p>如何进行自我监督？</p>

<p>借助于GitStats，我们能很好地统计自己的每个项目的工作量，从而看到工作进展。</p>

<p>用法如下，</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#复制GitStats项目到本地</span>
<span class="nb">cd</span> ~/dev
git clone git://github.com/trybeee/GitStats.git
python ~/dev/gitstats/git-stats /youproject public
</code></pre></div>
<p>以下为生成结果示范：</p>

<p>每周代码提交次数：</p>

<p><img src="http://www.yangzhiping.com/images/github/day_week.png" alt="github"></p>

<p>每天代码提交行数：</p>

<p><img src="http://www.yangzhiping.com/images/github/lines_of_code.png" alt="github"></p>

<p>如果Fork别人的项目或者多人合作项目，最好每人都拥有一个独立分支，然后由项目维护人合并。如何建立自己的分支？</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># 分支的创建和合并</span>
<span class="c"># git branch yourbranch </span>
<span class="c"># git checkout yourbranch    切换到yourbranch</span>

<span class="c"># 开发yourbranch分支，然后开发之后与master分支合并</span>

<span class="c"># git checkout master</span>
<span class="c"># git merge yourbranch</span>
<span class="c"># git branch -d yourbranch    合并完后删除本地分支</span>
</code></pre></div>
<p>如何将牛人的远程分支更新到自己的本地分支？</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># 查看当前项目下远程</span>
<span class="c"># git remote</span>
<span class="c"># 增加新的分支链接，例如</span>
git remote add niuren giturl…
<span class="c"># 获取牛人的远程更新</span>
git fetch niuren
<span class="c"># 将牛人的远程更新合并到本地分支</span>
git merge niuren/master
</code></pre></div>
<h3>生产力小技巧</h3>

<p><strong>codeshelver：给git库做标签</strong>
观察的项目如果多了，怎么管理？用codeshelver，安装扩展之后，可以对GitHub项目做标签。</p>

<p><strong>gollum：利用git与github做wiki</strong>
gollum是一个基于git的轻型wiki系统。</p>

<p><strong>GitHubwatcher: 监测重点项目</strong>
GitHubwatcher适用于通知不频繁的情景。</p>

<p><strong>GitHub官方资源</strong>
GitHub官方列出了一些有用的脚本与书签。</p>

<p><strong>社区驱动的安装与配置文件</strong>
GitHub中各类配置文件层出不穷，一些常用的：</p>

<ul>
<li>osh-my-zsh：将终端从bash改为zsh之后，可考虑安装社区驱动的zsh配置文件，含有多个插件。可参考旧文zsh与oh-my-zsh</li>
<li>gitignore：GitHub官方出品</li>
<li>yourchili:服务器各类安装shell，比如安装nginx等。</li>
</ul>

<h2>Q4: 享受纯粹的写作与演讲</h2>

<h2>A4：回归创作的初始</h2>

<h3>写作</h3>

<p>早在2008年，就有技术图书作者通过Git来写作，以下是示范：</p>

<ul>
<li>Node.js初学者教材，中文版在这里。</li>
<li>backbone基础</li>
<li>Sinatra教程</li>
</ul>

<p>你能想到的技术前沿话题，大多能在GitHub找到相应的培训材料或者开源图书。</p>

<p>个人写作照样适用。在前文理想的写作环境：Git+GitHub+Markdown+Jekyll，我已经格外赞美过这些美好事物了。</p>

<p>暖色调的灯光，足够宽度的工作台，听着清脆的键盘声音，基于Git、GitHub、Markdown与Jekyll来写作，不担心写废与排版，只关注最纯粹的写作，是一种享受。我有时候会想，如果Git、Github、Markdown、Jekyll，再加上Yaml、Json的作者，让这些作者们重新来设计今天互联网基础架构偏文本的部分，会诞生一些什么？</p>

<h3>个人博客</h3>

<p>借助于Jekyllbootstrap，可以在Github上快速搭建一个基于jekyll的博客系统。</p>

<p>除了这个简单易行的办法之外，还存在一些其他方法，例如：</p>

<ul>
<li>Jekyll：参考告别wordpress，拥抱jekyll</li>
<li>Octopress：参考Ruby开源项目介绍(1)：octopress——像黑客一样写博客</li>
<li>GitHub Pages：参考GitHub Pages</li>
</ul>

<h3>演讲</h3>

<p>借助于GitHub，可以享受更纯粹、更酷的演讲。GitHub 2011年收购Ordered List之后，从此可以通过speakerdeck更好的分享ppt文档。</p>

<p>我们还可以：</p>

<ul>
<li>使用GitHub著名传教士、Progit作者Scott Chacon开发的showoff</li>
<li>来自开源社区的其他演讲库impress.js</li>
</ul>

<h2>Q5: 代码帮你找工作</h2>

<h2>A5：GitHub简历很诚实</h2>

<p>NumEricR（非GitHub工作人员）基于GitHub Pages功能做了一个<a href="http://resume.github.com">简历生成器</a>，使用极其简单，登陆网站GitHub简历生成器，填入你的GitHub网站用户名即可。</p>

<p>fredwu是Ruby中文社区活跃份子，他的开源项目angel_nest，一个天使投资与创业者对接的网站，适合Ruby初学者升级为Ruby中级开发者时学习，也在Hacker News上被热烈讨论过，让我们来看看他的简历：</p>

<p><a href="http://resume.GitHub.com/?fredwu">http://resume.GitHub.com/?fredwu</a></p>

<p>正是因为GitHub上的代码无法造假，也容易通过你关注的项目来了解知识面的宽度与深度。现在越来越多知名公司活跃在GitHub，发布开源库并招募各类人才，例如：Facebook、Twitter、Yahoo &hellip;</p>

<p>开始有了第三方网站提供基于GitHub的人才招聘服务，例如：</p>

<ul>
<li>GitHire: 通过它，可以找出你所在地区的程序员。</li>
<li>Gitalytics.com: 通过它，能评估某位程序员在GitHub、LinkedIn、StackOverflow、hackernews等多个网站的影响力。</li>
</ul>

<h2>Q6: GitHub还在影响一些什么</h2>

<h2>A6：让计算机增强人类智慧</h2>

<p>很多年前，在某个名声显赫的学府中，两位先后拿过图灵奖的牛人有一段对话：</p>

<ul>
<li>牛人A：我们要给机器赋予智慧，让他们有自我意识！</li>
<li>牛人B：你要给机器做那么多好事？那你打算给人类做点什么呢？
这段对话来自《失控》。牛人A是明斯基，他最喜欢将人类看做有血肉的机器，他的框架理论成为认知心理学、人工智能入门基础。牛人B则是恩格尔巴特。当明斯基1961年发表他著名的文章人工智能走向时，恩格尔巴特还籍籍无名。直到次年，恩格尔巴特发表宏文：人类智力的增强：一种概念框架。提出不同于明斯基的另一条增强人类智力的道路：不要尝试发明自动打字的机器，而是尝试发明鼠标，并且他真的发明鼠标成功了！</li>
</ul>

<p>从近些年的发展来看，仍然是明斯基占上风，但是，三十年河东，三十年河西，明斯基的人工智能方向又有多少年没有大突破了？相反，来自恩格尔巴特的群件、集体智慧等思想，逐步成为步入Web2.0时代之后的共识。无关对错，可以说，恩格尔巴特为增强人类智力，提供了可行的框架。与其去发明聪明的、昂贵的、功能一体化的智能机器人，还不如发明类似于鼠标这样笨笨的、廉价的、功能单一的人类智慧服务单件。明斯基的机器人很容易陷入死胡同，没有上升到哲学的高度。现在慢慢又回到恩格尔巴特这个方向来了。比如现在IBM开始宣传的认知计算。</p>

<p>从git与GitHub设计与解决的问题本质来看，明显加速了代码生产流程，促进了卓越智力产品的诞生。这就是一种典型的web2.0对智力生产流程的改良与人类智慧的增强。同样，某种意义上，小说写作网站也起到类似作用。但是，学术界尤其是社会科学类的智力产品生产似乎还停留在一个古老阶段。在开源领域，好想法层出不穷，极客影响极客，最终产生的是酷玩意。这些酷玩意抛弃浮华，直奔问题本质。那么，有没有科学界的GitHub？？</p>

<p>类似问题层出不穷，以下为其他领域产品不完全名单。</p>

<h3>学术研究</h3>

<ul>
<li>除了较早的arXiv、PLoS之外，较有气象的可以推荐mendeley、开放期刊目录</li>
</ul>

<h3>数据</h3>

<ul>
<li>buzzdata:数据分享更容易
科学计算</li>
<li>opani：雏形中，支持R、Python等多种。</li>
</ul>

<h3>教育</h3>

<ul>
<li>OpenStudy：一个社会性学习网络，通过互助来更好地学习，主题涉及到计算机、数学、写作等。</li>
<li>openhatch: 通过练习、任务等帮助新手更好地进入开源社区</li>
</ul>

<h2>Q7:除了GitHub，还可以选择什么？</h2>

<h2>A7：nil</h2>

<p>因为进化的需要，多数裸猿存在选择强迫症：哪种程序语言更好？哪个web开发框架更好？当然，最令宅男技术男们羡慕的问题是，高白瘦御姐还是青春小萝莉好？:D</p>

<p>除了GitHub之外，</p>

<ul>
<li>中国山寨品是不是更好？（为什么不写他们名字，你懂的，山寨品总是善于争论谁是第一个山寨的，各自的排名先后:D）</li>
<li>免费的BitBucket是不是更适合Python程序员？</li>
<li>作为一名折腾族，我不自己搭建一个gitlabhq，是不是对不起自己？</li>
</ul>

<p>我们可以理解，正是因为无数条分岔路口，让人类不再受制于某种基因、特定疾病、独裁家族，从而拥有无限的可能。但是，这种选择强迫症与远古时代可怜的信息量相比较，</p>

<ul>
<li>今天这个大数据时代，它还会有助于人类作为族群的整体进化与作为个体的幸福吗？</li>
<li>今天一位一线城市30岁大学毕业生经历的选择与孔子整个一生经历的选择，纯论数量，谁多谁少？</li>
</ul>

<p>生命如此短暂，为什么总要将青春浪费在不断的选择之中呢？罚你，回头阅读心理学家施瓦茨（Barry Schwartz）的TED演讲：选择之困惑——为何多即是少，1百遍啊1百遍。请记住施瓦茨的演讲要点：</p>

<ul>
<li>更多的选择不代表更多的自由；</li>
<li>更多的选择导致决策的延迟和降低的满意感；</li>
<li>快乐之秘诀，在于降低自己的期望值。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Jekyll和jQuery实现异步加载文章列表]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/11/jekykll-jquery-asyn-load/"/>
    <updated>2014-12-11T02:30:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/11/jekykll-jquery-asyn-load</id>
    <content type="html"><![CDATA[<h2>前言(Introduction)</h2>

<blockquote>
<p>本文主要讨论如何用基于jQuery的插件waypoint，实现异步加载jekyll模板生成的json文件，生成文章列表。</p>
</blockquote>

<p>在<a href="http://art.yanping.me/archives/">一博客的文章列表</a>里使用了异步加载的技术，不过直接看页面的html源代码是看不出来的。编译之前的代码在<a href="https://github.com/yanping/art/blob/gh-pages/archives/index.html">这里</a>。</p>

<!--more-->

<h2>文章列表 JSON 数据</h2>

<p>首先，生成文章列表数据的json模板（记得保存问json格式的文件）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">---
layout: nil
---

[
{% for post in site.posts %}
  {&quot;title&quot;:&quot;{{post.title}}&quot;, 
  &quot;url&quot;:&quot;{{site.url}}{{post.url}}&quot;, 
  &quot;date&quot;:&quot;{{ post.date | date:&#39;%Y-%m-%d&#39; }}&quot;, 
  &quot;tags&quot;:[{% for tag in post.tags %}&quot;{{tag}}&quot;{% if forloop.last == false %} ,{% endif %}{% endfor %}]}
  {% if forloop.last == false %},{% endif %}{% endfor %}
]
</code></pre></div>
<p>这在前面的<a href="http://chen.yanping.me/cn/blog/2012/04/19/jekyll-with-json/">文章</a>里提到过。<br>
(Alfred Sun: 博主感觉同一博客里面异步加载文章列表意义不大；因为每次访问GitHub博客时，都会执行Jekyll生成新的网站，当然JSON文件每次也会一起重新生成；与其写代码异步加载费时费力，不如直接写进HTML，随同页面一起载入。唯一有用之处，就如作者所言，维护多个博客时，相互间可以引用文章列表。)</p>

<p>但是如果JSON文件不在同一域中，出于安全性考虑就无法用<code>getJSON</code>请求它；这种情况下，可以将JSON数据包在JS文件里面，然后浏览器跨域加载外部JS就可以了，演示实例看<a href="/media/demo/get_json_of_posts.html">这里</a>。</p>

<h2>设定参数</h2>

<p>头部YAML数据部分：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">全部文章</span>
<span class="l-Scalar-Plain">initItem</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">50</span>
<span class="l-Scalar-Plain">perPageItem</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100</span>
<span class="nn">---</span>
</code></pre></div>
<p><code>initItem</code>是初始加载时显示的文章主题数，<code>perPageItem</code>是每次页面下拉到底部时读取json数据并新生成的文章主题数。<br>
这两个参数用于异步加载方法，同时还要用到一个jQuery Plugin - <a href="http://imakewebthings.com/waypoints/">Waypoints</a></p>

<h2>动态加载文章</h2>

<p>初始加载网页时，文章主题列表是静态的html，由jekyll生成：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
{% for post in site.posts limit:page.initItem %}
  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;listing-item&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;time</span> <span class="na">datetime=</span><span class="s">&quot;{{ post.date | date:&quot;</span><span class="err">%</span><span class="na">Y-</span><span class="err">%</span><span class="na">m-</span><span class="err">%</span><span class="na">d</span><span class="err">&quot;</span> <span class="err">}}&quot;</span><span class="nt">&gt;</span>{{ post.date | date:&quot;%Y-%m-%d&quot; }}<span class="nt">&lt;/time&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{site.baseurl}}{{ post.url }}&quot;</span> <span class="na">title=</span><span class="s">&quot;{{ post.title }}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/li&gt;</span>{% endfor %}
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div>
<p>上面的<code>limit:page.initItem</code>限定了列表的项数不超过<code>initItem</code>。当向下拉页面，waypoint会捕捉到页面下拉到底部的事件，并调用<em>getJSON</em>方法来读取json数据，形成文章列表。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html">{% if site.posts.size &gt; page.initItem %}
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/jquery-1.7.1.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/waypoints.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 关于waypoint，请看 http://imakewebthings.com/jquery-waypoints/</span>
    <span class="kd">var</span> <span class="nx">$loading</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;div class=&#39;loading&#39; style=&#39;text-align:center&#39;&gt;&lt;img src=&#39;/images/loading.gif&#39;&gt;&lt;/div&gt;&quot;</span><span class="p">),</span>
    <span class="nx">$footer</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;footer&#39;</span><span class="p">),</span>
    <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">offset</span><span class="o">:</span> <span class="s1">&#39;100%&#39;</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{{</span> <span class="nx">page</span><span class="p">.</span><span class="nx">initItem</span> <span class="p">}};</span> <span class="c1">// 初始文章数</span>
    <span class="kd">var</span> <span class="nx">count_sup</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 循环上界，初始为0</span>
    <span class="nx">$footer</span><span class="p">.</span><span class="nx">waypoint</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$footer</span><span class="p">.</span><span class="nx">waypoint</span><span class="p">(</span><span class="s1">&#39;remove&#39;</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.posts&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$loading</span><span class="p">);</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;../post.json&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
        <span class="nx">count_sup</span> <span class="o">=</span> <span class="nx">count</span> <span class="o">+</span> <span class="p">{{</span> <span class="nx">page</span><span class="p">.</span><span class="nx">perPageItem</span> <span class="p">}};</span> <span class="c1">// 循环上界每次增加page.perPageItem项</span>
        <span class="kd">var</span> <span class="nx">delta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 局部计数器</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;=</span> <span class="nx">count</span> <span class="o">&amp;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">count_sup</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">content</span> <span class="o">+=</span> <span class="s2">&quot;&lt;li class=&#39;listing-item&#39;&gt;&lt;time datetime=&#39;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">date</span> <span class="o">+</span> <span class="s2">&quot;&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">date</span> <span class="o">+</span> <span class="s2">&quot;&lt;/time&gt;&quot;</span><span class="p">;</span>
            <span class="nx">content</span> <span class="o">+=</span> <span class="s2">&quot;&lt;a href=&#39;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s2">&quot;&#39; title=&#39;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;&#39;&gt;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;&lt;/a&gt;&lt;/li&gt;&quot;</span><span class="p">;</span>
            <span class="nx">delta</span><span class="o">++</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">});</span>
        <span class="nx">count</span> <span class="o">+=</span> <span class="nx">delta</span><span class="p">;</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.loading&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.posts&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="nx">$footer</span><span class="p">.</span><span class="nx">waypoint</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">},</span> <span class="nx">opts</span><span class="p">);</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
{% endif %}
</code></pre></div>
<p>关于这段代码，要注意以下几点：</p>

<ol>
<li>上面的代码一开始有个判断语句，当文章数不大于<code>initItem</code>时，后面的js代码不会进入最终生成的html中。</li>
<li>充分利用Liquid模板的特性，在js代码中，也引用了Liquid模板数据<code>{{ page.initItem }}</code>和<code>{{ page.perPageItem }}</code></li>
<li><code>.getJSON()</code>读取数据形成列表之后，语句:</li>
</ol>
<div class="highlight"><pre><code class="language-js" data-lang="js">    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="nx">$footer</span><span class="p">.</span><span class="nx">waypoint</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</code></pre></div>
<p>是要判断已经加载的文章主题数是否到达总数，如果比总数小，就会在新的底部<code>$footer</code>上注册为<strong>waypoint</strong>，然后再向下拉页面，到达底部还会触发事件，然后接着读取数据，直到数据已经读取完毕。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 闭包(Closure)]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/11/javascript-closure/"/>
    <updated>2014-12-11T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/11/javascript-closure</id>
    <content type="html"><![CDATA[<p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。<br>
下面就是我的学习笔记，对于Javascript初学者应该是很有用的。</p>

<h2>一、变量的作用域</h2>

<p>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>
变量的作用域无非就是两种：全局变量和局部变量。<br>
Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="lineno">1</span> <span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">999</span><span class="p">;</span>
<span class="lineno">2</span> <span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
<span class="lineno">3</span>   <span class="nx">alert</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
<span class="lineno">4</span> <span class="p">}</span>
<span class="lineno">5</span> <span class="nx">f1</span><span class="p">();</span> <span class="c1">// 999</span></code></pre></div>

<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">999</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// error</span>
</code></pre></div>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p>

<!--more-->
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
    <span class="nx">n</span><span class="o">=</span><span class="mi">999</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">f1</span><span class="p">();</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// 999</span>
</code></pre></div>
<h2>二、如何从外部读取局部变量？</h2>

<p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。<br>
那就是在函数的内部，再定义一个函数。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">999</span><span class="p">;</span>
    <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// 999</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的&quot;链式作用域&quot;结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>

<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">999</span><span class="p">;</span>
    <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">f2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">result</span><span class="o">=</span><span class="nx">f1</span><span class="p">();</span>
<span class="nx">result</span><span class="p">();</span> <span class="c1">// 999</span>
</code></pre></div>
<h2>三、闭包的概念</h2>

<p>上一节代码中的f2函数，就是闭包。<br>
各种专业文献上的&quot;闭包&quot;（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。</p>

<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&quot;定义在一个函数内部的函数&quot;。<br>
所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>

<h2>四、闭包的用途</h2>

<p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>

<p>怎么来理解这句话呢？请看下面的代码。</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">f1</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">999</span><span class="p">;</span>
    <span class="nx">nAdd</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">n</span><span class="o">+=</span><span class="mi">1</span><span class="p">}</span>
    <span class="kd">function</span> <span class="nx">f2</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">f2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">result</span><span class="o">=</span><span class="nx">f1</span><span class="p">();</span>
<span class="nx">result</span><span class="p">();</span> <span class="c1">// 999</span>
<span class="nx">nAdd</span><span class="p">();</span>
<span class="nx">result</span><span class="p">();</span> <span class="c1">// 1000</span>
</code></pre></div>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p>

<p>为什么会这样呢？<br>
原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。  </p>

<p>这段代码中另一个值得注意的地方，就是&quot;nAdd=function(){n+=1}&ldquo;这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>

<h2>五、使用闭包的注意点</h2>

<p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>

<p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>

<h2>六、思考题</h2>

<p>如果你能理解下面两段代码的运行结果，应该就算理解闭包的运行机制了。</p>

<p>代码片段一:</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="lineno"> 1</span> <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;The Window&quot;</span><span class="p">;</span>
<span class="lineno"> 2</span> <span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
<span class="lineno"> 3</span>  <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;My Object&quot;</span><span class="p">,</span>
<span class="lineno"> 4</span>  <span class="nx">getNameFunc</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
<span class="lineno"> 5</span>      <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
<span class="lineno"> 6</span>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="lineno"> 7</span>      <span class="p">};</span>
<span class="lineno"> 8</span>  <span class="p">}</span>
<span class="lineno"> 9</span> <span class="p">};</span>
<span class="lineno">10</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">getNameFunc</span><span class="p">()());</span></code></pre></div>

<p>代码片段二:</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="lineno"> 1</span> <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;The Window&quot;</span><span class="p">;</span>
<span class="lineno"> 2</span> <span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
<span class="lineno"> 3</span>  <span class="nx">name</span> <span class="o">:</span> <span class="s2">&quot;My Object&quot;</span><span class="p">,</span>
<span class="lineno"> 4</span>  <span class="nx">getNameFunc</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
<span class="lineno"> 5</span>      <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
<span class="lineno"> 6</span>      <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
<span class="lineno"> 7</span>          <span class="k">return</span> <span class="nx">that</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="lineno"> 8</span>      <span class="p">};</span>
<span class="lineno"> 9</span>  <span class="p">}</span>
<span class="lineno">10</span> <span class="p">};</span>
<span class="lineno">11</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">getNameFunc</span><span class="p">()());</span></code></pre></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用js在jekyll博客中实现标签云和标签页]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/11/generate-tags-with-js-in-jekyll/"/>
    <updated>2014-12-11T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/11/generate-tags-with-js-in-jekyll</id>
    <content type="html"><![CDATA[<blockquote>
<p>本文主要讨论在jekyll博客中借助javascript和json，实现标签云和标签页。标签云可以用jquery.tagcloud.js插件实现，标签页则使用jQuery读取json数据文件，用地址传递参数给js函数，使用的是异步加载技术，请看<a href="http://art.yanping.me/tags/">演示页面</a></p>
</blockquote>

<h2>标签云</h2>

<p>Tag Cloud可以使用GitHub上这个简单的<a href="https://github.com/addywaddy/jquery.tagcloud.js">jQuery Plugin</a>实现(<a href="/media/demo/tagCloud/js_tag_cloud.html">演示实例</a>)，使用方法也很Simple：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;whatever&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/path&quot;</span> <span class="na">rel=</span><span class="s">&quot;7&quot;</span><span class="nt">&gt;</span>peace<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/path&quot;</span> <span class="na">rel=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>unity<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/path&quot;</span> <span class="na">rel=</span><span class="s">&quot;10&quot;</span><span class="nt">&gt;</span>love<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/path&quot;</span> <span class="na">rel=</span><span class="s">&quot;5&quot;</span><span class="nt">&gt;</span>having fun<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>然后</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tagcloud</span><span class="p">.</span><span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">size</span><span class="o">:</span> <span class="p">{</span><span class="nx">start</span><span class="o">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">unit</span><span class="o">:</span> <span class="s1">&#39;pt&#39;</span><span class="p">},</span>
  <span class="nx">color</span><span class="o">:</span> <span class="p">{</span><span class="nx">start</span><span class="o">:</span> <span class="s1">&#39;#cde&#39;</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="s1">&#39;#f52&#39;</span><span class="p">}</span>
<span class="p">};</span>

<span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#whatever a&#39;</span><span class="p">).</span><span class="nx">tagcloud</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div>
<!--more-->

<hr>

<p>首先要加载jquery，如果博客里还加载了其他的js库，在另外一个js库中也定义了符号的话，那么在使用符号时就发生了冲突。所以在加载jquery时还要解决<code>$</code>命名冲突。请看<a href="http://www.cnblogs.com/RascallySnake/archive/2010/05/07/1729417.html">这篇文章</a>，我用的办法是定义jQuery的别名：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/jquery-1.7.1.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="kd">var</span> <span class="nx">jq</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>下面是标签云的代码：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/jquery.tagcloud.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span><span class="nt">&gt;</span>
  <span class="nx">jq</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tagcloud</span><span class="p">.</span><span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">size</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">start</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span>
      <span class="nx">end</span><span class="o">:</span> <span class="mi">22</span><span class="p">,</span>
      <span class="nx">unit</span><span class="o">:</span> <span class="s1">&#39;px&#39;</span>
    <span class="p">},</span>
    <span class="nx">color</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">start</span><span class="o">:</span> <span class="s1">&#39;#7CCD7C&#39;</span><span class="p">,</span>
      <span class="nx">end</span><span class="o">:</span> <span class="s1">&#39;#CD0000&#39;</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="nx">jq</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">jq</span><span class="p">(</span><span class="s1">&#39;#tag_cloud a&#39;</span><span class="p">).</span><span class="nx">tagcloud</span><span class="p">();</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>注意，一定要注明节点id：<code>tag_cloud</code>和每个tag用以标识字体大小的属性<code>rel</code>；在Jekyll文件里面可以这样写：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tag_cloud&quot;</span><span class="nt">&gt;</span>
  {% for tag in site.tags %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#{{ tag[0] }}-ref&quot;</span> <span class="na">title=</span><span class="s">&quot;{{ tag[0] }}&quot;</span> <span class="na">rel=</span><span class="s">&quot;{{ tag[1].size }}&quot;</span><span class="nt">&gt;</span>
      {{ tag[0] }}<span class="ni">&amp;nbsp;</span>
    <span class="nt">&lt;/a&gt;</span>
  {% endfor %}
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/jquery.tagcloud.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span> 
<span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span><span class="nt">&gt;</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tagcloud</span><span class="p">.</span><span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">size</span><span class="o">:</span> <span class="p">{</span><span class="nx">start</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="mi">22</span><span class="p">,</span> <span class="nx">unit</span><span class="o">:</span> <span class="s1">&#39;px&#39;</span><span class="p">},</span>
        <span class="nx">color</span><span class="o">:</span> <span class="p">{</span><span class="nx">start</span><span class="o">:</span> <span class="s1">&#39;#7CCD7C&#39;</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="s1">&#39;#CD0000&#39;</span><span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tag_cloud a&#39;</span><span class="p">).</span><span class="nx">tagcloud</span><span class="p">();</span>
    <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<h2>标签页</h2>

<p>在谢益辉的博客里看到的<a href="http://yihui.name/cn/tags/">用js实现标签云</a>。可以看到，这个标签页上，在标签云之后跟着各个标签的文章列表，如果我只想看到某个标签的文章列表，要怎么做呢？</p>

<p>前面我写了篇文章<a href="http://alfred-sun.github.io/blog/2014/12/11/jekykll-jquery-asyn-load/">《用jekyll和jQuery实现异步加载文章列表》</a>，使用jQuery异步加载文章列表。同样的，我们也可以编写个函数加载某个标签的所有文章的列表。</p>

<p>首先，生成文章列表数据的json模板是：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">---
layout: nil
---

[
{% for post in site.posts %}
  {&quot;title&quot;:&quot;{{post.title}}&quot;,
  &quot;url&quot;:&quot;{{site.url}}{{post.url}}&quot;,
  &quot;date&quot;:&quot;{{ post.date | date:&#39;%Y-%m-%d&#39; }}&quot;,
  &quot;tags&quot;:[{% for tag in post.tags %}&quot;{{tag}}&quot;{% if forloop.last == false %} ,{% endif %}{% endfor %}]}
  {% if forloop.last == false %},{% endif %}{% endfor %}
]
</code></pre></div>
<p>用jekyll处理之后得到的json文件在<a href="http://art.yanping.me/post.json">这里</a>。</p>

<p>定义javascript函数showTag()，异步加载某一个标签的文章列表</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="kd">function</span> <span class="nx">showTag</span><span class="p">(</span><span class="nx">tagStr</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">jq</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;../post.json&quot;</span><span class="p">,</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">jq</span><span class="p">(</span><span class="s1">&#39;#show-tag&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="s2">&quot;&lt;h2&gt;分类：&quot;</span> <span class="o">+</span> <span class="nx">tagStr</span> <span class="o">+</span> <span class="s2">&quot;&lt;/h2&gt;&lt;ul class=\&quot;posts\&quot;&gt;&quot;</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="nx">jq</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">jq</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span> <span class="o">==</span> <span class="nx">tagStr</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">content</span> <span class="o">+=</span> <span class="s2">&quot;&lt;li class=\&quot;listing-item\&quot;&gt;&lt;time datetime=\&quot;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">date</span> <span class="o">+</span> <span class="s2">&quot;\&quot;&gt;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">date</span> <span class="o">+</span> <span class="s2">&quot;&lt;/time&gt;&lt;a href=\&quot;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s2">&quot;\&quot;&gt;&quot;</span> <span class="o">+</span> <span class="nx">item</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;&lt;/a&gt;&lt;/li&gt;&quot;</span><span class="p">;</span>
            <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
          <span class="p">}</span>

        <span class="p">});</span>
      <span class="p">});</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">content</span> <span class="o">+=</span> <span class="s2">&quot;&lt;/ul&gt;&quot;</span><span class="p">;</span>
        <span class="nx">postNumStr</span> <span class="o">=</span> <span class="s2">&quot;&lt;span&gt;（&quot;</span> <span class="o">+</span> <span class="nx">count</span> <span class="o">+</span> <span class="s2">&quot;篇文章）&lt;/span&gt;&quot;</span><span class="p">;</span>
        <span class="nx">jq</span><span class="p">(</span><span class="s1">&#39;#show-tag&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
        <span class="nx">jq</span><span class="p">(</span><span class="s1">&#39;#show-tag&gt;h2&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">postNumStr</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>而标签页的核心代码为</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tag_cloud&quot;</span><span class="nt">&gt;</span>
  {% for tag in site.tags %}
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;javascript:;&quot;</span> <span class="na">onclick=</span><span class="s">&quot;showTag(&#39;{{ tag[0] }}&#39;)&quot;</span> <span class="na">title=</span><span class="s">&quot;{{ tag[0] }}&quot;</span> <span class="na">rel=</span><span class="s">&quot;{{ tag[1].size }}&quot;</span><span class="nt">&gt;</span>
    {{ tag[0] }}
  <span class="nt">&lt;/a&gt;</span>
  {% endfor %}
  <span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;show-tag&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;text-align:center&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/loading.gif&quot;</span><span class="nt">/&gt;</span><span class="ni">&amp;nbsp;&amp;nbsp;</span>loading...
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p><a href="https://raw.github.com/yanping/art/gh-pages/tags/index.html">戳这里</a>查看完整代码。</p>

<p>下面这段代码用url地址来传递参数</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;?tag=&#39;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">paraStr</span> <span class="o">=</span> <span class="nx">href</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">pos</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">showTag</span><span class="p">(</span><span class="nb">decodeURI</span><span class="p">(</span><span class="nx">paraStr</span><span class="p">));</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">showTag</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>post模板里的标签列表部分代码：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{% if page.tags != empty %}
&lt;ul class=&quot;tags emphnext&quot;&gt;
  &lt;li&gt;标签：&lt;/li&gt;
  {% for tag in page.tags %}
  &lt;li&gt;
    &lt;a href=&quot;{{ site.baseurl }}/tags/?tag={{tag | cgi}}&quot;&gt;
      {{ tag }}
    &lt;/a&gt;
    {% if forloop.last == false %}, {%endif %}
  &lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
{% endif %}
</code></pre></div>
<p>侧面栏上标签列表的代码：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tag_sidebar&quot;</span><span class="nt">&gt;</span>
  {% for tag in site.tags %}
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{site.baseurl}}/tags/?tag={{tag[0] | cgi}}&quot;</span> <span class="na">title=</span><span class="s">&quot;{{ tag[0] }}&quot;</span><span class="nt">&gt;</span>
    {{ tag[0] }}<span class="nt">&lt;sup&gt;</span>{{ tag[1].size }}<span class="nt">&lt;/sup&gt;</span><span class="ni">&amp;nbsp;</span>
  <span class="nt">&lt;/a&gt;</span>
  {% endfor %}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<h2>其他 Tag Cloud Plugin</h2>

<p>除了上面介绍的那个Plugin外，博主还找到另外两个3D的标签云Plugin。</p>

<ul>
<li><p><strong><a href="http://plugins.jquery.com/tagcanvas/">TagCanvas HTML5</a></strong>：<br>
Displays tags as a 3D rotating tag cloud using an HTML5 canvas<br>
博主主页就是用的这个插件实现的，具体介绍参考<a href="http://www.goat1000.com/tagcanvas.php">这里</a>，可定制的<a href="http://www.goat1000.com/tagcanvas-options.php">参数</a>有很多。</p></li>
<li><p><strong><a href="http://plugins.jquery.com/tagcloud/">jQuery Tag Cloud</a></strong>：<br>
jQuery Tag Cloud looking like a 3d sphere. 3d animated tag cloud generated from an array. You can easily customize it by tweaking the params.<br>
这是<a href="http://dynamicguy.github.io/">Nurul Ferdous</a>写的一个3D标签云插件，相比上面的要简单些，看下<a href="/media/demo/tagCloud/js_tag_cloud2.html">Demo</a>就明白了。</p></li>
</ul>

<p>此外，看到这样<a href="http://yihui.name/en/2009/06/creating-tag-cloud-using-r-and-flash-javascript-swfobject/"><strong>一篇文章</strong></a>，告诉我们如何用Flash Movie和 R 来实现Tag Cloud；文章中提出了一个比较好的思路，统计Post的查阅频率或者tag的使用频率(ofen used or rarely used)，然后据此来设定tag字体的大小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages 静态博客 - 个人建站实录]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/12/05/github-pages/"/>
    <updated>2014-12-05T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/12/05/github-pages</id>
    <content type="html"><![CDATA[<p><a href="http://github.com" title="GitHub">GitHub</a> 很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。GitHub作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如 <a href="https://github.com/jquery/jquery" title="jQuery@github">jQuery</a>、<a href="https://github.com/twitter/bootstrap" title="Twitter@github">Twitter</a>等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，GitHub 替你想到了这一点，他提供了 <a href="http://pages.github.com/" title="Github Pages">GitHub Pages</a> 的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。</p>

<p>GitHub Pages 有以下几个优点：</p>

<ul>
    <li>轻量级的博客系统，没有麻烦的配置</li>
    <li>免费空间，享受 Git 版本管理功能</li>
    <li>使用标记语言，比如 <a href="http://wowubuntu.com/markdown/">Markdown</a></li>
    <li>无需自己搭建服务器</li>
    <li>可以绑定自己的域名</li>
</ul>

<!--more-->

<p>当然他也有缺点：</p>

<ul>
<li>使用 <a href="https://github.com/mojombo/jekyll" title="Jekyll">Jekyll</a> 模板系统，相当于静态页发布，适合博客，文档介绍等</li>
<li>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案</li>
<li>基于 Git，很多东西需要定制，不像 Wordpress 有强大的后台</li>
<li>根据 GitHub 的限制，对应的每个站有 <a href="https://help.github.com/articles/troubleshooting-github-pages-build-failures/#size-limits">1GB 免费空间</a></li>
<li>不适合大型网站，因为没有用到数据库，每运行一次都必须遍历全部的文本文件，网站越大，生成时间越长（可以通过上传 Jekyll 本地最终生成的网页来解决）</li>
<li>网站源码基本上公开，被人 Fork 后，文章转载泛滥</li>
</ul>

<p>大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以GitHub Pages是我认为此需求最完美的解决方案了。</p>

<h2>购买、绑定独立域名</h2>

<p>虽说 <a href="http://www.godaddy.com/" title="Godaddy">Godaddy</a> 曾支持过 SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。</p>

<p>域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。</p>

<p>流传 Godaddy 的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在 <a href="http://beiyuu.com" title="BeiYuu">BeiYuu</a> 也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在 Godaddy 那里，你随时都可以改回去。</p>

<p>我们选择 <a href="https://www.dnspod.cn/" title="DNSPod">DNSPod</a> 的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照 DNSPod 的说法，只需三步（我们插入一步）：</p>

<ul>
    <li>首先添加域名记录，可参考 DNSPod 的帮助文档：<a href="https://www.dnspod.cn/Support">https://www.dnspod.cn/Support</a></li>
    <li>在DNSPod自己的域名下添加一条<a href="http://baike.baidu.com/view/65575.htm">A记录</a>，地址就是Github Pages的服务IP地址：207.97.227.245</li>
    <li>在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：<a href="https://www.dnspod.cn/support/index/fid/119">Godaddy注册的域名如何使用DNSPod</a></li>
    <li>等待域名解析生效</li>
</ul>

<p>域名的配置部分完成，跪谢方校长。</p>

<h2>配置和使用 GitHub</h2>

<p>Git 是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本<a href="http://progit.org/book/zh/" title="Pro Git中文版">Git中文教程</a>。</p>

<blockquote>
<p><em>如果想深入了解 Git，请看 <a href="http://www.kuqin.com/managetool/20110705/92113.html">《10篇写给Git初学者的最佳教程》</a>。</em></p>
</blockquote>

<p>要使用 <a href="http://git-scm.com/downloads">Git</a>，需要安装它的客户端，推荐在Linux下使用 Git，会比较方便。Windows版的下载地址在这里：<a href="http://code.google.com/p/msysgit/downloads/list" title="Windows版Git客户端">http://code.google.com/p/msysgit/downloads/list</a>，或者直接安装 <a href="https://windows.github.com/"><strong>GitHub for Windows</strong></a>（过程可能有些慢，但就不需要做下面配置了，图形界面，简单易用）客户端。其他系统的安装也可以参考官方的<a href="https://help.github.com/articles/set-up-git/" title="各系统平台下 Git 安装">安装教程</a>。</p>

<p>下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac类似。</p>

<p>在Windows下，打开Git Bash，其他系统下则打开终端（Terminal）：</p>

<p><img src="/media/pictures/github-pages/bootcamp_1_win_gitbash.jpg" alt="Git Bash"></p>

<h3>1、检查 SSH keys 的设置</h3>

<p>首先我们需要检查你电脑上现有的 SSH key：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ cd ~/.ssh
</code></pre></div>
<p>如果显示“No such file or directory”，跳到第三步，否则继续。</p>

<h3>2、备份和移除原来的 SSH keys 设置：</h3>

<p>因为已经存在key文件，所以需要备份旧的数据并删除：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>ls
config  id_rsa  id_rsa.pub  known_hosts
<span class="nv">$ </span>mkdir key_backup
<span class="nv">$ </span>cp id_rsa* key_backup
<span class="nv">$ </span>rm id_rsa*
</code></pre></div>
<h3>3、生成新的 SSH Key：</h3>

<p>输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;
</code></pre></div>
<p>然后系统会要你输入加密串（<a href="https://help.github.com/articles/working-with-ssh-key-passphrases/">Passphrase</a>）：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;
Enter same passphrase again:&lt;再次输入加密串&gt;
</code></pre></div>
<p>最后看到这样的界面，就成功设置SSH key了：
<img src="/media/pictures/github-pages/ssh-key-set.png" alt="ssh key success"></p>

<h3>4、添加 SSH Key 到 GitHub：</h3>

<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>

<p>用文本编辑工具打开 <strong>id_rsa.pub</strong> 文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>

<p>在GitHub的主页上点击设置按钮：
<img src="/media/pictures/github-pages/github-account-setting.png" alt="github account setting"></p>

<p>选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：
<img src="/media/pictures/github-pages/bootcamp_1_ssh.jpg" alt="set ssh keys"></p>

<p>PS：如果需要配置多个GitHub账号，可以参看这个<a href="http://omiga.org/blog/archives/2269">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令<code>git config --global --unset user.email</code>删除用户账户设置，在每一个repo下面使用<code>git config --local user.email &#39;你的github邮箱@mail.com&#39;</code> 命令单独设置用户账户信息</p>

<h3>5、测试一下</h3>

<p>可以输入下面的命令，看看设置是否成功，<code>git@github.com</code>的部分不要修改：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ ssh -T git@github.com
</code></pre></div>
<p>如果是下面的反应：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
</code></pre></div>
<p>不要紧张，输入<code>yes</code>就好，然后会看到：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Hi &lt;em&gt;username&lt;/em&gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre></div>
<h3>6、设置你的账号信息</h3>

<p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p>

<p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;你的名字&quot;</span>
<span class="nv">$ </span>git config --global user.email <span class="s2">&quot;your_email@youremail.com&quot;</span>
</code></pre></div>
<p>另外，GitHub 支持 HTTP 和 SSH 两种协议访问，为避免每次访问都需要权限认证，可以在本地设置一下，参考博主写的下面两篇文章：  </p>

<ul>
<li><a href="/blog/2015/01/16/create-and-initialize-repo-on-github//#menuIndex8">SSH 访问自动认证授权</a><br></li>
<li><a href="/blog/2014/11/23/disable-login-each-git-push/">Git Push 避免用户名和密码方法</a></li>
</ul>

<h4><em><strong>设置 GitHub的 token</strong></em></h4>

<p>2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了</p>

<p>有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。</p>

<p>在GitHub上，你可以点击<em>Account Setting &gt; Account Admin</em>：
<img src="/media/pictures/github-pages/bootcamp_1_token.jpg" alt="set ssh keys"></p>

<p>然后在你的命令行中，输入下面的命令，把token添加进去：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ git config --global user.name &quot;你的名字&quot;
$ git config --global user.token 0123456789your123456789token
</code></pre></div>
<p>如果你改了 GitHub 的密码，需要重新设置 token。</p>

<h3>成功了</h3>

<p>好了，你已经可以成功连接 GitHub 了，可以进行 clone、pull、push 操作了。</p>

<h2>使用 GitHub Pages 建立博客</h2>

<p>与 GitHub 建立好链接之后，就可以方便的使用它提供的 Pages 服务，<a href="https://help.github.com/articles/user-organization-and-project-pages/">GitHub Pages</a>分两种，一种是你的 GitHub 用户名建立的 <code>username.github.io</code> 这样的用户&amp;组织页（站），另一种是依附项目的 Project  Pages。</p>

<h3>User &amp; Organization Pages</h3>

<p>两种方法都可以建立个人博客，下面以第一种为例介绍，形如<code>alfred-sun.github.io</code>这样的可访问的站，每个用户名下面只能建立一个，创建之后点击<code>Admin</code>进入项目管理，可以看到是这样的：
<img src="/media/pictures/github-pages/user-pages.png" alt="user pages">
而普通的项目是这样的，即使你也是用的<code>othername.github.io</code>：
<img src="/media/pictures/github-pages/other-pages.png" alt="other pages"></p>

<p>创建好<code>username.github.io</code>项目之后，提交一个<code>index.html</code>文件，然后<code>push</code>到GitHub的<code>master</code>分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右（貌似木有这么慢吧 =A=）。</p>

<p>生效之后，访问 <code>username.github.io</code> 就可以看到你上传的页面了，<a href="http://alfred-sun.github.io">alfred-sun.github.io</a> 就是一个例子。</p>

<p>这样，将这个代码库 <code>git clone</code> 到本地后，并根据下面的说明搭建好本地 Jekyll 环境，就可以开始写博客了，写完后直接提交到 GitHub 的这个代码库，然后通过上面的 URL 就能看到博客的样子了。</p>

<p>关于第二种项目 <code>pages</code>，简单提一下，他和用户 pages 使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以要在项目的 <code>gh-pages</code> 分支上提交相应的文件，GitHub 会自动帮你生成项目 pages。也可以用 GitHub 提供的 <strong>Automatic page generator</strong> 体验下网站效果，具体的使用帮助可以参考 Github Pages 的<a href="https://help.github.com/categories/github-pages-basics/">官方文档</a>。</p>

<p>更专业一点的请看 GotGithub 教程：<a href="http://www.worldhello.net/gotgithub/03-project-hosting/050-homepage.html">建立主页 - GotGithub</a>。</p>

<h3>绑定域名</h3>

<p>我们在第一部分就提到了在DNS部分的设置，再来看在 GitHub 的配置，要想让 <code>username.github.io</code> 能通过你自己的域名来访问，需要在项目的根目录下新建一个名为 <code>CNAME</code> 的文件，文件内容形如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">example.com
</code></pre></div>
<p>你也可以绑定在二级域名上：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">blog.example.com
</code></pre></div>
<p>需要提醒的一点是，如果你使用形如 <code>example.com</code> 这样的顶级域名的话，需要在 DNS 处设置 <strong>A 记录</strong>到 <code>207.97.227.245</code>（<strong>这个地址会有变动，<a href="https://help.github.com/articles/my-custom-domain-isn-t-working">这里</a>查看</strong>），而不是在 DNS 处设置为 CNAME 的形式，否则可能会对其他服务（比如 Email）造成影响。如果绑定的是二级域名，则DNS要新建一条 <strong>CNAME 记录</strong>，指向 <code>username.github.io</code>（将 username 换成你的用户名）</p>

<p>设置成功后，根据 DNS 的情况，最长可能需要一天才能生效，耐心等待吧。<br>
参考：<a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/">About custom domains for GitHub Pages sites</a></p>

<h2>搭建本地 Jekyll 环境</h2>

<p>Jekyll 是一个静态站点生成器，它会根据模板、网页纯文本源码生成静态网页文件。</p>

<p>GitHub Pages 本身支持 Jekyll，处理向代码仓库特定分支提交的每个文本文件页。对于 User Pages，使用 <code>username.github.io</code> 代码仓库的 <code>master</code> 分支；对于 Project Pages，使用每个项目代码仓库的 <code>gh-pages</code> 分支。参考帮助文档：<a href="https://help.github.com/articles/using-jekyll-with-pages/"><strong>Using Jekyll with Pages</strong></a>。</p>

<p>在本地建一个文件夹作为博客根目录，进入目录新建一个 HTML 主页 <code>index.html</code>。这样，一个简单的博客目录就完成了，下面以此为例介绍如何搭建本地开发环境。</p>

<h3>独立安装 Jekyll 系统</h3>

<p>这里简单介绍一下在 Mac OS X 下面的安装过程，其他操作系统可以参考官方的 <a href="https://github.com/mojombo/jekyll/wiki/Install">Jekyll 安装</a>。</p>

<p>作为生活在水深火热的墙内人民，有必要进行下面一步修改 gem 源，方便我们更快的下载所需组件：</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">sudo</span> <span class="n">gem</span> <span class="n">sources</span> <span class="o">--</span><span class="n">remove</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">/</span>
<span class="n">sudo</span> <span class="n">gem</span> <span class="n">sources</span> <span class="o">-</span><span class="n">a</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">ruby</span><span class="o">.</span><span class="n">taobao</span><span class="o">.</span><span class="n">org</span><span class="o">/</span>
</code></pre></div>
<p>然后用 <code>gem sources -l</code> 看看现在源列表</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>gem sources -l

*** CURRENT SOURCES ***

http://ruby.taobao.org
</code></pre></div>
<p>如果是上面那样就可以用 Gem 安装 Jekyll</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>gem install jekyll
</code></pre></div>
<p>不过一般如果有出错提示，你可能需要这样安装：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ sudo gem install jekyll
</code></pre></div>
<p>我到了这一步的时候总是提示错误<code>Failed to build gem native extension</code>，很可能的一个原因是没有安装rvm，<a href="https://rvm.io/rvm/install/">rvm的安装</a>可以参考这里，或者敲入下面的命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre></div>
<p>然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置<code>markdown:rdiscount</code>：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ gem install jekyll rdiscount
</code></pre></div>
<p>好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ jekyll --server
</code></pre></div>
<p>这个时候，你就可以通过 <code>localhost:4000</code> 来访问了。</p>

<h3>Install Jekyll with Bundler</h3>

<p>建议采用这种方式安装，方便管理 RubyGems 依赖组件，确保本地 Ruby 的开发环境时刻与 GitHub Pages 运行环境一致。<br>
<a href="https://pages.github.com/versions/" title="GitHub Pages dependencies and versions">Dependency versions</a> 这里列出了当前 GitHub Pages 使用的各个 gem 组件的版本。执行下面三步在本地安装 Jekyll：</p>

<blockquote>
<ol>
<li><p>Install <strong>Ruby</strong><br>
到 <a href="https://www.ruby-lang.org/en/downloads/">Download Ruby</a> 下载安装 Ruby，命令行执行 <code>ruby --version</code> 检查确保版本是 <code>1.9.3</code> 或 <code>2.0.0</code>。</p></li>
<li><p>Install <strong>Bundler</strong><br>
负责管理 RubyGems 组件的版本，执行 <code>gem install bundler</code> 安装。</p></li>
<li><p>Install <strong>Jekyll</strong><br>
Bundler 安装成功后，最后要安装 Jekyll 及依赖的 gem 组件。在网站文件目录建立 <code>Gemfile</code> 文件，并添加一行：<code>gem &#39;github-pages&#39;</code>，然后执行 <code>bundle install</code>；<br>
如果未安装 Bundler，那么就执行 <code>gem install github-pages</code>。<br>
下面是一个 Gemfile 文件的示例。</p></li>
</ol>
</blockquote>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">source</span> <span class="s1">&#39;https://ruby.taobao.org&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;github-pages&#39;</span>
</code></pre></div>
<h3>运行 Jekyll</h3>

<p>上面的 Gemfile 确保了与 GitHub Pages 相同的环境，在网站根目录下启动 Jekyll （项目代码仓库要切换到 <code>gh-pages</code> 分支）：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">bundle <span class="nb">exec </span>jekyll serve
</code></pre></div>
<p>成功启动后，就可以通过访问 <code>http://localhost:4000</code> 预览网站。</p>

<p>为确保本地与 GitHub Pages 服务器的 Jekyll 运行环境相同，保持 gem 版本一致，执行：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">bundle update
<span class="c"># 或者，未安装 Bundler的话</span>
gem update github-pages
</code></pre></div>
<p><strong>可用的 Jekyll 命令</strong></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build --destination &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build --source &lt;<span class="nb">source</span>&gt; --destination &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build --watch
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>


<span class="nv">$ </span>jekyll serve
<span class="c"># =&gt; A development server will run at http://localhost:4000/</span>
<span class="c"># Auto-regeneration: enabled. Use `--no-watch` to disable.</span>

<span class="nv">$ </span>jekyll serve --detach
<span class="c"># =&gt; Same as `jekyll serve` but will detach from the current terminal.</span>
<span class="c">#    If you need to kill the server, you can `kill -9 1234` where &quot;1234&quot; is the PID.</span>
<span class="c">#    If you cannot find the PID, then do, `ps aux | grep jekyll` and kil</span>

<span class="nv">$ </span>jekyll serve --no-watch
<span class="c"># =&gt; Same as `jekyll serve` but will not watch for changes.</span>
<span class="c"># As of version 2.4, the &quot;serve&quot; command will watch for changes automatically.</span>
</code></pre></div>
<h3>Windows 环境下运行 Jekyll</h3>

<p>在 Windows 下安装 <a href="http://rubyinstaller.org/" title="RubyInstaller for Windows">Ruby</a> 时，记得要 <strong>“Add Ruby executables to your PATH”</strong>，并且要安装相应的 <a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit#user-content-installation-instructions">Development Kit</a>，DevKit 要对应 Ruby 的版本，这点不要忘了。<br>
参考 Julian Thilo 写过一份说明文档，内容很详细：<a href="http://jekyll-windows.juthilo.com/" title="Run Jekyll on Windows"><strong>Jekyll running on Windows</strong></a>。</p>

<h4>编码</h4>

<p>一定要确保你的 UTF-8 编码的文件没有 <code>BOM</code> 头部字符（windows 记事本默认的编码是 <strong>ANSI</strong>，这个地方一定要注意）。</p>

<p>另外，在 <code>_config.yml</code> 中配置选项 <code>encoding: utf-8</code>（自 Ruby 2.0.0 起，<strong>utf-8</strong> 已变为默认值），可以使得 Jekyll 以 UTF-8 字符编码读取网站文件。<br>
而遇到这个错误：“Liquid Exception: Incompatible character encoding” 时，可以试试将 windows 控制台的编码改为 UTF-8：<code>$ chcp 65001</code></p>

<h4>自动生成</h4>

<p>自 Jekyll 1.3.0 起，便用 <code>listen</code> gem 来监听网站目录下文件的变动。Windows 平台下需要额外的 gem 组件来兼容，Gemfile 增加一行：</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;wdm&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.1.0&#39;</span> <span class="k">if</span> <span class="no">Gem</span><span class="o">.</span><span class="n">win_platform?</span>
</code></pre></div>
<h2>Jekyll 模板系统</h2>

<p>GitHub Pages 为了提供对HTML内容的支持，选择了 <a href="https://github.com/mojombo/jekyll" title="Jekyll">Jekyll</a> 作为模板系统，Jekyll 是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便；参考博主的另一篇文章<a href="/blog/2015/01/10/jekyll-liquid-syntax-documentation/">《Jekyll/Liquid API 语法文档》</a> 详细介绍 Jekyll 的相关内容，你也可以查看 <a href="https://github.com/mojombo/jekyll/blob/master/README.markdown">Jekyll官方文档</a>。</p>

<p>你可以直接 fork <a href="https://github.com/beiyuu/Github-Pages-Example">BeiYuu的项目</a>，然后改名，就有了你自己的基于 Jekyll 的博客了，当然你也可以按照下面的介绍自己创建。</p>

<h3>1、Jekyll 基本结构</h3>

<p>Jekyll 的核心其实就是一个文本转换引擎，用你最喜欢的标记语言写文档，可以是 Markdown、Textile 或者 HTML 等等，再通过 <code>layout</code> 将文档拼装起来，根据你设置的 URL 规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是 web 页面。</p>

<p>基本的 Jekyll 结构如下：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">|-- _config.yml
|-- _includes
|   |-- header.html
|   `-- footer.html
|-- _layouts
|   |-- default.html
|   `-- post.html
|-- _posts
|   |-- 2013-10-29-why-every-programmer-should-play-nethack.md
|   `-- 2009-04-26-barcamp-boston-4-roundup.textile
|-- _site
`-- index.html
</code></pre></div>
<p>简单介绍一下他们的作用：</p>

<h4>_config.yml</h4>

<p>配置文件，用来定义你想要的效果，设置之后就不用关心了。</p>

<h4>_includes</h4>

<p>可以用来存放一些小的可复用的模块，方便通过 <code>{% include file.html %}</code> 灵活的调用。这条命令会调用 _<em>includes/file.html</em> 文件。</p>

<h4>_layouts</h4>

<p>这是模板文件存放的位置。Page / Post 通过 <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML Front Matter</a>来指定要用的模板，后面会讲到， <code>{{ content }}</code> 标记用来将这两种数据插入到这些模板中来（Jekyll 中的“ content ”对象要么是 Page，要么是 Post）。</p>

<h4>_posts</h4>

<p>存放动态的文章内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是<code>2012-02-22-artical-title.MARKUP</code>这样的形式，MARKUP 是你所使用标记语言的文件后缀名，文章的链接规则可以在 <strong>_config.yml</strong> 中设定，也可以在单个文章中灵活调整。</p>

<h4>_site</h4>

<p>这个存放Jekyll最终生成的文档的目录。最好把他放在你的<code>.gitignore</code>文件中忽略它。</p>

<h4>其他文件夹</h4>

<blockquote>
<p><b style="font-family: Viner Hand ITC, Segoe Print, Segoe Script;
font-size: 16px;">&ldquo;Every file or folder that does not begin with an underscore will be copied to the generated site.&rdquo;</b></p>
</blockquote>

<p>任何以下划线开头的文件和目录都不会成为网站的一部分。<br>
你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了<code>project</code>文件夹，下面有一个<code>github-pages.md</code>的文件，那么你就可以通过<code>yoursite.com/project/github-pages</code>访问的到，文件后缀可以是<code>.html</code>或者<code>.md</code>或者<code>.markdown</code>或者<code>.textile</code>。</p>

<h3>2、Jekyll 的配置</h3>

<p>Jekyll 的配置写在 <code>_config.yml</code> 文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，<a href="http://jekyllrb.com/docs/configuration/">官方配置文档</a>有很详细的说明，博主的另一篇文章也写的足够详尽了，确实需要了可以去查，这里我们主要说两个比较重要的东西，一个是 <code>Permalink</code>，还有就是自定义项。</p>

<p><code>Permalink</code> 项用来定义你最终的<a href="http://jekyllrb.com/docs/permalinks/">文章链接</a>是什么形式，他有下面几个变量：</p>

<ul>
<li><code>year</code> ：文件名中的年份</li>
<li><code>month</code> ：文件名中的月份</li>
<li><code>day</code> ：文件名中的日期</li>
<li><code>title</code> ：文件名中的文章标题</li>
<li><code>categories</code> ：YAML 头部定义的文章的分类，如果文章没有分类，会忽略</li>
<li><code>short_year</code> ：文件名中的除去前缀世纪数的年份</li>
<li><code>i_month</code> ：文件名中的除去前缀0的月份</li>
<li><code>i_day</code> ：文件名中的除去前缀0的日期</li>
</ul>

<p>看看最终的配置效果：</p>

<ul>
<li><code>permalink: pretty</code>  =&gt;  /2009/04/29/slap-chop/index.html</li>
<li><code>permalink: /:month-:day-:year/:title.html</code>  =&gt;  /04-29-2009/slap-chop.html</li>
<li><code>permalink: /blog/:year/:month/:day/:title</code>  =&gt;  /blog/2009/04/29/slap-chop/index.html</li>
<li><code>permalink: /:title</code>  =&gt;  /github-pages/index.html</li>
</ul>

<p>自定义项的内容，例如我们定义了<code>title: Alfred 的博客</code>这样一项，那么你就可以在文章中使用 <code>{{ site.title }}</code> 来引用这个变量了，非常方便定义些全局变量。</p>

<h3>3、YAML Front Matter 和模板变量</h3>

<p>对于使用YAML定义格式的文章，Jekyll 会特别对待，他的格式要求比较严格，必须是这样的形式：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div>
<p>前后的<code>---</code>不能省略，在这之间，你可以定一些你需要的变量，layout 就是调用<code>_layouts</code>下面的某一个模板，上面的 <code>title</code> 就是自定义的内容，在文章中可以通过 <code>{{ page.title }}</code> 这样的形式调用。可以使用一些其他的变量还有：</p>

<ul>
<li><code>layout</code> ：指定当前页面要用的模板文件</li>
<li><code>category</code> | <code>categories</code> ：设置文章的分类；多个分类间用空白符隔开，或使用 <a href="http://en.wikipedia.org/wiki/YAML#Lists"><strong>YAML Lists</strong></a> 格式</li>
<li><code>tags</code> ：设置文章的 tag，同上</li>
<li><code>permalink</code> ：文章的路径，默认是<code>/year/month/day/title.html</code>。也可以自定义路径，可以用的变量有<code>:year</code>，<code>:month</code>，<code>:day</code>，<code>:title</code>以及<code>:categories</code>。<code>:categories</code>来自 front matter；其他的变量都来自文章的文件名。你可以用<code>/:year/:month/:title</code>或者<code>/:categories/:title.html</code>的形式来设置permalink。需要注意的是，如果你文章的front matter中有<code>permalink</code>选项，它会覆盖掉全局的默认值</li>
<li><code>published</code> ：可以单独设置某一篇文章是否需要发布</li>
<li><code>date</code> ：覆盖 post 文件名中的日期，确保 posts 准确排序，为 Posts 预定义变量；其值的格式：<u><strong>YYYY-MM-DD HH:MM:SS +/-TTTT</strong></u>，时、分、秒、时区偏移量，是可选的</li>
</ul>

<!--
- `auto` 添加`auto: true`到你的配置文件来保持Jekyll运行，查看你的项目目录的改变并随时生成网站
- `source` 如果源文件目录不是运行Jekyll的目录，你就要用source选项来设置源文件目录
- `destination` Jekyll默认会把网站生成在`./_site`，如果你想把网站生成在别的目标，就可以永这个选项设定
- `exclude` 像上面所言，Jekyll会忽略以下划线开头的文件。但是，如果你有需要忽略的目录，但是又不是以下划线开头，你可以在`exclude`中设定
-->

<p>Jekyll 只处理含有 <strong>YAML Front Matter</strong> 的文件（不以下划线开头的），用模板装饰后才被放进 <code>_site</code> 目录，其他文件直接被复制到该目录。</p>

<p>对于 Jekyll 的模板变量，请参考官方文档：<a href="https://github.com/mojombo/jekyll/wiki/template-data" title="Jekyll Template Data">https://github.com/mojombo/jekyll/wiki/template-data</a></p>

<h3>4、为 Jekyll 设计模板系统</h3>

<p>首页要明确一点，Jekyll 是解析引擎，不是模板系统，它用来解析特点符号标记的文本内容，根据模板样式转出相应布局的 HTML 文件，这个模板就是要我们自己来设计的。</p>

<p>然后，使用 Jekyll 中的模板要理解两个概念：<strong>Templates</strong> 和 <strong>Content</strong>。Templates 就是我们设计的模板，而 Content 则是要放进前面设计的模板中的东西，<strong>两者的结合就是输出的整个静态网站</strong>。</p>

<ul>
<li><p><strong>Jekyll 中的 Content</strong>  </p>

<p>对 Jekyll 而言，就是 <strong>page</strong> 或者 <strong>post</strong> 对象，它们会被插进 Templates 中生成最终的静态文件。<br>
我们可以用 Markdown 这样的标记语言来写，也可以用 HTML 语言来写，可以包含 Liquid 模板语法命令来修饰特定内容。通过前面介绍的 <strong>YAML 头部</strong>指定它要引用的模板布局，这样 Jekyll 运行时就可以准确识别它们，并用相应的模板来格式化处理。</p>

<p>注意，page 和 post 有个很大的区别，了解 Jekyll 的变量后会发现，只有 <strong>page</strong> 才是默认的全局变量，可以直接拿来用。而 post 其实可以看做一个继承自 page 的对象，只不过 “post” 这个标记符没有定义而已，<strong>访问 post 中的定义的变量时，实际上还是要通过 “page” 标记符进行访问</strong>。</p></li>
<li><p><strong>Jekyll 中的 Templates</strong></p>

<p>正如前面所讲，Templates 用来包含 post 或 page 中的内容，那么如何设计模板呢？</p>

<p>当然是用 Liquid 代码和 HTML/CSS 来设计啦。Templates 文件都被放置在 <code>_layouts</code> 目录中，它可以访问 Jekyll 的全局变量 <code>site</code> 和 当前页 <code>page</code> 对象。Jekyll 解析时，会把 post 或者 page 的内容都被放在 Templates 使用 <code>content</code> 变量的地方，例如：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;sidebar&quot;</span><span class="nt">&gt;</span> ... <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
    {{ content }}
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></li>
</ul>

<p>后面的建站实例中会简单的描述上述这两种结构是如何使用并一起工作的。</p>

<h2>使用 Jekyll 和 GitHub Pages</h2>

<p>GitHub Pages 以 Jekyll 系统为后台引擎，解析处理上传的纯文本文件、站内生成静态网页文件，也允许用户自己编写网页；它定义一些特色功能，同时又限制了 Jekyll 的一些配置。下面将介绍 GitHub 的一些约定，及如何使用 Jekyll 模板建立静态网页。</p>

<h3>建立静态网站实例</h3>

<p>先在本地编写符合 Jekyll 规范的网站源码，然后上传到 GitHub，由 GitHub 生成并托管整个网站。下面以建立 Project Pages 为例说明。</p>

<h4>1、创建项目</h4>

<p>在本地新建目录“ jekyll_demo ”作为网站根目录，并 Git 初始化：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir jekyll_demo
<span class="nv">$ </span><span class="nb">cd </span>jekyll_demo
<span class="nv">$ </span>git init
</code></pre></div>
<p>创建没有父节点的 gh-pages 分支（GitHub规定，只有该分支中的页面，才会生成网页文件）</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git checkout --orphan gh-pages
</code></pre></div>
<p>以下所有动作，都在该分支下完成。</p>

<h4>2、创建配置文件</h4>

<p>在项目根目录下，建立一个名为 <code>_config.yml</code> 的文本文件。它是 Jekyll 的设置文件，我们在里面填入如下内容（确保本地与 GitHub Pages URL <a href="http://jekyllrb.com/docs/github-pages/#project-page-url-structure">路径一致</a>），其他设置都可以用默认选项，具体解释参见本文“ Jekyll 的配置”。</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">baseurl</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/jekyll_demo</span>
</code></pre></div>
<p>目录结构变成：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/jekyll_demo
    | -- _config.yml
</code></pre></div>
<h4>3、定义模板</h4>

<p>在项目根目录下，创建一个 <code>_layouts</code> 目录，用于存放模板文件。<br>
进入该目录，创建一个 <code>default.html</code> 文件，作为 Blog 的默认模板，并在该文件中写入以下内容：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>

<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
     <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
     <span class="nt">&lt;title&gt;</span>{{ page.title }}<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
  {{ content }}
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>Jekyll 使用 <a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">Liquid 模板语言</a>，它有两种标记：<strong>输出</strong>和<strong>标签</strong>，前者用来输出文本，后者是命令语句。如上述代码中对两个变量用到的输出标记：<code>{{ page.title }}</code> 表示输出文章标题，<code>{{ content }}</code> 表示输出文章内容，更多模板变量请参考本文“ Liquid 语法和 API ”一节。  </p>

<p>目录结构变成：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/jekyll_demo
    |-- _config.yml
    |-- _layouts
    |       |-- default.html
</code></pre></div>
<h4>4、新建文章</h4>

<p>回到项目根目录，创建一个 <code>_posts</code> 目录，用于存放 blog 文章。<br>
进入该目录，创建一篇文章。文章就是普通的文本文件，把文件名定为 <strong>2014-12-25-hello-world.md</strong>。(注意，文件名必须为 “<strong>年-月-日-文章标题.后缀名</strong>” 的格式。如果网页代码采用 html 格式，后缀名为 <code>html</code>；如果采用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 格式，后缀名为 <code>md</code>）<br>
在该文件中，填入以下内容：（注意，行首不能有空格，并且 UTF-8 编码的文件格式不能有 BOM 头部）</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">---
layout: default
title: Hello New World
---

## {{ page.title }}

This is my first post.

{{ page.date | date_to_string }}
</code></pre></div>
<p>每篇文章的头部，必须有一个 yaml 文件头，用来设置一些元数据。它用三根短划线 <code>---</code> 标记开始和结束，里面每一行设置一种元数据。<code>layout: default</code> 表示该文章模板使用 <code>_layouts</code> 目录下的 <code>default.html</code> 文件；<code>title: Hello New World</code> 表示该文章的标题，如果不设置这个值，默认使用嵌入文件名的标题，即：“ <strong>hello world</strong> ”。</p>

<p>在 yaml 文件头后面，就是文章的正式内容，里面可以使用模板变量。<code>{{ page.title }}</code> 就是文件头中设置的“ <strong>Hello New World</strong> ”，<code>{{ page.date }}</code> 则是嵌入文件名的日期（也可以在文件头重新定义 <code>date</code> 变量），<code>| date_to_string</code> 表示将 <code>page.date</code> 变量转成可读的格式：“ <strong>25 Dec 2014</strong> ”。</p>

<p>目录结构变成：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/jekyll_demo
    |-- _config.yml
    |-- _layouts
    |       |-- default.html 
    |-- _posts
    |       |-- 2014-12-25-hello-world.md
</code></pre></div>
<h4>5、创建首页</h4>

<p>回到根目录，创建一个 <code>index.html</code> 文件，填入以下内容，链接上面写的文章：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html">---
layout: default
title: My Blog
---

<span class="nt">&lt;h2&gt;</span>{{ page.title }}<span class="nt">&lt;/h2&gt;</span>

<span class="nt">&lt;p&gt;</span>Recent Blog Posts<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;ul&gt;</span>
    {% for post in site.posts %}
      <span class="nt">&lt;li&gt;</span>{{ post.date | date_to_string }}
      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ site.baseurl }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
    {% endfor %}
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div>
<p>YAML 文件头表示首页使用 <code>default</code> 模板，标题为“ My Blog ”。然后 <code>{% for post in site.posts %}</code> 是 Liquid 命令语句，表示遍历所有的文章。这里要注意的是，Liquid 模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于 <code>{{ site.baseurl }}</code> 就是 <code>_config.yml</code> 中设置的 <code>baseurl</code> 变量。</p>

<p>目录结构变成：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/jekyll_demo
    |-- _config.yml
    |-- _layouts
    |       |-- default.html 
    |-- _posts
    |       |-- 2014-12-25-hello-world.md
    |-- index.html
</code></pre></div>
<h4>6、发布内容</h4>

<p>现在，这个简单的 Blog 就可以发布了，前往 GitHub 创建了名为“ jekyll_demo ”的项目代码库。<br>
在本地把所有内容加入本地 Git 库，然后推送到 GitHub 那个代码库中（username 是你的账户名）：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git add .
<span class="nv">$ </span>git commit -m <span class="s2">&quot;first initial commit&quot;</span>
<span class="nv">$ </span>git remote add origin https://github.com/username/jekyll_demo.git
<span class="nv">$ </span>git push origin gh-pages
</code></pre></div>
<p>成功上传之后，等一会儿，访问 <a href="http://username.github.io/jekyll_demo/">http://username.github.io/jekyll_demo/</a> ，就可以看到 Blog 已经生成了（将 username 换成你的账户名）。<br>
本地测试时，在项目根目录执行 <code>jekyll serve</code>，浏览器查看首页如下：
<img src="/media/pictures/github-pages/blog-demo.png" alt="Jekyll Site Demo" title="A Simple Blog Demo based on GitHub Pages"></p>

<p>至此，一个简单的 Blog 就算搭建完成了。</p>

<p>有一点说明一下，Jekyll 自身可以生成前面所说那个完整目录结构的一个样板，命令行执行：</p>
<div class="highlight"><pre><code class="language-rb" data-lang="rb"><span class="o">~</span> <span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">jekyll</span>
<span class="o">~</span> <span class="err">$</span> <span class="n">jekyll</span> <span class="kp">new</span> <span class="n">myblog</span>
<span class="o">~</span> <span class="err">$</span> <span class="n">cd</span> <span class="n">myblog</span>
<span class="o">~</span><span class="sr">/myblog $ jekyll serve</span>
<span class="sr"># =&gt; Now browse to http:/</span><span class="o">/</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">4000</span>
</code></pre></div>
<p>如果想在当前目录下安装 Jekyll 网站，可以简单执行 <code>jekyll new .</code> 。<br>
这样，运行 Jekyll 就可以预览一个简单的网站实例，作为学习之用可以节省不少时间。</p>

<h3>GitHub Pages 配置</h3>

<p>默认情况下，GitHub 设定了下面两个参数的缺省值，我们可以更改：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">highlighter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pygments</span>
<span class="l-Scalar-Plain">github</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">Repository metadata</span><span class="p-Indicator">]</span>
</code></pre></div>
<p><strong>“repository metadata”</strong> 对象的内容，请查看 <a href="https://help.github.com/articles/repository-metadata-on-github-pages">repository metadata on GitHub Pages</a>。</p>

<p>GitHub 还限制下面3个参数值，用户无法更改：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">safe</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
<span class="l-Scalar-Plain">lsi</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
<span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">your top-level directory</span>
</code></pre></div>
<p>另外，通过在网站代码仓库的根目录下创建名为 <code>.nojekyll</code> 的文件，可以阻止 Jekyll 处理当前代码仓库。</p>

<h3>Front Matter 是强制的</h3>

<p>Jekyll 要求每个 Markdown 文件必须在顶部定义 <strong>Front Matter</strong>，它是一组元数据，写在一对 <code>---</code> 之间：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This is my title</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
<span class="nn">---</span>

<span class="l-Scalar-Plain">Here is my page.</span>
</code></pre></div>
<p>元数据可以省略，但是必须保留这一对 <code>---</code>。只有当文件在 <code>_posts</code> 目录下时，才可以完全省略破折号。</p>

<h3>Jekyll 插件</h3>

<p>考虑到安全问题，GitHub Pages 后台通过 <code>--safe</code> 参数禁用了用户自定义的插件，只启用了几个必要的 <a href="https://pages.github.com/versions/" title="GitHub Pages dependencies and versions">Jekyll 插件</a>。这样一来，用户定义的插件不会在 GitHub Pages 上工作，但可以将本地生成的静态网站文件（<code>_site</code> 目录下）直接提交到 GitHub 来保留那些插件的效果。</p>

<p>对于 GitHub Pages 支持的插件，查看 <a href="https://help.github.com/articles/using-jekyll-plugins-with-github-pages">Using Jekyll Plugins with GitHub Pages</a>。</p>

<p>此外，Jekyll 提供了很多 Liquid 扩展和文档说明，参见 <a href="https://github.com/jekyll/jekyll/wiki/Liquid-Extensions">Liquid Extensions</a>。</p>

<h3>Liquid 语法和 API</h3>

<p>使用 Jekyll 能够快速搭建静态网站的一个重要原因是其基于模板引擎的特点，所有的纯文本经过模板渲染生成各个 HTML 文件。而模板代码的编写才是除开网站样式外另一个“有点棘手”的地方，主要是因为目前没有详细介绍 Liquid API 语法的文档，Jekyll 正是用的 Liquid 这一模板引擎库。</p>

<p>很多时候，想实现某个特定的功能，而又不想用 Jekyll Plugin 方式，只能去 Jekyll 的源码里查找是否有相关的代码。为以后方便查阅，在写本网站代码的过程中，博主总结了一些常用的 API 命令，在<a href="/blog/2015/01/10/jekyll-liquid-syntax-documentation/"><strong>《Jekyll/Liquid API 语法文档》</strong></a>这篇文章中说的很详细（貌似多写了一些 Jekyll 变量及配置参数）。本文后面的高级功能部分，也会讲一点用 Liquid 的 API 来实现的功能。</p>

<p>文章大致上分为：Jekyll 变量、Liquid Tag 语句、Liquid 过滤器函数等 3 部分内容。</p>

<h3>使用 Markdown 写博客</h3>

<p>静态网站搭建完成后，基本没有什么困难的地方了，剩下的就是用纯文本写博客了。那问题又来了，Markdown 文本的解析器非常多，不同解析器有各自特定的语法标记符号，如何去选择呢？</p>

<p>幸好 Markdown 官方提供了该类语言的一个标准，而解析器都是在标准的基础进行的功能扩展。<br>
参考<a href="/blog/2015/01/10/markdown-syntax-documentation/"><strong>《讲解 Markdown》</strong></a>该文学习如何用 Markdown 写博客。</p>

<p>强调一下这句话：<strong>“专注于文字而不是排版”</strong>，这是 Markdown 写文章最棒的地方；至于排版的问题，就交给 Jekyll 的模板去处理吧。</p>

<h3>遗留的问题</h3>

<p>我在这个过程中还遇到两个诡异的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过<code>username.github.io/blog</code>访问的到，但是在本地环境下，总是<code>not found</code>，很是让人郁闷，看生成的<code>_site</code>目录下面的文件，也是正常的<code>blog.html</code>，但就是找不到，只有当我把URL改为<code>localhost:4000/blog.html</code>的时候，才能访问的到，环境不同真糟糕。</p>

<p>还有一个是关于 <code>category</code> 的问题，根据 <code>YAML</code> 的语法，我们在文章头部可以定义文章所属的类别，也可以定义为 <code>category:[blog,rss]</code> 这样子的多类别，我在本地试一切正常，但是 push 到 GitHub 之后，就无法读取了，真让人着急，没有办法。<br>
原因是发现同一 GitHub 账户下面存在名为 <strong>“blog”</strong> 的 repo，两者之间存在 <a href="https://help.github.com/articles/using-jekyll-with-pages/#troubleshooting">URL 路径冲突</a>，应该尽量避免这种情况发生。</p>

<blockquote>
<p><em>If you are having issues with your Jekyll Pages, make sure you are not using categories that are named the same as another project, as this could cause <strong>path conflicts</strong>.</em><br>
<em>For example: if you have a blog post named &lsquo;resume&rsquo; in your User Page repository and a project named &lsquo;resume&rsquo; with a <strong>gh-pages</strong> branch, they will conflict with each other.</em></p>
</blockquote>

<p>这里还有一篇<a href="http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html">《Jekyll 本地调试之若干问题》</a>，安装中如果有其他问题，也可以对照参考一下。</p>

<h2>配置 Jekyll 高级功能模块</h2>

<h3>现成的模板</h3>

<ul>
<li>使用 Jekyll 的网站：<a href="http://jekyllrb.com/docs/sites/"><strong>Jekyll-powered blogs</strong></a>、 <a href="https://github.com/jekyll/jekyll/wiki/Sites"><strong>&ldquo;Sites&rdquo; page in the Jekyll wiki</strong></a></li>
<li>Jekyll 主题模板：<a href="http://jekyllthemes.org/"><strong>Jekyll Themes</strong></a></li>
</ul>

<h3>分类和标签</h3>

<p>从功能的角度 blog 除了文章以外，对文章的分类、标签、归档都是主流的功能。对 Jekyll 而言，归档实现很简单，就不说了，这一部分主要介绍对文章进行分类、加标签并显示的功能代码。</p>

<p>分类和标签功能是 Jekyll 的 <strong>yaml-format</strong> 的内置功能，正如前面 <strong>YAML 文件头部</strong>解释的那样，在每篇文章上方设置：这里需要注意的是如果多个 category 或者 tag 的话，用逗号分隔，并且要紧跟一个空格。分类可以任意添加，Jekyll在解析网站的时候会统计所有的分类，并放到 <code>site.categories</code> 中，换句话说，不能脱离文章而设置分类；标签的处理方式也是类似的。</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Title</span>
<span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">这里的 Description 是自定义属性</span>
<span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">web-build</span><span class="p-Indicator">]</span>
<span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">github-page</span><span class="p-Indicator">,</span> <span class="nv">jekyll</span><span class="p-Indicator">,</span> <span class="nv">liquid</span><span class="p-Indicator">]</span>
<span class="nn">---</span>
</code></pre></div>
<p>在 Jekyll 里面，Tag 和 Category 的实现原理基本是相同的，因此这里就以 Category 为例进行说明。<br>
下面代码列举了所有 post 的分类及每个类别的 post 数量，然后针对每个类别，分别列出属于该类的 post 名字和路径。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;category&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
        {% for category in site.categories %}
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ site.BASE_PATH }}/category.html#{{ category[0] }}-ref&quot;</span><span class="nt">&gt;</span>
            {{ category[0] }}  <span class="c">&lt;!-- 类别名 --&gt;</span>
            <span class="nt">&lt;span&gt;</span>{{ category[1].size }}<span class="nt">&lt;/span&gt;</span>  <span class="c">&lt;!-- 该类下 post 数量 --&gt;</span>
            <span class="c">&lt;!-- &lt;=&gt; {{ site.categories[category].size }} --&gt;</span>
            <span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post-category&quot;</span><span class="nt">&gt;</span>
    {% for category in site.categories %}
      <span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">&quot;{{ category[0] }}-ref&quot;</span><span class="nt">&gt;</span>{{ category[0] }}<span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;post-list&quot;</span><span class="nt">&gt;</span>
        {% for post in category[1] %}  <span class="c">&lt;!-- 遍历类别下所有 post --&gt;</span>
            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ post.url }}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
        {% endfor %}
      <span class="nt">&lt;/ul&gt;</span>
    {% endfor %}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>分析代码，会注意到分类的名字和其包含的文章的数据结构，用到了 <strong>Hash</strong> 来实现（其中 Hash 的值是一个 post 的数组）：<strong>item[0] 是键，item[1] 是值</strong>。Tag 的处理方式类似，这里就省略了。</p>

<p>如果想了解如何让网页实现标签云，请移步<a href="/blog/2014/12/11/generate-tags-with-js-in-jekyll/"><strong>《用js在jekyll博客中实现标签云和标签页》</strong></a>。</p>

<h3>分页显示示例</h3>

<p>由于 <code>_config.yml</code> 配置文件中只能指定一个 <code>paginate_path</code> 页面变量来实现该 Web 页面的分页效果，所以整个网站也只能对某一个 <strong>post 列表页面</strong>进行分页处理。<br>
有关 Jekyll 分页的内容，博主在<a href="/blog/2015/01/10/jekyll-liquid-syntax-documentation/">《Jekyll/Liquid API 语法文档》</a>这篇文章中详细解释，这里仅仅列出3种常见用法。另外请参考官方文档 <a href="http://jekyllrb.com/docs/pagination/"><strong>Pagination</strong></a> 的说明作进一步了解。</p>

<h4>1、分页输出</h4>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>post<span class="w"> </span>in<span class="w"> </span>paginator.posts<span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> 输出当前分页的所有文章 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">content</span><span class="w"> </span><span class="p">}}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<h4>2、显示所有分页页码的列表</h4>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">paginator</span><span class="p">.</span><span class="nv">previous_page</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> 判断输出前一个分页 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> &quot;page&quot; + paginator.previous_page_path </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">paginator</span><span class="p">.</span><span class="nv">next_page</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> 判断输出后一个分页 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> &quot;page&quot; + paginator.next_page_path </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span>page<span class="w"> </span>in<span class="w"> </span>(<span class="mi">1</span>..paginator.total_pages)<span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">paginator</span><span class="p">.</span><span class="nv">page</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> 如果是当前分页 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> page </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> 不是的话输出其他分页号码及链接路径 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
    <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> &quot;page&quot; + page.url </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<h4>3、文章页面显示前一篇文章和后一篇文章</h4>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">previous</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> url:    page.previous.url </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> title:  page.previous.title | truncatewords:5 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">next</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> url:    page.next.url </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="nt">comment</span><span class="w"> </span><span class="p">%}</span><span class="c"> title:  page.next.url | truncatewords:5 </span><span class="p">{%</span><span class="w"> </span><span class="nt">endcomment</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<h3>代码高亮插件</h3>

<p>如果写技术博客，代码高亮少不了，这里博主列出了 3 种方案可供选择：</p>

<ul>
<li><a href="https://gist.github.com/">GitHub Gist</a>：简单易用，省心省事，支持语言足够多（见文档 <a href="http://jekyllrb.com/docs/templates/#gist">Templates</a>）</li>
<li>JS 插件：<strong><a href="http://code.google.com/p/google-code-prettify/">Google Code Prettify</a></strong> 或 <u><strong><a href="https://github.com/isagalaev/highlight.js">Highlight.js</a></strong></u> 或 <strong><a href="http://alexgorbatchev.com/SyntaxHighlighter/">dp.SyntaxHighlighter</a></strong> 或 <strong><a href="http://prismjs.com/">Prism</a></strong> 或 <a href="http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine">DlHightLight</a><br></li>
<li><a href="https://github.com/tmm1/pygments.rb">pygments.rb</a>：Ruby 代码高亮组件，需要安装 Python 以及 Python 的包管理软件（Gem 最新版<strong>已包含 Python 的 Pygments 包</strong>，但仍要安装 Python），定制 code style CSS样式，配置有些复杂，尤其是在 Windows 平台</li>
</ul>

<h4>1、嵌入 GitHub Gist</h4>

<p>Gist 代码通过使用 GitHub 提供的 <code>gist</code> 标签命令引用，如：  </p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">gist</span><span class="w"> </span>corbanbrook/<span class="mi">218883</span><span class="w"> </span>spell_correct.py<span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<h4>2、引入 JS 插件</h4>

<p>相比其他插件，DLHightLight 支持的语言相对较少一些，有js、css、xml和html，而其他高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持；<br>
此外，各个插件在渲染速度、效果方面各有不同，具体请看博主这 3 篇使用体验：</p>

<ul>
<li><a href="/blog/2014/12/15/Use-google-code-prettify-for-jekyll/">Jekyll 中用 Google Code Prettify</a></li>
<li><a href="/blog/2014/12/15/Use-Syntaxhighlighter-for-Jekyll/">Jekyll 中用 SyntaxHighlighter</a></li>
<li><a href="/blog/2014/12/15/use-highlight.js-for-jekyll/">Jekyll 中用 Highlight.js</a></li>
</ul>

<h4>3、使用 pygments.rb 组件</h4>

<p>pygments.rb 是高亮代码工具 <a href="http://pygments.org/">Pygments</a> 的 Ruby 实现，Jekyll 原生支持 pygments.rb ，Pygments 支持<a href="http://pygments.org/docs/lexers/">多种语言语法高亮</a>。下面简单介绍如何配置使用，更多内容见<a href="http://jekyllrb.com/docs/templates/#code-snippet-highlighting">Jekyll文档</a>说明。</p>

<ul>
<li><p>(1) 安装 Python 2.x<br>
Python 版本一定要选择 2.x；默认安装即可，无需添加其他包。<br>
在 Windows 平台下面的一定要确保 <strong>“Add python.exe to Path”</strong>，可以看看<a href="http://jekyll-windows.juthilo.com/3-syntax-highlighting/">这里</a>。</p></li>
<li><p>(2) 安装 Pygments.rb</p>
<div class="highlight"><pre><code class="language-rb" data-lang="rb"><span class="n">gem</span> <span class="n">install</span> <span class="n">pygments</span><span class="o">.</span><span class="n">rb</span>
</code></pre></div>
<p>一般而言，按照上面安装 Jekyll 的步骤，Bundler 会自动安装这个 gem 组件，这步可以忽略（因为它已经被绑定在 <code>github-pages</code> gem 组件里了）。</p></li>
<li><p>(3) 配置 _config.yml 文件<br>
在网站根目录的配置文件中，指定 Jekyll 语法高亮工具：</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">highlighter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pygments</span>
<span class="l-Scalar-Plain">mardown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">redcarpet</span>
</code></pre></div>
<p>然后，需要定义用于语法高亮的 Pygments 样式，并在网页Head标签中将其引入。这里有个CSS示例文件 <strong><a href="https://github.com/mojombo/tpw/blob/master/css/syntax.css">syntax.css</a></strong> 供参考。<br>
Pygments 工具本身提供了很多语法高亮样式文件，安装这个 Python 包，并执行下面的命令可以查看、生成所有的样式CSS文件：</p>
<div class="highlight"><pre><code class="language-py" data-lang="py"><span class="c"># 列出当前 Pygments 支持的样式</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">pygments.styles</span> <span class="kn">import</span> <span class="n">STYLE_MAP</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">STYLE_MAP</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
<span class="p">[</span><span class="s">&#39;manni&#39;</span><span class="p">,</span> <span class="s">&#39;igor&#39;</span><span class="p">,</span> <span class="s">&#39;xcode&#39;</span><span class="p">,</span> <span class="s">&#39;vim&#39;</span><span class="p">,</span> <span class="s">&#39;autumn&#39;</span><span class="p">,</span> <span class="s">&#39;vs&#39;</span><span class="p">,</span> <span class="s">&#39;rrt&#39;</span><span class="p">,</span> <span class="s">&#39;native&#39;</span><span class="p">,</span> <span class="s">&#39;perldoc&#39;</span><span class="p">,</span> <span class="s">&#39;borland&#39;</span><span class="p">,</span> <span class="s">&#39;tango&#39;</span><span class="p">,</span> <span class="s">&#39;emacs&#39;</span><span class="p">,</span> <span class="s">&#39;friendly&#39;</span><span class="p">,</span> <span class="s">&#39;monokai&#39;</span><span class="p">,</span> <span class="s">&#39;paraiso-dark&#39;</span><span class="p">,</span> <span class="s">&#39;colorful&#39;</span><span class="p">,</span> <span class="s">&#39;murphy&#39;</span><span class="p">,</span> <span class="s">&#39;bw&#39;</span><span class="p">,</span> <span class="s">&#39;pastie&#39;</span><span class="p">,</span> <span class="s">&#39;paraiso-light&#39;</span><span class="p">,</span> <span class="s">&#39;trac&#39;</span><span class="p">,</span> <span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="s">&#39;fruity&#39;</span><span class="p">]</span>

<span class="c"># 通过 -S 来选择要生成的样式，比如：monokai 样式</span>
<span class="err">$</span> <span class="n">pygmentize</span> <span class="o">-</span><span class="n">S</span> <span class="n">monokai</span> <span class="o">-</span><span class="n">f</span> <span class="n">html</span> <span class="o">&gt;</span> <span class="n">your</span><span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">pygments</span><span class="o">.</span><span class="n">css</span>
</code></pre></div>
<p>更多说明见：<a href="http://pygments.org/docs/quickstart/">http://pygments.org/docs/quickstart/</a></p></li>
<li><p>(4) 高亮代码片段<br>
语法高亮的代码片段要放在标签对 <code>{% highlight language %}</code> 和 <code>{% endhighlight %}</code> 之间，其中的 language 为<a href="http://pygments.org/docs/lexers/">多种语言高亮</a>页面中的 <strong>Short names</strong>。  </p>
<div class="highlight"><pre><code class="language-liquid" data-lang="liquid"><span class="p">{%</span><span class="w"> </span><span class="nt">highlight</span><span class="w"> </span>python<span class="w"> </span><span class="p">%}</span>
def add(a,b):
    return a+b
print add(1,2)
<span class="p">{%</span><span class="w"> </span><span class="nt">endhighlight</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div>
<p>这是 Jekyll 提供的高亮代码块的原生命令，而有些 Markdown 解析器支持 <code>` ` `</code> 这样的简易标记符，可以将代码块包在一对连续3个反引号之间。<br>
Jekyll 高亮语法命令还支持行号显示，只需在 <code>highlight</code> 的语言识别符 <code>language</code> 后面加选项 <code>linenos</code>。为了更好的显示行号，最好为 <code>&lt;pre&gt;</code> 添加 <code>.linenos</code> class样式。</p></li>
</ul>

<p>另外，<a href="/blog/2014/12/16/github-pages-issue/"><strong>《GitHub Pages Issue》</strong></a>这篇文章里面，博主记录了在配置使用 pygments.rb 过程中遇到的一些问题，以及解决方法，有兴趣可参考一下下。</p>

<h3>关于使用数学公式</h3>

<h4>1、使用 <a href="https://github.com/bhollis/maruku" title="A pure-Ruby Markdown-superset interpreter">Maruku</a> 来解析 Markdown 文件</h4>

<p>可以<a href="http://www.rubydoc.info/github/bhollis/maruku/master/file/docs/math.md#Enabling_the_extension">解析 LaTeX 公式</a>为 <a href="http://www.w3.org/Math">MathML</a> 或者 PNG 图片，优点是网页加载速度快；<br>
但需要安装 TeX 排版系统（如：<a href="http://www.tug.org/texlive/">TeX Live</a> 或 <a href="http://www.tug.org/mactex/">MacTeX</a>），因为 Jekyll 内置的 <a href="http://bhollis.github.io/maruku/math.xhtml#with_embedded_maruku">Maruku</a> 解析器只开启 <a href="http://gva.noekeon.org/blahtexml/" title="A TeX to MathML converter designed with MediaWiki in mind">blahtex</a> 公式引擎，且仅支持输出 PNG 格式（参考<a href="https://github.com/jekyll/jekyll/blob/master/lib/jekyll/converters/markdown/maruku_parser.rb">源码</a>），而 blahtex <a href="https://golem.ph.utexas.edu/wiki/instiki/show/BlahTeX#Intro">依赖 TeX 系统</a>在后台渲染并转换数学公式，很不方便。</p>

<h4>2、使用 <a href="http://www.mathjax.org/" title="A JavaScript display engine for mathematics that works in all browsers">MathJax</a> 公式显示 JS 引擎</h4>

<p>JS 动态加载，解析速度有些慢。GitHub Pages 支持的 <a href="http://kramdown.gettalong.org/math_engine/mathjax.html">Kramdown</a> 解析器默认使用该引擎解析渲染数学公式，使用时需要在页面引入 MathJax 库。公式书写语法参考 <a href="http://kramdown.gettalong.org/syntax.html#math-blocks">Math Blocks</a>。<br>
但是即便不改换 Markdown 解析器，只要加载 MathJax 库，仍然可以正确显示公式，博主亲测！查阅 Jekyll 内置的 Kramdown 代码也没看到有相关的配置，只是简单的将文本中的公式区块解析成 HTML 标签 <code>&lt;script type=&quot;math/tex&quot;&gt;</code>，最终的公式渲染工作还是由 JS 实现。</p>

<p>按照下面的步骤，可以在 Markdown 文本中书写数学公式：</p>

<p>(1) 安装 kramdown 包</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="n">install</span> <span class="n">kramdown</span>
</code></pre></div>
<p>(2) 在 <code>_config.yml</code> 中指定 Markdown 解析器</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># Conversion</span>
<span class="l-Scalar-Plain">markdown</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">kramdown</span>

<span class="c1"># Markdown Processors</span>
<span class="l-Scalar-Plain">kramdown</span><span class="p-Indicator">:</span>    <span class="c1"># Better to turn on recognition of Github Flavored Markdown</span>
  <span class="l-Scalar-Plain">input</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GFM</span>
</code></pre></div>
<p>(3) 再把下面的代码插入到 <code>&lt;head&gt;</code> 标签里<br>
（如果你使用 Octopress，那就是添加到 <code>/source/_includes/custom/head.html</code> 文件里）</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
    <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span><span class="s1">&#39;$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;\\(&quot;</span><span class="p">,</span><span class="s2">&quot;\\)&quot;</span><span class="p">]</span> <span class="p">],</span>
      <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
      <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Queue</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">all</span> <span class="o">=</span> <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">getAllJax</span><span class="p">(),</span> <span class="nx">i</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">all</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">all</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">SourceElement</span><span class="p">().</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; has-jax&#39;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
   <span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>(4) 最后在 Markdown 文件里写公式代码<br>
例如，下面的 <a href="http://en.wikipedia.org/wiki/Cauchy%E2%80%93Schwarz_inequality" title="柯西-施瓦茨不等式"><strong>Cauchy-Schwarz Inequality</strong></a>：</p>
<div class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="sb">$$</span><span class="nb"></span>
<span class="nv">\left</span><span class="o">(</span><span class="nb"> </span><span class="nv">\sum</span><span class="nb">_{k</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n a_k b_k </span><span class="nv">\right</span><span class="o">)</span><span class="nb">^{</span><span class="nv">\!\!</span><span class="m">2</span><span class="nb">} </span>
<span class="nv">\leq</span><span class="nb"> </span>
<span class="nv">\left</span><span class="o">(</span><span class="nb"> </span><span class="nv">\sum</span><span class="nb">_{k</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n a_k^</span><span class="m">2</span><span class="nb"> </span><span class="nv">\right</span><span class="o">)</span><span class="nb"> </span>
<span class="nv">\left</span><span class="o">(</span><span class="nb"> </span><span class="nv">\sum</span><span class="nb">_{k</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n b_k^</span><span class="m">2</span><span class="nb"> </span><span class="nv">\right</span><span class="o">)</span><span class="nb"></span>
<span class="s">$$</span>
</code></pre></div>
<p>就会得到：</p>

<!-- MathJax support -->

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
  MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
      all[i].SourceElement().parentNode.className += ' has-jax';
    }
  });
</script>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<script type="math/tex; mode=display">
\left( \sum_{k=1}^n a_k b_k \right)^{\!\!2} 
\leq 
\left( \sum_{k=1}^n a_k^2 \right) 
\left( \sum_{k=1}^n b_k^2 \right)
</script>

<p><br/></p>
<div class="highlight"><pre><code class="language-tex" data-lang="tex">而段内插入 LaTeX 公式是这样的： <span class="s">$</span><span class="nb"> </span><span class="nv">\{\,</span><span class="nb">z</span><span class="nv">\in</span><span class="nb"> C </span><span class="nv">\mid</span><span class="nb"> z^</span><span class="m">2</span><span class="nb"> </span><span class="o">=</span><span class="nb"> {</span><span class="nv">\alpha</span><span class="nb">}</span><span class="nv">\,\}</span><span class="nb"> </span><span class="s">$</span>，试试看看吧
</code></pre></div>
<p>可以得到：</p>

<div style="border:solid 1px black;padding:10px 15px;margin-bottom:20px;">
而段内插入 LaTeX 公式是这样的： $ \{\,z\in C \mid z^2 = {\alpha}\,\} $，试试看看吧
</div>

<p><strong>需要注意</strong>的是，如果打算将 Markdown 解析器换成 Kramdown 的话，要重新检查以前写过的文章。因为 Kramdown 对 Markdown <strong>语法要求很严格</strong>，所以原先能够正确解析的地方就可能出现问题。</p>

<h3>使用 Disqus 管理评论</h3>

<p>Jekyll 只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。</p>

<p>现在专做评论模块的产品有很多，比如 <a href="http://disqus.com/">Disqus</a>，还有国产的<a href="http://duoshuo.com/">多说</a>，Disqus 对现在各种系统的支持都比较全面，只不过有时可能被墙；多说与国内的社交网络紧密结合，还是有很多亮点的。这里以 Disqus 为例说明。</p>

<p>注册账号什么的就不提了，Disqus 支持很多的博客平台，参见下图：</p>

<p><img src="/media/pictures/github-pages/disqus-site.png" alt="Disqus sites"></p>

<p>我们选择 <code>Universal Code</code> 就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：</p>

<!--?prettify lang=html linenums=true?-->
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;disqus_thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
    <span class="cm">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
    <span class="kd">var</span> <span class="nx">disqus_shortname</span> <span class="o">=</span> <span class="s1">&#39;example&#39;</span><span class="p">;</span> <span class="c1">// required: replace example with your forum shortname 这个地方需要改成你配置的网站名</span>

    <span class="cm">/* * * DON&#39;T EDIT BELOW THIS LINE * * */</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span> <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="nx">disqus_shortname</span> <span class="o">+</span> <span class="s1">&#39;.disqus.com/embed.js&#39;</span><span class="p">;</span>
        <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
    <span class="p">})();</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;noscript&gt;</span>Please enable JavaScript to view the <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com/?ref_noscript&quot;</span><span class="nt">&gt;</span>comments powered by Disqus.<span class="nt">&lt;/a&gt;&lt;/noscript&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com&quot;</span> <span class="na">class=</span><span class="s">&quot;dsq-brlink&quot;</span><span class="nt">&gt;</span>blog comments powered by <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;logo-disqus&quot;</span><span class="nt">&gt;</span>Disqus<span class="nt">&lt;/span&gt;&lt;/a&gt;</span>
</code></pre></div>
<p>配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载 Disqus。代码很简单，你可以参考我的写法。</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#disqus_container .comment&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;加载中...&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">disqus_shortname</span> <span class="o">=</span> <span class="s1">&#39;AlfredSun&#39;</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="nx">BYB</span><span class="p">.</span><span class="nx">includeScript</span><span class="p">(</span><span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="nx">disqus_shortname</span> <span class="o">+</span> <span class="s1">&#39;.disqus.com/embed.js&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">$</span><span class="p">(</span><span class="nx">that</span><span class="p">).</span><span class="nx">remove</span><span class="p">()});</span> <span class="c1">//这是一个加载js的函数</span>
<span class="p">});</span>
</code></pre></div>
<p>如果你不喜欢 Disqus 的样式，你也可以根据他生成的 HTML 结构，自己改写样式覆盖它的，Disqus 现在也提供每个页面的评论数接口，<a href="http://docs.disqus.com/developers/universal/">帮助文档</a>在这里可以看到。</p>

<h2>定制 404 页面</h2>

<p>GitHub 允许我们自定义 <strong>404</strong> 页面，而且在本地执行 Jekyll 编译测试网站时，定制的 404 错误页面同样能工作（你可以打开一个无效 URL 试试）。只需要简单的在网站根目录下创建一个 <code>404.html</code> 即可，例如：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">---
title: Page Not Found
permalink: /404.html
---

This page must have been removed or had its name changed.
</code></pre></div>
<p>此外，要注意项目页绑定域名对<a href="https://help.github.com/articles/custom-404-pages/">自定义 404 页面</a>的影响（404 页面仅对<strong>绑定顶级域名</strong>的项目才起作用，GitHub 默认分配的二级域名是不起作用的）。</p>

<h2>集成 Travis CI 编译测试功能</h2>

<p><a href="https://travis-ci.org/"><strong>Travis</strong></a> 用来跟踪检查网站生成过程中是否存在错误，尤其是在我们提交代码的时候很有用。也可以添加其他测试功能，如 <code>htmlproofer</code>，来检测 HTML 代码是否有效以及超链接是否有效。如果存在错误，就会向你注册的邮箱发送错误通知邮件。</p>

<p>首先，用 GitHub 账户信息登录 Travis，对 <code>username.github.io</code> 代码库启用 Travis 编译功能；<br>
再将 <code>htmlproofer</code> 添加到你的 GitHub 代码库的 Gemfile 文件中：</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;github-pages&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;html-proofer&#39;</span>
</code></pre></div>
<p>最后，在代码库根目录创建 <code>.travis.yml</code> 测试脚本文件，用来编译测试网站：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">language: ruby
rvm:
- 2.1.1
script:
- bundle exec jekyll build &amp;&amp; bundle exec htmlproof ./_site
</code></pre></div>
<p>现在，每次提交代码，<strong>Travis</strong> 就会对代码项目进行脚本测试，如果 Jekyll 编译有问题，或者 HTML 存在无效代码或无效链接，就给你发送邮件。更多详细介绍参考 <a href="http://jekyllrb.com/docs/continuous-integration/"><strong>Continuous Integration</strong></a>。</p>

<h2>GitHub Pages 相关的一些有趣的东西</h2>

<p>Github Pages 博客编辑器：<a href="http://prose.io/">Prose</a> | <a href="https://github.com/prose/prose">源码</a> 和 <a href="http://www.gitblog.io/">Gitblog.io</a> | <a href="https://github.com/gitblog-io/gitblog-io.github.io">源码</a></p>

<p>静态博客生成器：<a href="http://isnowfy.github.io/about-simple-cn.html">Simple</a> | <a href="https://github.com/isnowfy/simple">源码</a>  &ndash;  (<a href="https://staticsitegenerators.net/" title="The definitive listing of Static Site Generators">Static Site Generators</a>)</p>

<p>静态 WEB 博客生成器：<a href="https://github.com/tallesl/deadsimplelog">deadsimplelog</a></p>

<p>还有关于 <a href="http://jekyllbootstrap.com/">Jekyll-Bootstrap</a> 的资料，需要自己修改调试的，可以研究一下。</p>

<p>最后是基于 Jekyll 改进的博客框架 <a href="http://octopress.org/">Octopress</a>，博主也附加了一篇使用的说明文档 <a href="/blog/2014/11/23/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">《在 Windows7 下从头开始安装部署 Octopress》</a>。</p>

<p>不得不说，下面这两篇文章写的很真不错、实用：</p>

<ul>
<li><a href="http://www.zhanxin.info/jekyll/2012-12-09-jekyll-seo.html">《优化 Jekyll 站点的 SEO 技巧》</a></li>
<li><a href="http://pizn.github.io/2012/03/01/some-tips-for-jekyll-blog.html">《搭建 Jekyll 博客的一些小技巧》</a></li>
<li><a href="http://www.zhanxin.info/jekyll/2012-05-26-jekyll-static-search.html">《为 Jekyll 博客添加静态搜索》</a></li>
</ul>

<h2>结束语</h2>

<p>如果你跟着这篇“不那么详尽”的教程走，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。</p>

<h2>Further Reading</h2>

<ol>
<li><a href="http://jekyllbootstrap.com/lessons/jekyll-introduction.html"><strong>How Jekyll Works</strong></a>  介绍 Jekyll 作为<strong>解析引擎</strong>的工作机制，尤其是解析文件、生成整个网站过程</li>
<li><a href="http://jekyllbootstrap.com/api/jekyll-liquid-api.html">Jekyll Liquid API</a>  介绍了 Liquid 的一些常用 API 及支持<strong>命令语句</strong></li>
<li><a href="http://jekyllrb.com/docs/github-pages/">GitHub Pages</a>  介绍了如何在 <strong>GitHub Pages</strong> 部署静态网站</li>
</ol>

<p><strong>(I)</strong> 了解 Jekyll 静态网站生成器的起源：Jekyll 作者（也是 GitHub 的共同创始人） Tom Preston-Werner 的博文 <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html"><strong>Blogging like a hacker</strong></a>（中文翻译<a href="http://kyle.xlau.org/posts/blogging-like-a-hacker.html">《 像黑客一样写博客 》</a> by Kylexlau）。</p>

<p><strong>(II)</strong> 提供Web托管的 GitHub Pages 和 GitHub 的项目托管同样使用 Git 访问。如果你对分布式版本控制系统不熟悉，<a href="http://progit.org/book/zh/">Pro Git（中文）</a> 是一个极好的起点。</p>

<p><strong>(III)</strong> 值得推荐的几款文本编辑器（它们都支持对 Markdown 和 Textile 的原生或第三方的语法高亮）：<br>
<a href="http://www.vim.org/">Vim</a> | <a href="http://www.gnu.org/s/emacs/">GNU Emacs</a> | <a href="http://macromates.com/">TextMate</a> | <a href="http://www.scintilla.org/SciTE.html">SciTE</a> | <a href="http://live.gnome.org/Gedit/">gedit</a> | <a href="http://kate-editor.org/">Kate</a></p>

<p><strong>(IV)</strong> 你可能会用到的标记语言和模板引擎：</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Textile_(markup_language)">Textile</a> 可读性好的轻量级标记语言，可以被转换成 XHTML 格式。

<ul>
<li><a href="http://www.textism.com/tools/textile/">Textile Home Page</a></li>
<li><a href="http://redcloth.org/hobix.com/textile/">A Textile Reference</a></li>
<li><a href="http://redcloth.org/">RedCloth</a> Ruby 的 Textile 实现引擎。</li>
</ul></li>
<li><a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> 另一种 Jekyll 所支持的轻量级标记语言。

<ul>
<li><a href="http://daringfireball.net/projects/markdown/">Markdown Home Page</a></li>
<li><a href="http://deveiate.org/projects/BlueCloth">BlueCloth</a> Ruby 的 Markdown 实现引擎。</li>
<li><a href="http://maruku.rubyforge.org/">Maruku</a> Ruby 的另一个 Markdown 实现引擎，效率较高。</li>
<li><a href="http://github.com/rtomayko/rdiscount/">RDiscount</a> Ruby的另一个 Markdown 实现引擎，效率比 Maruku 更高。</li>
</ul></li>
<li><a href="http://liquidmarkup.org/">Liquid</a> Ruby 的模板渲染引擎。它也是 Jekyll 所使用的模板引擎。

<ul>
<li><a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">Liquid for Designers</a></li>
<li><a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers">Liquid for Programmers</a></li>
</ul></li>
</ul>

<p><strong>(V)</strong> 其他关于静态网站生成器的介绍和比较（英文）：</p>

<ul>
<li><a href="http://www.mickgardner.com/2011/04/27/An-Introduction-To-Static-Site-Generators.html">An Introduction to Static Site Generators</a></li>
<li><a href="http://blog.guestlistapp.com/post/2304152860/five-reasons-to-use-a-static-site-generator-instead-of">Five reasons to use a static site generator instead of Wordpress</a></li>
<li><a href="http://philipm.at/2011/0507/">jekyll vs. hyde – a comparison of two static site generators</a></li>
<li><a href="http://www.distractable.net/tech/static-site-generators-jekyll-vs-hyde">Static Website Generators – Jekyll vs Hyde</a></li>
</ul>

<p><strong>(VI)</strong> 如果想要尝试一些其他的静态网页生成器，这里是一个简略的列表：</p>

<ul>
<li>Ruby

<ul>
<li><a href="http://jekyllrb.com/">Jekyll</a></li>
<li><a href="http://tinytree.info/">Bonsai</a> 一个非常简单（但实用）的小脚本</li>
<li><a href="http://webgen.rubyforge.org/">Webgen</a> 一个较复杂的生成器</li>
</ul></li>
<li>Python

<ul>
<li><a href="http://ringce.com/hyde">Hyde</a> Jekyll的Python语言实现版本</li>
<li><a href="http://pypi.python.org/pypi/cyrax">Cyrax</a> 使用Jinja2模板引擎的生成器</li>
</ul></li>
<li>PHP

<ul>
<li><a href="http://www.phrozn.info">Phrozn</a> PHP语言实现的静态网站生成器</li>
</ul></li>
</ul>

<p><strong>(VII)</strong> 更详细的列表和介绍请参见：</p>

<ul>
<li><a href="http://www.subspacefield.org/%7Etravis/static_blog_generators.html">Static Blog Generators</a></li>
<li><a href="https://iwantmyname.com/blog/2011/02/list-static-website-generators.html">32 Static Website Generators For Your Site, Blog Or Wiki</a></li>
<li><a href="https://iwantmyname.com/blog/2014/05/the-updated-big-list-of-static-website-generators-for-your-site-blog-or-wiki.html">The updated big list of static website generators for your site, blog or wiki</a></li>
<li><a href="http://ju.outofmemory.cn/entry/95738">像黑客一样写博客——Jekyll入门</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gem相关命令使用]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/11/28/gem-command/"/>
    <updated>2014-11-28T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/11/28/gem-command</id>
    <content type="html"><![CDATA[<h2>1.显示 gem 的帮助和版本</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem –h/--help
<span class="c">#显示gem的帮助</span>
gem –v /--version
<span class="c">#显示gem的版本号</span>
</code></pre></div>
<h2>2. 列出远程库的所有可用软件</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem query --remote
<span class="c"># 短命令: gem q -r</span>
</code></pre></div>
<p>你可以看到一个关于远程主机上所有软件的详细列表。</p>

<h2>3. 查找远程主机上的特定软件</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem query --remote --name-matches doom
<span class="c"># 短命令: gem q -rn doom</span>
<span class="c"># 你将看到一个匹配doom的详细列表。</span>
</code></pre></div>
<h2>4. List remote gems</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem list –remote --d
<span class="c">#用子命令list列出远程安装的gems</span>
</code></pre></div>
<!--more-->

<h3>4.1 安装一个远程软件</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem install --remote progressbar
<span class="c"># 短命令: gem i -r progressbar –y</span>
<span class="c"># 远程安装progressbar到你的主机，-y的意思是无条件的安装依赖包</span>
gem install rails –remote
<span class="c">#从远程服务器安装rails包，其中rails可以被替换成任何一个gem list –remote –d中显示的软件包</span>
</code></pre></div>
<h3>4.2 安装软件的特定版本</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem ins -r progressbar-0.0.3
<span class="c"># 安装progressbar的0.0.3版本</span>
gem ins -r progressbar --version <span class="s1">&#39;&gt; 0.0.1&#39;</span>
<span class="c"># 将安装progressbar的大于0.0.1的最新版本</span>
</code></pre></div>
<h2>5. 查看一个已安装的软件</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem specification progressbar
<span class="c"># 短命令: gem spec progressbar</span>
<span class="c"># 你会看到关于已安装的包progressbar的详细信息。</span>
</code></pre></div>
<h2>6. 卸载一个软件</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem uninstall progressbar
<span class="c"># 卸载了progressbar</span>
</code></pre></div>
<h2>7. Installed software</h2>

<h3>7.1 将所有安装的软件列表</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem query --local
<span class="c"># 短命令: &#39;gem q -l&#39;</span>
</code></pre></div>
<h3>7.2 查看某个已安装的软件</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem query --local --name-matches doom
<span class="c"># 短命令: &#39;gem q -ln doom&#39;</span>
<span class="c"># 或：gem list --local</span>
</code></pre></div>
<h3>7.3 需要注意的安装方法</h3>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem ins rake
<span class="c"># 会先尝试本地安装，如果本地没有就会远程下载。</span>
gem list -b ^C
<span class="c"># 列出本地和远程的以C开头的软件</span>
</code></pre></div>
<h2>8. 浏览所有安装的软件和它们的说明文档</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem_server
</code></pre></div>
<p>会生成一个web服务器，打开<a href="http://localhost:8808">http://localhost:8808</a> ，就可以看到一个html详细列出了你需要的信息。</p>

<h2>9. 使用配置文件</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem: --gen-rdoc --run-tests
</code></pre></div>
<p>如果你想安装软件后总是生成它们的文档和运行单元测试，你可以在配制文件里写上相关的命令，配置文件名是.gemrc，在主目录里。</p>

<h2>10. 构建 gem 包</h2>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">gem build package.gemspec
<span class="c">#运用bulid子命令构建gem包</span>
</code></pre></div>
<hr>

<p>在 window 下安装 RoR（Ruby on Rails）真的是场噩梦&hellip;</p>

<p>前天准备在一台win server 2003上安装RoR环境。<br>
安装ruby 1.86不会有什么问题。直接下载安装windows onclick install 的exe完成安装。<br>
完成后，很熟练地执行以下命令：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem install rails --include-dependenices
gem install mongrel --include-dependenices
</code></pre></div>
<p>接下来，我还有安装rmagick ，因为在站点中有处理图片的需要。<br>
当然，安装Rmagick，首先会去下载合适的版本包（里面包含有imagemagick的exe安装文件和rmagick rubygem 包）。<br>
安装rmagick&hellip;gem 的时候可能会遇到 bufffer error 的错误。这个错误的解决办法在Rmagick上有说明。就是要升级rubygems。<br>
执行如下命令 ： 
    gem update &ndash;system
把rubygems升级到最新（0.95）后再来执行安装rmagick..gem 就没有问题了。<br>
似乎问题在一个个的解决。
继续 <code>gem install mongrel_service --include-dependenices</code>
错误出现了：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Building native extensions. This could take a while...
ERROR: Error installing mongrel_service:
ERROR: Failed to build gem native extension.
c:/ruby/bin/ruby.exe extconf.rb install mongrel_service --include-dependencies
checking for strncpy_s()... no
creating Makefile
nmake
.....
Gem files will remain installed in c:/ruby/lib/ruby/gems/1.8/gems/win32-api-1.0.
5 for inspection.
Results logged to c:/ruby/lib/ruby/gems/1.8/gems/win32-api-1.0.5/ext/gem_make.ou
t
</code></pre></div>
<p>重新安装了几次还问题依旧&hellip;  搜索错误，也有遇到类似错误的。就是没有解决办&hellip;<br>
经过多次尝试， 最后，比较了别人的环境和现在遇到问题的环境，最后一次尝试是把rubygems的版本回复到以前（0.92）。<br>
具体做法是<code>gem uninstall rubygems-update</code><br>
如果有多个版本必须请卸载掉别的版本，卸载过程会有提示。<br>
最后把版本恢复到0.92。<br>
一切恢复正常了&hellip;<br>
由此我推断，是更新到最新的rubygems引起的安装错误。如果你也不信遇到了类似的问题，可以尝试一下&hellip;<br>
注意：如果恢复后还发现版本是0.95，可以尝试进入..\ruby\gems\1.8\gems\rubygems-update-0.9.2目录下执行setup.rb</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给做技术的朋友们推荐两个开源搜索引擎(ZZ)]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/11/27/open-search-engine/"/>
    <updated>2014-11-27T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/11/27/open-search-engine</id>
    <content type="html"><![CDATA[<p>在日常的工作中，有不少朋友应该都会多少涉及到一些和搜索引擎技术相关的项目，最相关的估计是搜索引擎结果排序的算法，最好入门的估计是爬虫，以下是我们在做项目的时候接触到的两个开源搜索引擎，或许能对你有点小帮助：</p>

<h2>一：Nutch</h2>

<p><strong>Nutch</strong> 可谓大名鼎鼎，是我接触过的开源搜索引擎里面名气大且比较完整的一个了。包含了爬虫，页面分析，链接分析以及最后的文本检索，结果排序等搜索引擎最基本的架构了。它的代码是用流行语言 JAVA 书写，代码可读性不错，对一些著名的算法，譬如Google 的 PAGERANK 算法进行了完整的实现，并且你可以通过 Eclipse 进行完整的过程跟踪调试，相信这对你理解这样的著名算法肯定有所帮助。Nutch 的文件系统同样是大名鼎鼎，不过这块我跟踪的很少。有兴趣搭建自己的搜索引擎的朋友可以通过这个项目入门，虽然在实用性上面可能不尽人意（我自己的测试感觉效率不高），不过非常值得学习。</p>

<!--more-->

<p>有关这方面国内的资料可以参考<a href="http://blog.csdn.net/sky_walker85/article/category/1842591">CSDN上的资源</a></p>

<p>由于我自己是在12年附近学习，不少资料都有点记不清楚，印象里面CSDN上面的资料是最好的。</p>

<h2>二：Xapian</h2>

<p>Xapian 是谷粉的开发人员 CJY 正在使用的一个全文检索系统，虽然我并未参与该项目，不过因为经常接触搜索引擎技术，从那天他给我演示的效果来看可以知道非常强大，以450万篇的文本为样例，xapian 几乎是瞬间就能检索出相关度极好的搜索结果，而我们自己开发的文本检索系统单单20万篇文本就要15分钟，效率之高可想而知。xapian 也将会是谷粉正在开发的社区使用的站内检索系统。
不过有关它的资料国内稀少，是我们测试过的最好用的全文检索系统。</p>

<p>原文：<a href="http://www.gfsoso.org/292/">http://www.gfsoso.org/292/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 取得 iframe 中元素的几种方法（转载）]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/11/26/getElement-from-iframe-by-Jquery/"/>
    <updated>2014-11-26T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/11/26/getElement-from-iframe-by-Jquery</id>
    <content type="html"><![CDATA[<p>iframe 在复合文档中经常用到，利用 jquery 操作 iframe 可以大幅提高效率，这里收集一些基本操作</p>

<h2>基本操作</h2>

<p>DOM 方法：</p>

<blockquote>
<ul>
<li>父窗口操作IFRAME: <code>window.frames[&quot;iframeSon&quot;].document</code></li>
<li>IFRAME操作父窗口: <code>window.parent.document</code></li>
</ul>
</blockquote>

<!--more-->

<p>jquery 方法:
在父窗口中操作 选中 IFRAME 中的所有输入框：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframeSon&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;:text&quot;</span><span class="p">);</span>
</code></pre></div>
<p>在 IFRAME 中操作 选中父窗口中的所有输入框：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;:text&quot;</span><span class="p">);</span>
</code></pre></div>
<p>iframe 框架的 HTML:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;test.html&quot;</span> <span class="na">id=</span><span class="s">&quot;iframeSon&quot;</span> <span class="na">width=</span><span class="s">&quot;700&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;auto&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div>
<p>1.在父窗口中操作 选中IFRAME中的所有单选钮</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframe1&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input[@type=&#39;radio&#39;]&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span><span class="s2">&quot;true&quot;</span><span class="p">);</span>
</code></pre></div>
<p>2.在 IFRAME 中操作 选中父窗口中的所有单选钮</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input[@type=&#39;radio&#39;]&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span><span class="s2">&quot;true&quot;</span><span class="p">);</span>
</code></pre></div>
<p>iframe 框架的：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;test.html&quot;</span> <span class="na">id=</span><span class="s">&quot;iframe1&quot;</span> <span class="na">width=</span><span class="s">&quot;700&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;auto&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="lineno"> 1</span> <span class="nt">&lt;HTML</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="nt">&gt;</span>
<span class="lineno"> 2</span> <span class="nt">&lt;HEAD&gt;</span>
<span class="lineno"> 3</span>     <span class="nt">&lt;MCE:SCRIPT</span> <span class="na">mce_src=</span><span class="s">&quot;js/jquery-1.2.6.js&quot;</span> <span class="na">src=</span><span class="s">&quot;../js/jquery-1.2.6.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/ecmascript&quot;</span><span class="nt">&gt;&lt;/MCE:SCRIPT&gt;</span>    
<span class="lineno"> 4</span>     <span class="nt">&lt;MCE:SCRIPT</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span><span class="c">&lt;!--   </span>
<span class="lineno"> 5</span> <span class="c">        $(function(){    </span>
<span class="lineno"> 6</span> <span class="c">            $(&quot;#t1&quot;).hover(function(){alert(&#39;&#39;);});    </span>
<span class="lineno"> 7</span> <span class="c">            //$(&quot;iframe&quot;).contents().find(&quot;body&quot;).append(&quot;I&#39;m in an iframe!&quot;);     </span>
<span class="lineno"> 8</span> <span class="c">            //$(window.frames[&quot;iframe1&quot;].document).find(&quot;input[@type=&#39;text&#39;]&quot;).attr(&quot;size&quot;,&quot;30px&quot;);    </span>
<span class="lineno"> 9</span> <span class="c">            //$(&quot;#iframe1&quot;).contents().find(&quot;#d1&quot;).css(&#39;color&#39;,&#39;red&#39;);</span>
<span class="lineno">10</span> <span class="c">            //$(window.frames[&quot;iframe1&quot;].document).find(&quot;input[@name=&#39;t1&#39;]&quot;).css({background:&quot;#369&quot;});    </span>
<span class="lineno">11</span> <span class="c">            //$(&quot;#iframe1&quot;).src(&quot;test.html&quot;);</span>
<span class="lineno">12</span> <span class="c">        });// --&gt;</span>
<span class="lineno">13</span>     <span class="nt">&lt;/MCE:SCRIPT&gt;</span>
<span class="lineno">14</span> <span class="nt">&lt;/HEAD&gt;</span>
<span class="lineno">15</span> <span class="nt">&lt;DIV&gt;</span>
<span class="lineno">16</span> <span class="nt">&lt;INPUT</span> <span class="na">id=</span><span class="s">t1</span><span class="nt">&gt;</span>    
<span class="lineno">17</span> <span class="nt">&lt;IFRAME</span> <span class="na">id=</span><span class="s">iframe1</span> <span class="na">src=</span><span class="s">&quot;child.htm&quot;</span> <span class="na">mce_src=</span><span class="s">&quot;child.htm&quot;</span><span class="nt">&gt;&lt;/IFRAME&gt;</span>
<span class="lineno">18</span> <span class="nt">&lt;IFRAME</span> <span class="na">height=</span><span class="s">100</span> <span class="na">src=</span><span class="s">&quot;child.htm&quot;</span> <span class="na">width=</span><span class="s">300</span> <span class="na">mce_src=</span><span class="s">&quot;child.htm&quot;</span><span class="nt">&gt;&lt;/IFRAME&gt;</span>
<span class="lineno">19</span> <span class="nt">&lt;/DIV&gt;</span>
<span class="lineno">20</span> <span class="nt">&lt;DIV&gt;</span>
<span class="lineno">21</span> <span class="nt">&lt;/DIV&gt;</span></code></pre></div>

<h2>收集利用Jquery取得iframe中元素的几种方法</h2>

<p>显示 iframe 中 body 元素的内容:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;iframeId&#39;</span><span class="p">).</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">htm</span><span class="p">()</span>  
<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;iframeId&#39;</span><span class="p">).</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">htm</span><span class="p">()</span>
</code></pre></div>
<p>根据 iframename 取得其中 ID 为 &ldquo;testId&rdquo; 元素</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#testId&quot;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">frames</span><span class="p">(</span><span class="s2">&quot;iframename&quot;</span><span class="p">).</span><span class="nb">document</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>  
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#testId&quot;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">frames</span><span class="p">(</span><span class="s2">&quot;iframename&quot;</span><span class="p">).</span><span class="nb">document</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
<span class="c1">// OR</span>
<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframeName&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#testId&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>  
<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframeName&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#testId&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>
</code></pre></div>
<h2>收集网上的一些示例：</h2>

<h3>用 jQuery 在 IFRAME 里取得父窗口的某个元素的值</h3>

<p>只好用 DOM 方法与 jquery 方法结合的方式实现了</p>

<p>1.在父窗口中操作 选中 IFRAME 中的所有单选钮</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframe1&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input[@type=&#39;radio&#39;]&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span><span class="s2">&quot;true&quot;</span><span class="p">);</span>
</code></pre></div>
<p>2.在 IFRAME 中操作 选中父窗口中的所有单选钮</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input[@type=&#39;radio&#39;]&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span><span class="s2">&quot;true&quot;</span><span class="p">);</span>
</code></pre></div>
<p>iframe 框架的：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;test.html&quot;</span> <span class="na">id=</span><span class="s">&quot;iframe1&quot;</span> <span class="na">width=</span><span class="s">&quot;700&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">frameborder=</span><span class="s">&quot;0&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;auto&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div>
<p>IE7 中测试通过</p>

<h3>使用 jquery 操作 iframe</h3>

<p>1、 内容里有两个 iframe</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">&quot;leftiframe&quot;</span><span class="err">...</span><span class="nt">&gt;&lt;/iframe&gt;</span> 
<span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">&quot;mainiframe&quot;</span><span class="err">..</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div>
<p>leftiframe 中 jQuery 改变 mainiframe 的 src 代码：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mainframe&quot;</span><span class="p">,</span><span class="nx">parent</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">,</span><span class="s2">&quot;http://www.radys.cn&quot;</span><span class="p">)</span>
</code></pre></div>
<p>2、 如果内容里面有一个ID为 mainiframe 的 iframe</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">&quot;mainiframe&quot;</span><span class="err">...</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div>
<p>iframe 包含一个 someID</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;someID&quot;</span><span class="nt">&gt;</span>you want to get this content<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>得到 someID 的内容</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mainiframe&quot;</span><span class="p">).</span><span class="nx">contents</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;someID&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span> <span class="nx">html</span>
<span class="c1">//或者</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mainiframe&quot;</span><span class="p">).</span><span class="nx">contains</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;someID&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</code></pre></div>
<p>3、在父窗口中操作 选中 IFRAME 中的所有单选钮</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframe1&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;input[@type=&#39;radio&#39;]&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span><span class="s2">&quot;true&quot;</span><span class="p">);</span>
</code></pre></div>
<p>那选择 id 自然就是依然使用 find 方法</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;iframe1&quot;</span><span class="p">].</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;#id&quot;</span><span class="p">)</span>
</code></pre></div>
<p>4、 如上面所示，leftiframe 中的 jQuery 操作 mainiframe 的内容 someID 的内容 </p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mainframe&quot;</span><span class="p">,</span><span class="nx">parent</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">contents</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;someID&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">()</span>
<span class="c1">//或者</span>
<span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mainframe&quot;</span><span class="p">,</span><span class="nx">parent</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">contents</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;someID&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
</code></pre></div>
<h3>使用 JavaScript 操纵 iframe</h3>

<h4>框架间的互相引用</h4>

<p>一个页面中的所有框架以集合的形式作为 window 对象的属性提供，例如：window.frames 就表示该页面内所有框架的集合，这和表单对象、链接对象、图片对象等是类似的，不同的是，这些集合是 document 的属性。因此，要引用一个子框架，可以使用如下语法：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;frameName&quot;</span><span class="p">];</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">frameName</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
</code></pre></div>
<p>其中，window 字样也可以用 self 代替或省略，假设 frameName 为页面中第一个框架，则以下的写法是等价的：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">self</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;frameName&quot;</span><span class="p">]</span>
<span class="nx">self</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div>
<h4>frameName</h4>

<p>每个框架都对应一个 HTML 页面，所以这个框架也是 一个独立的浏览器窗口，它具有窗口的所有性质，所谓对框架的引用也就是对 window 对象的引用。有了这个 window 对象，就可以很方便地对其中的页面 进行操作，例如使用 window.document 对象向页面写入数据、使用 window.location 属性来改变框架内的页面等。</p>

<h3>下面分别介绍不同层次框架间的互相引用</h3>

<p>1．父框架到子框架的引用</p>

<p>知道了上述原理，从父框架引用子框架变的非常容易，即：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;frameName&quot;</span><span class="p">];</span>
</code></pre></div>
<p>这样就引用了页面内名为frameName的子框架。如果要引用子框架内的子框架，根据引用的框架实际就是window对象的性质，可以这样实现：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;frameName&quot;</span><span class="p">].</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;frameName2&quot;</span><span class="p">];</span>
</code></pre></div>
<p>这样就引用到了二级子框架，以此类推，可以实现多层框架的引用。</p>

<p>2．子框架到父框架的引用</p>

<p>每个window对象都有一个parent属性，表示它的父框架。如果该框架已经是顶层框架，则window.parent还表示该框架本身。</p>

<p>3．兄弟框架间的引用</p>

<p>如果两个框架同为一个框架的子框架，它们称为兄弟框架，可以通过父框架来实现互相引用，例如一个页面包括2个子框架：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;frameset</span> <span class="na">rows=</span><span class="s">&quot;50%,50%&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;frame</span> <span class="na">src=</span><span class="s">&quot;1.html&quot;</span> <span class="na">name=</span><span class="s">&quot;frame1&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;frame</span> <span class="na">src=</span><span class="s">&quot;2.html&quot;</span> <span class="na">name=</span><span class="s">&quot;frame2&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/frameset&gt;</span>
</code></pre></div>
<p>在frame1中可以使用如下语句来引用frame2：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">self</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;frame2&quot;</span><span class="p">];</span>
</code></pre></div>
<p>4．不同层次框架间的互相引用</p>

<p>框架的层次是针对顶层框架而言的。当层次不同时，只要知道自己所在的层次以及另一个框架所在的层次和名字，利用框架引用的window对象性质，可以很容易地实现互相访问，例如：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">self</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;childName&quot;</span><span class="p">].</span><span class="nx">frames</span><span class="p">[</span><span class="s2">&quot;targetFrameName&quot;</span><span class="p">];</span>
</code></pre></div>
<p>5．对顶层框架的引用</p>

<p>和parent属性类似，window对象还有一个top属性。它表示对顶层框架的引用，这可以用来判断一个框架自身是否为顶层框架，例如：</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">//判断本框架是否为顶层框架</span>
<span class="k">if</span><span class="p">(</span><span class="nx">self</span><span class="o">==</span><span class="nx">top</span><span class="p">){</span>
<span class="c1">//dosomething</span>
<span class="p">}</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Windows7 下从头开始安装部署 Octopress]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/11/23/install-and-deploy-octopress-to-github-on-windows7-from-scratch/"/>
    <updated>2014-11-23T09:14:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/11/23/install-and-deploy-octopress-to-github-on-windows7-from-scratch</id>
    <content type="html"><![CDATA[<h2>进入 Octopress 的世界</h2>

<h3>Octopress 简介</h3>

<ul>
<li><a href="http://octopress.org/">Octopress</a> 是一款基于 <a href="http://jekyllrb.com/">Jekyll</a> 的静态网站生成系统。

<ul>
<li>使用 Markdown 标记语言书写源文件，通过 Markdown 解析器转换为 HTML 文件</li>
<li>通过 Octopress 提供的站点模板提供所需的 Web 资产文件 （Javascript、CSS、image 等）</li>
<li>只包含静态网页，无需数据库支持，对系统要求低且迁移方便<br></li>
<li>以编写程序的方式编制网站，便于实现版本控制</li>
</ul></li>
<li><a href="http://octopress.org/">Octopress</a> / <a href="http://jekyllrb.com/">Jekyll</a> 使用简洁的 Ruby 框架实现。

<ul>
<li>Octopress 以 rake 任务的形式实现静态站点页面生成, 操作十分简单</li>
<li>Octopress 以 rake 任务的形式实现到普通网站和 <a href="http://github.com">Github</a> 的发布 </li>
<li>Octopress 与 Github 完美结合，你无需学习过多的 git 命令语法，使非专业人士的使用成为可能</li>
</ul></li>
</ul>

<!--more-->

<h3>在 Windows 7 下安装必要的工具</h3>

<ul>
<li>Octopress 在 Git 中维护，需要安装 Git

<ul>
<li>到 <a href="http://git-scm.com/downloads">msysgit</a> 查找下载最新版本（最好同时安装相应的基于Winows平台的 GUI 客户端工具，如：<a href="http://git-scm.com/downloads/guis"><strong>Git Extensions</strong></a>）</li>
<li>当前的最新版本 <strong>Git-1.9.5-preview20141217.exe</strong>，下载后直接安装</li>
</ul></li>
<li>Octopress/Jekyll 是 Ruby 应用程序，需要安装 Ruby 

<ul>
<li>到 <a href="https://www.ruby-lang.org/en/documentation/installation/#rubyinstaller">Installing Ruby</a> 查看 <strong>RubyInstaller</strong> 安装说明</li>
<li>要求安装 <a href="http://rubyinstaller.org/downloads/">Ruby 1.9.3</a> 或更高版本（实测 Win 7 下 <strong>ruby 2.0.0p598 (2014-11-13) [i386-mingw32]</strong> 和 Linux 下 <strong>ruby 2.2.0p0 (2014-12-25 revision 49005) [i686-linux]</strong> 可用）</li>
<li>安装后，确保 <code>C:\Ruby193\bin</code> 在 Windows 当前用户的 <code>PATH</code> 环境变量中<br></li>
</ul></li>
<li>Ruby 的模块工具 gem 在生成本地模块时可能需要用到编译环境

<ul>
<li>有两种选择：<a href="http://www.mingw.org/">MinGW and MSYS</a> 或 <a href="https://github.com/oneclick/rubyinstaller/wiki/development-kit">RubyInstaller DevKit</a></li>
<li>本文选择 RubyInstaller 推荐的 <a href="https://github.com/oneclick/rubyinstaller/wiki/development-kit">RubyInstaller DevKit</a></li>
<li>下载 <a href="https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe">RubyInstaller DevKit</a> （之所以要 DevKit 是因為在安裝 Octopress 時，所需要用到的 ruby gems 會需要在本地編譯，如：rdiscount）DevKit 的版本要对应 Ruby 的版本</li>
<li>安装需执行如下步骤：（development kit 是一套基於 MSYS/MinGW 下的 C/C++ 編譯環境工具組，安裝時跟著官網上的指示即可）

<ul>
<li>将 DevKit 自解压包释放到 C:\DevKit ，执行 <code>cd C:\DevKit</code></li>
<li>在 Windows CMD 窗口中执行  <code>ruby dk.rb init</code>  （產生 config.yaml，裡面有你的 ruby 路徑，一般會幫你設好）</li>
<li>在 Windows CMD 窗口中执行  <code>ruby dk.rb install</code></li>
</ul></li>
<li>保险起见，安装之后先更新一下 gem 是个好习惯：<code>gem update --system</code>、 <code>gem update</code></li>
</ul></li>
<li>Jekyll/Octopress 使用 Python 编写的代码加亮系统 <a href="http://pygments.org/">Pygments</a>，需要安装 Python 2.x

<ul>
<li>直接在 <a href="https://www.python.org/downloads/">Python.org</a> 下载安装 Python 2.7.9，确保 <strong>“Add python.exe to Path”</strong></li>
<li>或者到 <a href="http://www.activestate.com/activepython">ActiveState</a> 下载最新的 ActivePython-2.7 版 (<del><em>执行</em>  <code>easy_install pygments</code></del>  <strong>Obsoleted</strong>)</li>
</ul></li>
</ul>

<!-- 到 [RailsInstaller](http://rubyforge.org/frs/?group_id=167) 查找下载最新版本 -->

<h3>软件安装后的 Windows 7 环境说明和配置</h3>

<ul>
<li>两种命令行环境

<ul>
<li>Windows 7 自己的 CMD 窗口，用于输入 DOS 类命令</li>
<li>MINGW/Git Bash 窗口启动了 Bash，可以输入类 Linux 命令</li>
</ul></li>
<li>环境变量 (<strong>可选</strong>，Git 本身自带 Bash，安装过程会自行设置，MINGW 非必要工具)

<ul>
<li>在 Windows 的 “高级系统设置” 中设置的 环境变量 可以被 MINGW 窗口<strong>继承</strong></li>
<li>为避免中文乱码，设置 <code>LANG</code> 和 <code>LC_ALL</code> 两个环境变量，其值均为 <code>zh_CN.UTF-8</code></li>
<li>在 CMD 窗口中测试： <code>echo %LANG%   %LC_ALL%</code> </li>
<li>在 MINGW 窗口中测试： <code>echo $LANG   $LC_ALL</code></li>
<li>MINGW/Git Bash 窗口启动了 Bash，可以使用 <code>~/.bash_profile</code> 环境设置文件设置环境变量、命令别名等 </li>
<li><code>$ echo &quot;export LANG LC_ALL&quot; &gt; ~/.bash_profile</code></li>
<li><code>$ echo &quot;alias ll=&#39;ls -l --color=tty&#39;&quot;  &gt;&gt; ~/.bash_profile</code></li>
<li><code>$ echo &quot;alias ls=&#39;ls --color=tty&#39;&quot;     &gt;&gt; ~/.bash_profile</code></li>
<li><strong>注意：若希望<code>~/.bash_profile</code>中的设置生效，请启动 MINGW/Git Bash 窗口，而不是Windows 的 CMD窗口</strong></li>
</ul></li>
</ul>

<h3>ruby 环境的初始配置</h3>

<ul>
<li>设置 gem 的更新源

<ul>
<li><code>gem sources --remove http://rubygems.org/</code></li>
<li><code>gem sources -a http://ruby.taobao.org/</code></li>
<li><code>gem sources -l # 请确保只有 http://ruby.taobao.org 一行输出</code></li>
</ul></li>
<li>安装 bundler

<ul>
<li><code>gem install bundler</code></li>
</ul></li>
</ul>

<h3>安装 Octopress</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># 1. 进入 Bash 环境，克隆 Octopress 到本地代码仓库</span>
<span class="nv">$ </span>mkdir ~/repos
<span class="nv">$ </span><span class="nb">cd</span> ~/repos
<span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
<span class="nv">$ </span><span class="nb">cd</span> ~/repos/octopress
<span class="c"># 2. 修改 Octopress 的 GEM 源</span>
<span class="nv">$ </span>vim Gemfile    <span class="c"># 或 notepad Gemfile</span>
将行 ： <span class="nb">source</span> <span class="s2">&quot;http://rubygems.org/&quot;</span>
改为 ： <span class="nb">source</span> <span class="s2">&quot;http://ruby.taobao.org/&quot;</span>
<span class="c"># 3. 安装 Octopress 所需的 GEM 组件 (Gemfile)</span>
<span class="nv">$ </span>bundle install
</code></pre></div>
<h3>生成 Octopress 默认模版文件</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rake install  <span class="c"># 或者 &quot;rake install[classic]&quot;  安裝預設的 Octopress 樣式</span>
rake aborted!
You have already activated rake 0.9.2.2, but your Gemfile requires rake 0.9.2. 
Using bundle <span class="nb">exec </span>may solve this.

<span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</code></pre></div>
<h4>解决方法</h4>

<ol>
<li><code>$ bundle update; rake install</code></li>
<li>调整 rake

<ul>
<li>在 Windows 的 CMD 窗口里：修改 rake.bat 文件</li>
<li>在 Git Bash 里：设置别名</li>
</ul></li>
</ol>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;alias rake=&#39;bundle exec rake&#39;&quot;</span> &gt;&gt; ~/.bash_profile
<span class="nv">$ </span>. ~/.bash_profile
<span class="nv">$ </span><span class="nb">alias</span>
<span class="nb">alias </span><span class="nv">rake</span><span class="o">=</span><span class="s1">&#39;bundle exec rake&#39;</span>
<span class="nv">$ </span>rake install
</code></pre></div>
<h3>Git 和 GitHub</h3>

<ul>
<li>学习 Git 参考

<ul>
<li><a href="http://zh-cn.whygitisbetterthanx.com/">为啥 Git 最棒</a></li>
<li><a href="http://rogerdudler.github.com/git-guide/index.zh.html">git - 简易指南</a></li>
<li><a href="http://www-cs-students.stanford.edu/%7Eblynn/gitmagic/intl/zh_cn/">git 魔法</a> &ndash; <a href="https://github.com/blynn/gitmagic">git</a></li>
<li><a href="http://www.kuqin.com/managetool/20110705/92113.html">10篇写给Git初学者的最佳教程</a></li>
</ul></li>
<li>学习 GitHub 参考

<ul>
<li><a href="http://www.yangzhiping.com/tech/github.html">如何高效利用GitHub</a></li>
<li><a href="http://www.worldhello.net/gotgithub/">GotGitHub</a></li>
<li><a href="http://help.github.com/">The GitHub Hep</a></li>
</ul></li>
</ul>

<h3>设置本地仓库和远程仓库的关联</h3>

<p><strong>创建 GitHub 账号和仓库</strong></p>

<ul>
<li>假定您注册了 <code>&lt;USERNAME&gt;</code> 的账号</li>
<li>下面的操作假定您创建了 <code>octopress</code> 的仓库，部署为 <strong>GitHub Project Pages</strong>

<ul>
<li>在本地版本库中设置远程版本库的别名<br>

<ul>
<li><code>$ git remote add myblog git@github.com:alfred/octopress.git</code></li>
</ul></li>
</ul></li>
<li>下面的操作假定您创建了 <code>&lt;USERNAME&gt;.github.io</code> 的仓库，部署为 <strong>GitHub User Pages</strong>

<ul>
<li>本例使用 alfred.github.io，请用 <code>&lt;USERNAME&gt;.github.io</code> 替换之 </li>
<li>在本地版本库中设置远程版本库的别名<br>

<ul>
<li><code>$ git remote add myblog git@github.com:alfred/alfred.github.io.git</code></li>
</ul></li>
</ul></li>
</ul>

<h2>配置和使用 Octopress</h2>

<h3>Octopress 的基本配置</h3>

<ul>
<li>编辑 _config.yml 文件 ，根据您自己的需要修改其值，<a href="http://octopress.org/docs/configuring/">参考</a></li>
<li><strong>若文件中包括中文，则存成 UTF-8 编码格式</strong> </li>
</ul>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># ----------------------- #</span>
<span class="c1">#      Main Configs       #</span>
<span class="c1"># ----------------------- #</span>
<span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                <span class="c1"># For rewriting urls for RSS, etc</span>
<span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>              <span class="c1"># Used in the header and title tags</span>
<span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span>           <span class="c1"># A description used in the header</span>
<span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span>             <span class="c1"># Your name, for RSS, Copyright, Metadata</span>
<span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span>      <span class="c1"># Search engine for simple site search</span>
<span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>        <span class="c1"># A default meta description for your site</span>
<span class="l-Scalar-Plain">subscribe_rss</span><span class="p-Indicator">:</span>      <span class="c1"># Url for your blog&#39;s feed, defauts to /atom.xml</span>
<span class="l-Scalar-Plain">subscribe_email</span><span class="p-Indicator">:</span>    <span class="c1"># Url to subscribe by email (service required)</span>
<span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>              <span class="c1"># Email address for the RSS feed if you want it.</span>
</code></pre></div>
<h3>编辑新页面</h3>

<ul>
<li>生成 Blog/静态 页面<br>

<ul>
<li><code>rake new_post[&quot;article name&quot;]</code> : 生成指定的 Blog Post 初始页面</li>
<li><code>rake new_page[&quot;page name&quot;]</code> : 生成指定的静态初始页面</li>
</ul></li>
<li>使用你惯用的编辑器修改新生成的文件

<ul>
<li>使用 YAML 语法设置本页面属性，用 Markdown 语法书写文章内容</li>
<li><strong>若文件中包括中文，则存成 UTF-8 编码格式</strong></li>
<li><a href="/blog/2015/01/10/markdown-syntax-documentation/"><strong>讲解 Markdown</strong></a></li>
<li><a href="http://alfred-sun.github.io/markdown-syntax-zhtw/">Markdown 语法说明</a></li>
<li><a href="http://daringfireball.net/projects/markdown/dingus">Markdown: Dingus</a> 是一个在线转换工具</li>
<li>若使用 kramdown 解析器，参考 <a href="http://kramdown.rubyforge.org/syntax.html">kramdown 语法</a> </li>
<li><a href="http://johnmacfarlane.net/pandoc/try">Markdown 和多种标记语言的在线转换</a></li>
<li><a href="http://babelmark.bobtfish.net/">Markdown 多种实现的在线比较</a></li>
</ul></li>
<li><p><strong>不能在 ZSH 中输入命令的问题</strong><br>
Octopress 提供了许多 Rake 任务，可以方便地完成一些操作。<br>
常用的命令是 <code>rake new_post[&quot;title&quot;]</code>，但是在 ZSH 下，输入这样的命令，会提示错误：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">zsh: no matches found: new_post[...]
</code></pre></div>
<p>原因是诸如 <code>[]</code> 之类的不是正确的命令字符。当然，我们也可以使用转义符来解决这一问题。但每次都需要敲入转义符，实在是太麻烦了。<br>
解决方案是命令改成 <code>rake &#39;new_post[title]&#39;</code>，或者在 <code>~/.zshrc</code> 文件下，加这一行内容：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">alias </span><span class="nv">rake</span><span class="o">=</span><span class="s2">&quot;noglob rake&quot;</span>    <span class="c"># 停止 wildcard 功能</span>
</code></pre></div></li>
</ul>

<h3>首次提交到 GitHub</h3>

<ol>
<li><code>rake setup_github_pages</code> ：配置 Octopress 与 GitHub 的连接，<a href="http://octopress.org/docs/deploying/github/">参考</a></li>
<li><code>rake generate</code> ：生成静态文件</li>
<li><code>rake watch</code> ：监听 source 和 sass 目录中源文件的变动并重新生成</li>
<li><code>rake preview</code> ：监听并在本机 4000端口生成访问内容 <a href="http://localhost:4000">http://localhost:4000</a></li>
<li><code>rake deploy</code> ：发布生成的网站文件到 GitHub（不建议该方式；由于 Octopress 只发布生成的文件，建议将生成静态文件操作和 Git 操作分离 <a href="http://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy" title="Make each program do one thing well">&ldquo;Unix 哲学&rdquo;</a>）</li>
</ol>

<h3>使用 rake 任务管理 Blog</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>rake -T
rake clean                     <span class="c"># Clean out caches: .pygments-cache, .gist-c...</span>
rake copydot<span class="o">[</span><span class="nb">source</span>,dest<span class="o">]</span>      <span class="c"># copy dot files for deployment</span>
rake deploy                    <span class="c"># Default deploy task</span>
rake gen_deploy                <span class="c"># Generate website and deploy</span>
rake generate                  <span class="c"># Generate jekyll site</span>
rake install<span class="o">[</span>theme<span class="o">]</span>            <span class="c"># Initial setup for Octopress: copies the de...</span>
rake integrate                 <span class="c"># Move all stashed posts back into the posts...</span>
rake isolate<span class="o">[</span>filename<span class="o">]</span>         <span class="c"># Move all other posts than the one currentl...</span>
rake list                      <span class="c"># list tasks</span>
rake new_page<span class="o">[</span>filename<span class="o">]</span>        <span class="c"># Create a new page in source/(filename)/ind...</span>
rake new_post<span class="o">[</span>title<span class="o">]</span>           <span class="c"># Begin a new post in source/_posts</span>
rake preview                   <span class="c"># preview the site in a web browser</span>
rake push                      <span class="c"># deploy public directory to github pages</span>
rake rsync                     <span class="c"># Deploy website via rsync</span>
rake set_root_dir<span class="o">[</span>dir<span class="o">]</span>         <span class="c"># Update configurations to support publishin...</span>
rake setup_github_pages<span class="o">[</span>repo<span class="o">]</span>  <span class="c"># Set up _deploy folder and deploy branch fo...</span>
rake update_source<span class="o">[</span>theme<span class="o">]</span>      <span class="c"># Move source to source.old, install source ...</span>
rake update_style<span class="o">[</span>theme<span class="o">]</span>       <span class="c"># Move sass to sass.old, install sass theme ...</span>
rake watch                     <span class="c"># Watch the site and regenerate when it changes</span>
</code></pre></div>
<h3>更新远程管理源码的仓库分支</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git add .
git commit -m <span class="s2">&quot;your message&quot;</span>
git push myblog <span class="nb">source</span>
</code></pre></div>
<h3>进一步配置 Octopress</h3>

<ul>
<li>配置 社会化网络 应用</li>
<li>选择您中意的网站注册，获得用户名或网络代码，将代码存入 <code>source/_includes/{post,custom}</code> 目录<br></li>
</ul>

<table><thead>
<tr>
<th>类型</th>
<th>国外服务</th>
<th>国内服务</th>
</tr>
</thead><tbody>
<tr>
<td>Feed 烧制</td>
<td><a href="http://feedburner.google.com">FeedBurner</a></td>
<td><a href="http://www.feedsky.com/">FeedSky</a></td>
</tr>
<tr>
<td>分享到</td>
<td><a href="http://www.addthis.com/">AddThis</a></td>
<td><a href="http://www.jiathis.com/">JiaThis</a>， <a href="http://share.baidu.com/">百度分享</a></td>
</tr>
<tr>
<td>微博</td>
<td>Twitter</td>
<td>weibo.com</td>
</tr>
<tr>
<td>网络书签</td>
<td><a href="http://delicious.com/">Delicious</a>， <a href="http://www.google.com/bookmarks">Google Bookmarks</a></td>
<td><a href="http://shuqian.qq.com/">QQ书签</a>， <a href="http://cang.baidu.com/">百度搜藏</a></td>
</tr>
<tr>
<td>网络图床</td>
<td><a href="http://www.flickr.com/">Flickr</a>， <a href="http://imgur.com/">Imgur</a></td>
<td><a href="http://www.yupoo.com/">yupoo</a>， <a href="http://www.poco.cn/">POCO</a></td>
</tr>
<tr>
<td>网络评论</td>
<td><a href="http://disqus.com/">Disqus</a></td>
<td><a href="http://uyan.cc/">友言</a>， <a href="http://duoshuo.com/">多说</a></td>
</tr>
<tr>
<td>数据统计</td>
<td><a href="http://www.google.com/analytics/">Google Analytics</a></td>
<td><a href="http://tongji.baidu.com/web/welcome/login">百度统计</a>， <a href="http://www.cnzz.com/">CNZZ</a></td>
</tr>
</tbody></table>

<h3>配置举例1：为每一篇Blog结尾添加 “JiaThis”</h3>

<p>1、在 <code>_config.yml</code> 尾部添加如下行</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># JiaThis</span>
<span class="l-Scalar-Plain">jiathis</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</code></pre></div>
<p>2、在 <code>source/_includes/post/sharing.html</code> 尾部的 <code>&lt;/div&gt;</code> 之前添加如下行</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{% if site.jiathis %}
  {% include post/jiathis.html %}
{% endif %}   
</code></pre></div>
<p>3、创建 <code>source/_includes/post/jiathis.html</code> 文件，将从 <a href="http://www.jiathis.com/">JiaThis</a> 获得的代码放入其中</p>

<h3>配置举例2： 配置侧栏</h3>

<ul>
<li>在 <code>_config.yml</code> 中指定显示内容和显示顺序</li>
<li>显示内容

<ul>
<li>系统默认的显示边栏的内容基于 source/_includes 目录保存为 <code>asides/*.html</code></li>
<li>用户自定义的边栏内容基于 source/_includes 目录保存为 <code>custom/asides/*.html</code></li>
</ul></li>
<li>显示顺序

<ul>
<li><code>blog_index_asides</code> 控制Blog主页的边栏显示</li>
<li><code>post_asides</code> 控制每一个单独的Blog页面显示时的边栏（对应 <code>rake new_post[]</code>）</li>
<li><code>page_asides</code> 控制静态页面显示时的边栏（对应 <code>rake new_page[]</code>）</li>
</ul></li>
</ul>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">blog_index_asides</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/feeds.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/recent_posts.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/recent_comments.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/opers.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/github.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/twitter.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/delicious.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/pinboard.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/googleplus.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/weibo.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/copyleft.html</span>

<span class="l-Scalar-Plain">post_asides</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/recent_posts.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/recent_comments.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/opers.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/copyleft.html</span>

<span class="l-Scalar-Plain">page_asides</span><span class="p-Indicator">:</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">asides/recent_posts.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/recent_comments.html</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">custom/asides/copyleft.html</span>
</code></pre></div>
<h3>一些 Octopress 资源</h3>

<ul>
<li>使用 Octopress 的 Sites 示例<br>
<a href="https://github.com/imathis/octopress/wiki/Octopress-Sites">https://github.com/imathis/octopress/wiki/Octopress-Sites</a></li>
<li>第三方主题模板<br>
<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></li>
</ul>

<h2>更新本地 Octopress</h2>

<h3>如何更新</h3>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git pull octopress master     <span class="c"># Get the latest Octopress</span>
bundle install                <span class="c"># Keep gems updated</span>
rake update_source            <span class="c"># update the template&#39;s source</span>
rake update_style             <span class="c"># update the template&#39;s style</span>
</code></pre></div>
<p>更新 Octopress 的 插件、模板主题、gemfiles、rakefile 和 配置文件，保留用户的文件改动，<a href="http://octopress.org/docs/updating/">参考</a>。</p>

<p><code>rake update</code> ： 更新模板的 <code>/source</code> 和 <code>/sass</code> 目录，等同于一起执行 <code>update_style</code> 和 <code>update_source</code>。</p>

<h3>更新模板的 Style 文件</h3>

<p>用 pull 的新代码，更新本地仓库的 <code>/sass</code> 目录：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">rake update_style
</code></pre></div>
<ol>
<li>移动 <code>/sass</code> 到 <code>/sass.old</code></li>
<li>复制 <code>.themes/classic/sass</code> 到 <code>/sass</code></li>
<li>用 <code>/sass.old/custom</code> 替换 <code>/sass/custom</code></li>
</ol>

<h3>更新模板的 Source 目录</h3>

<p>用 pull 的新代码，更新本地仓库的 <code>/source</code> 目录：</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">rake update_source
</code></pre></div>
<ol>
<li>移动 <code>/source</code> 到 <code>/source.old</code></li>
<li>复制 <code>.themes/classic/source</code> 到 <code>/source</code></li>
<li>Copy back everything in <code>/source.old</code> (<code>cp -rn</code> - without replacing)</li>
<li>用 <code>/source.old/_includes/custom/</code> 替换 <code>/source/_includes/custom/</code></li>
</ol>

<p>这样，那些新加的文件（如：<code>_posts</code>、<code>about.html</code> 等），还有用户在 <code>source/_includes/custom</code> 定制的文件，都能保留下来。</p>

<h2>参考链接
<ul>
<li><a href="http://agiledon.github.io/blog/2012/12/25/octopress-issues-solution-and-tips/">http://agiledon.github.io/blog/2012/12/25/octopress-issues-solution-and-tips/</a></li>
<li><a href="http://tonytonyjan.net/2012/03/01/install-octopress-on-windows/">http://tonytonyjan.net/2012/03/01/install-octopress-on-windows/</a></li>
<li><a href="http://chen.yanping.me/cn/blog/2011/12/26/octopress-on-windows/">http://chen.yanping.me/cn/blog/2011/12/26/octopress-on-windows/</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></li>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">http://www.yangzhiping.com/tech/octopress.html</a></li>
<li><a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Push 避免用户名和密码方法]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/11/23/disable-login-each-git-push/"/>
    <updated>2014-11-23T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/11/23/disable-login-each-git-push</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<blockquote>
<p>在大家使用 github 过程中，一定会碰到这样一种情况，就是每次要 push 和 pull 时总是要输入 github 的账号和密码，这样不仅浪费了大量的时间且降低了工作效率。在此背景下，本文在网上找了两种方法来避免这种状况，这些成果也是先人提出来的，在此只是做个总结。</p>
</blockquote>

<h2>1.方法一</h2>

<h3>1.1 创建文件存储 GIT 用户名和密码</h3>

<!--more-->

<p>在%HOME%目录中，一般为C:\users\Administrator，也可以是你自己创建的系统用户名目录，反正都在C:\users\中。文件名为.git-credentials,由于在Window中不允许直接创建以&quot;.&ldquo;开头的文件，所以需要借助git bash进行，打开git bash客户端，进行%HOME%目录，然后用touch创建文件 .git-credentials, 用vim编辑此文件:</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">touch .git-credentials
vim .git-credentials
</code></pre></div>
<p>输入内容格式：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">https://<span class="o">{</span>username<span class="o">}</span>:<span class="o">{</span>password<span class="o">}</span>@github.com
</code></pre></div>
<h3>1.2 添加Git Config 内容</h3>

<p>进入git bash终端， 输入如下命令：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">git config --global credential.helper store
</code></pre></div>
<p>执行完后查看%HOME%目录下的.gitconfig文件，会多了一项：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="o">[</span>credential<span class="o">]</span>

    <span class="nv">helper</span> <span class="o">=</span> store
</code></pre></div>
<p>重新开启git bash会发现git push时不用再输入用户名和密码</p>

<h2>2.方法二</h2>

<h3>2.1 添加环境变量</h3>

<p>在windows中添加一个HOME环境变量，变量名:HOME,变量值：%USERPROFILE%
<img src="/media/pictures/github_env.jpg" /></p>

<h3>2.2 创建git用户名和密码存储文件</h3>

<p>进入%HOME%目录，新建一个名为&rdquo;_netrc&quot;的文件，文件中内容格式如下：</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">machine <span class="o">{</span>git account name<span class="o">}</span>.github.com
login your-usernmae
password your-password
</code></pre></div>
<p>重新打开git bash即可，无需再输入用户名和密码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html中的&lt;ul&gt;标签中&lt;li&gt;横向排列]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/11/02/make-css-menu/"/>
    <updated>2014-11-02T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/11/02/make-css-menu</id>
    <content type="html"><![CDATA[<p>2011-07-22 20:10  html css float class  文档浏览器</p>

<h2>编写横向菜单的HTML代码架构</h2>

<p>请将以下代码添加到HTML文档的导航栏区域中。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>
 <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.baidu.com&quot;</span><span class="nt">&gt;</span>Baidu.Com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
 <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.Code52.Net&quot;</span><span class="nt">&gt;</span>Code52.Net<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
 <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.yahoo.com&quot;</span><span class="nt">&gt;</span>Yahoo.Com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
 <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com&quot;</span> <span class="na">class=</span><span class="s">&quot;last&quot;</span><span class="nt">&gt;</span>Google.Com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div>
<!--more-->

<h2>编写CSS代码</h2>

<h3>1、设置公共样式</h3>

<p>请将以下CSS代码添加到HTML文档的<head>&hellip;</head>标签范围中。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="p">{</span> 
<span class="k">font</span><span class="o">:</span><span class="m">12px</span> <span class="n">verdana</span><span class="o">,</span> <span class="n">arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span> <span class="c">/* 设置文字大小和字体样式 */</span>
<span class="p">}</span>
<span class="nf">#menu</span><span class="o">,</span> <span class="nf">#menu</span> <span class="nt">li</span> <span class="p">{</span>
<span class="k">list-style</span><span class="o">:</span><span class="k">none</span><span class="p">;</span> <span class="c">/* 将默认的列表符号去掉 */</span>
<span class="k">padding</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="c">/* 将默认的内边距去掉 */</span>
<span class="k">margin</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="c">/* 将默认的外边距去掉 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>
<p>大家都知道，<code>&lt;ul&gt;</code>中的各条目<code>&lt;li&gt;</code>，默认都是纵向排列的，我们需要定义CSS来让其横向排列起来。</p>

<p>Tips：因为我们现在将导航栏拉出来独立讲解，所以需要设置一些公共样式，如果您在 body 或其他地方已经重设了默认效果，以上代码可以去掉</p>

<h3>2、让文字横排</h3>

<p>大家都知道，<code>&lt;ul&gt;</code>标签下的项目<code>&lt;li&gt;</code>默认是纵向排列的，我们需要定义额外的CSS属性让其横向排列。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="p">{</span> 
<span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span> <span class="c">/* 往左浮动 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>
<h3>3、设置链接样式</h3>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
<span class="k">display</span><span class="o">:</span><span class="k">block</span><span class="p">;</span> <span class="c">/* 将链接设为块级元素 */</span>
<span class="k">padding</span><span class="o">:</span><span class="m">8px</span> <span class="m">50px</span><span class="p">;</span> <span class="c">/* 设置内边距 */</span>
<span class="k">background</span><span class="o">:</span><span class="m">#3A4953</span><span class="p">;</span> <span class="c">/* 设置背景色 */</span>
<span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span> <span class="c">/* 设置文字颜色 */</span>
<span class="k">text-decoration</span><span class="o">:</span><span class="k">none</span><span class="p">;</span> <span class="c">/* 去掉下划线 */</span>
<span class="k">border-right</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#000</span><span class="p">;</span> <span class="c">/* 在左侧加上分隔线 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>
<p>我们用内边距（即填充padding）的方式，让每个菜单变得宽一些，如果你的菜单是中英文混排的，建议设置单个菜单的高宽，这样可以避免中英文字符行高不一致导致的高度误差。设置固定高度的方式：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
<span class="k">display</span><span class="o">:</span><span class="k">block</span><span class="p">;</span> <span class="c">/* 将链接设为块级元素 */</span>
<span class="k">width</span><span class="o">:</span><span class="m">150px</span><span class="p">;</span> <span class="c">/* 设置宽度 */</span>
<span class="k">height</span><span class="o">:</span><span class="m">30px</span><span class="p">;</span> <span class="c">/* 设置高度 */</span>
<span class="k">line-height</span><span class="o">:</span><span class="m">30px</span><span class="p">;</span> <span class="c">/* 设置行高，将行高和高度设置同一个值，可以让单行文本垂直居中 */</span>
<span class="k">text-align</span><span class="o">:</span><span class="k">center</span><span class="p">;</span> <span class="c">/* 居中对齐文字 */</span>
<span class="k">background</span><span class="o">:</span><span class="m">#3A4953</span><span class="p">;</span> <span class="c">/* 设置背景色 */</span>
<span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span> <span class="c">/* 设置文字颜色 */</span>
<span class="k">text-decoration</span><span class="o">:</span><span class="k">none</span><span class="p">;</span> <span class="c">/* 去掉下划线 */</span>
<span class="k">border-right</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#000</span><span class="p">;</span> <span class="c">/* 在左侧加上分隔线 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>
<h3>4、链接悬停效果</h3>

<p>通过以上几步的综合作用，一个横向导航栏的初步框架就出现了。此步主要是定义链接的悬停效果，让导航栏更美观。当然，如果要让导航栏更炫丽，你可以在CSS悬停属性上定义背景图片。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
<span class="k">background</span><span class="o">:</span><span class="m">#146C9C</span><span class="p">;</span> <span class="c">/* 变换背景色 */</span>
<span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span> <span class="c">/* 变换文字颜色 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>
<p>这里的代码一个缺陷，最右边会多出来一个边框，由于 :first-child 伪类不被IE系列浏览器所支持，我们只能单独写一个样式，将最后一个边框去掉，同时要给 HTML 代码增加一个额外选择符。</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.baidu.com&quot;</span><span class="nt">&gt;</span>Baidu.Com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.Code52.Net&quot;</span><span class="nt">&gt;</span>Code52.Net<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.yahoo.com&quot;</span><span class="nt">&gt;</span>Yahoo.com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com&quot;</span> <span class="na">class=</span><span class="s">&quot;last&quot;</span><span class="nt">&gt;</span>Google.com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>

<span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span><span class="nc">.last</span> <span class="p">{</span>
<span class="k">border-right</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="c">/* 去掉左侧边框 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>
<p>好了，到这里一个简单的横向导航菜单就制作完成了，是不是很简单？ 下面给出完整代码：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="p">{</span> 
 <span class="k">font</span><span class="o">:</span><span class="m">12px</span> <span class="n">verdana</span><span class="o">,</span> <span class="n">arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span> 
<span class="p">}</span>
<span class="nf">#menu</span><span class="o">,</span> <span class="nf">#menu</span> <span class="nt">li</span> <span class="p">{</span>
 <span class="k">list-style</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
 <span class="k">padding</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
 <span class="k">margin</span><span class="o">:</span><span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="p">{</span> 
 <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span> 
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
 <span class="k">display</span><span class="o">:</span><span class="k">block</span><span class="p">;</span>
 <span class="c">/* 如果是中英文混排的文字，建议用固定宽度</span>
<span class="c"> width:150px;</span>
<span class="c"> height:30px;</span>
<span class="c"> line-height:30px;</span>
<span class="c"> text-align:center;</span>
<span class="c"> */</span>
 <span class="k">padding</span><span class="o">:</span><span class="m">8px</span> <span class="m">50px</span><span class="p">;</span>
 <span class="k">background</span><span class="o">:</span><span class="m">#3A4953</span><span class="p">;</span>
 <span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span>
 <span class="k">text-decoration</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
 <span class="k">border-right</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
 <span class="k">background</span><span class="o">:</span><span class="m">#146C9C</span><span class="p">;</span>
 <span class="k">color</span><span class="o">:</span><span class="m">#fff</span><span class="p">;</span>
 <span class="k">text-decoration</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
 <span class="k">border-right</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span><span class="nc">.last</span> <span class="p">{</span>
 <span class="k">border-right</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="c">/* 去掉左侧边框 */</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.baidu.com&quot;</span><span class="nt">&gt;</span>Baidu.Com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.Code52.Net&quot;</span><span class="nt">&gt;</span>Code52.Net<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.yahoo.com&quot;</span><span class="nt">&gt;</span>Yahoo.com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.google.com&quot;</span> <span class="na">class=</span><span class="s">&quot;last&quot;</span><span class="nt">&gt;</span>Google.com<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</code></pre></div>
<p>现在，你可以自己动手在 Html 文件里面测试一下效果。</p>

<p>上面的CSS样式，我修改了一下。如下：</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
<span class="nf">#menu</span> <span class="p">{</span>
<span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
<span class="k">font-weight</span><span class="o">:</span> <span class="k">bolder</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span><span class="p">{</span>
<span class="k">list-style-image</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="k">background-color</span><span class="o">:</span> <span class="m">#999999</span><span class="p">;</span>
<span class="k">border-right</span><span class="o">-</span><span class="k">width</span><span class="o">:</span> <span class="m">1px</span><span class="p">;</span>
<span class="k">border-right</span><span class="o">-</span><span class="n">style</span><span class="o">:</span> <span class="k">solid</span><span class="p">;</span>
<span class="k">border-right</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
<span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span><span class="p">{</span>
<span class="k">color</span><span class="o">:</span> <span class="m">#FFFFFF</span><span class="p">;</span>
<span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
<span class="k">margin</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="k">padding-top</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
<span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span> <span class="c">/* 作为一个块 */</span>
<span class="k">padding-right</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span> <span class="c">/* 设置块的属性 */</span>
<span class="k">padding-bottom</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
<span class="k">padding-left</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#menu</span> <span class="nt">li</span> <span class="nt">a</span><span class="nd">:hover</span><span class="p">{</span>
<span class="k">background-color</span><span class="o">:</span> <span class="m">#0099CC</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单点登录 SSO 的实现原理]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/10/31/Single-Sign-On/"/>
    <updated>2014-10-31T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/10/31/Single-Sign-On</id>
    <content type="html"><![CDATA[<p><strong>单点登录 SSO</strong>（Single Sign On）说得简单点就是在一个<strong>多系统共存的环境下，用户在一处登录后，就不用在其他系统中登录</strong>，也就是用户的一次登录能得到其他所有系统的信任。</p>

<p>单点登录在大型网站里使用得非常频繁，例如像阿里巴巴这样的网站，在网站的背后是成百上千的子系统，用户一次操作或交易可能涉及到几十个子系统的协作，如果每个子系统都需要用户认证，不仅用户会疯掉，各子系统也会为这种重复认证授权的逻辑搞疯掉。</p>

<p>实现单点登录说到底就是要解决如何产生和存储那个信任，再就是其他系统如何验证这个信任的有效性，因此要点也就以下几个：</p>

<!--more-->

<ul>
<li>存储信任</li>
<li>验证信任</li>
</ul>

<p>只要解决了以上的问题，达到了开头讲得效果就可以说是 SSO。</p>

<h2>客户端实现</h2>

<p>最简单实现 SSO 的方法就是用 Cookie，实现流程如下所示：</p>

<p><img src="/media/pictures/Single-Sign-On/sso.gif" alt="Storage of trust on Client" /></p>

<p>不难发现以上的方案是把信任存储在客户端的 <strong>Cookie</strong> 里，这种方法虽然实现方便但立马会让人质疑两个问题：</p>

<ul>
<li><strong>Cookie 不安全</strong><br></li>
<li><strong>不能跨域免登</strong><br></li>
</ul>

<p>对于第一个问题一般都是通过<strong>加密 Cookie</strong> 来处理；<br>
第二个问题是硬伤，其实这种方案的思路的就是要把这个信任关系存储在客户端，要实现这个也不一定只能用 Cookie，用 flash 也能解决，flash 的 <strong>Shared Object API</strong> 就提供了存储能力。</p>

<h2>服务端实现</h2>

<p>一般说来，大型系统会采取在服务端存储信任关系的做法，实现流程如下所示：</p>

<p><img src="/media/pictures/Single-Sign-On/sso_.gif" alt="Storage of trust on Server" /></p>

<p>以上方案就是要把信任关系存储在<strong>单独的 SSO 系统</strong>（暂且这么称呼它）里，说起来只是简单地从客户端移到了服务端，但其中几个问题需要重点解决：</p>

<ol>
<li>如何高效存储大量临时性的信任数据？<br></li>
<li>如何防止信息传递过程被篡改？<br></li>
<li>如何让 SSO 系统信任登录系统和免登系统？<br></li>
</ol>

<p>对于第一个问题，一般可以采用类似与 memcached 的<strong>分布式缓存</strong>的方案，既能提供可扩展数据量的机制，也能提供高效访问。<br>
对于第二个问题，一般采取<strong>数字签名</strong>的方法，要么通过数字证书签名，要么通过像 md5 的方式，这就需要 SSO 系统返回免登 URL 的时候对需验证的参数进行 md5 加密，并带上 token 一起返回，最后需免登的系统进行<strong>验证信任关系</strong>的时候，需把这个 token 传给 SSO 系统，SSO 系统通过对 token 的验证就可以辨别信息是否被改过。<br>
对于最后一个问题，可以通过<strong>白名单</strong>来处理，说简单点只有在白名单上的系统才能请求生产信任关系，同理只有在白名单上的系统才能被免登录。</p>

<h2>结束语</h2>

<p>以上只是提供了些简单的实现技术，但需要强调的是这只是技术实现而已，仅仅是为了解决上面谈到的一些问题，SSO 本身来说并不是什么高科技，有了这个认识比较有利于我们深入探索 SSO。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll missing dependency&#58; RedCloth]]></title>
    <link href="http://alfred-sun.github.io/blog/2014/09/29/Jekyll-Missing-dependency-RedCloth/"/>
    <updated>2014-09-29T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/blog/2014/09/29/Jekyll-Missing-dependency-RedCloth</id>
    <content type="html"><![CDATA[<p>What happened to my Jekyll ?</p>

<p>OK, I Surrender.</p>

<p>After establishing local environment of GitHub Pages, I forked the repository of <a href="https://github.com/mojombo/mojombo.github.io">Tom Preston-Werner</a> and built the project with Jekyll; but encountered one problem under the Windows 7 environment.</p>

<p>The current ruby platform versions:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ruby        2.0.0p598 [i386-mingw32]
gem         2.0.14
bundler     1.7.9
RedCloth    4.2.9
</code></pre></div>
<!--more-->

<p>Always throw error, when build Jekyll and start server:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">You are missing a library required for Textile. Please run:
  $ [sudo] gem install RedCloth
  Conversion error: Jekyll::Converters::Textile encountered an error converting &#39;_posts/2008-11-17-b
logging-like-a-hacker.textile/#excerpt&#39;.
  Conversion error: Missing dependency: RedCloth
             ERROR: YOUR SITE COULD NOT BE BUILT:
                    ------------------------------------
                    Missing dependency: RedCloth
</code></pre></div>
<p>However, turn to Linux, use <code>RVM</code> to manage Ruby and run <code>jekyll build</code>, there is no error occurred indeed and it works well to parse <code>textile</code> file. This is very weird and still don&rsquo;t know why.</p>

<p><img src="/media/pictures/jekyll-missing-dependency-redcloth/textile_error.png" alt="Missing RedCloth" title="Missing dependency: RedCloth"></p>

<p>Click <a href="https://github.com/jekyll/jekyll/blob/00d29e7e7766b6cf8c81f21807a16bf7ec2d69df/lib/jekyll/converters/textile.rb" title="textile.rb Line: 16">here</a> to see the source code.</p>
]]></content>
  </entry>
  
</feed>
